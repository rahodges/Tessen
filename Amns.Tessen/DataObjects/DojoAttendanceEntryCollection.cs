/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Collection Object Business Tier    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections;

namespace Amns.Tessen
{
	/// <summary>
	/// <summary>
	/// Summary of MyClass
	/// </summary>
	/// </summary>
	public class DojoAttendanceEntryCollection : IList, ICloneable 
	{
		private int count = 0;
		private DojoAttendanceEntry[] DojoAttendanceEntryArray ;

		public DojoAttendanceEntryCollection() : base()
		{
			DojoAttendanceEntryArray = new DojoAttendanceEntry[15];
		}

		public DojoAttendanceEntryCollection(int capacity) : base()
		{
			DojoAttendanceEntryArray = new DojoAttendanceEntry[capacity];
		}

		#region IList Implemenation

		public bool IsFixedSize
		{
			get
			{
				return false;
			}
		}

		public bool IsReadOnly
		{
			get
			{
				return false;
			}
		}

		object IList.this[int index]
		{
			get
			{
				return this[index];
			}
			set
			{
				DojoAttendanceEntryArray[index] = (DojoAttendanceEntry) value;
			}
		}

		public DojoAttendanceEntry this[int index]
		{
			get
			{
				lock(this)
				{
					if(index > count - 1)
						throw(new Exception("Index out of bounds."));
					return DojoAttendanceEntryArray[index];
				}
			}
			set
			{
				OnCollectionChanged(EventArgs.Empty);
				DojoAttendanceEntryArray[index] = value;
			}
		}

		int IList.Add(object value)
		{
			return Add((DojoAttendanceEntry) value);
		}

		public int Add(DojoAttendanceEntry value)
		{
			OnCollectionChanged(EventArgs.Empty);
			lock(this)
			{
				count++;
				// Resize the array if the count is greater than the length 
				// of the array.
				if(count > DojoAttendanceEntryArray.GetUpperBound(0) + 1)
				{
					DojoAttendanceEntry[] tempDojoAttendanceEntryArray = new DojoAttendanceEntry[count * 2];
					Array.Copy(DojoAttendanceEntryArray, tempDojoAttendanceEntryArray, count - 1);
					DojoAttendanceEntryArray = tempDojoAttendanceEntryArray;
				}
				DojoAttendanceEntryArray[count - 1] = value;
			}
			return count -1;
		}

		public void Clear()
		{
			OnCollectionChanged(EventArgs.Empty);
			lock(this)
			{
				count = 0;
				DojoAttendanceEntryArray = new DojoAttendanceEntry[15];
			}
		}

		bool IList.Contains(object value)
		{
			return Contains((DojoAttendanceEntry) value);
		}

		public bool Contains(DojoAttendanceEntry value)
		{
			return IndexOf(value) != -1;
		}

		int IList.IndexOf(object value)
		{
			return IndexOf((DojoAttendanceEntry) value);
		}

		public int IndexOf(DojoAttendanceEntry value)
		{
			lock(this)
			{
				for(int x = 0; x < count; x++)
					if(DojoAttendanceEntryArray[x].Equals(value))
						return x;
				return -1;
			}
		}

		void IList.Insert(int index, object value)
		{
			Insert(index, (DojoAttendanceEntry) value);
		}

		public void Insert(int index, DojoAttendanceEntry value)
		{
			OnCollectionChanged(EventArgs.Empty);
			lock(this)
			{
				count++;
				// Resize the array if the count is greater than the length 
				// of the array.
				if(count > DojoAttendanceEntryArray.GetUpperBound(0) + 1)
				{
					DojoAttendanceEntry[] tempDojoAttendanceEntryArray = new DojoAttendanceEntry[count * 2];
					Array.Copy(DojoAttendanceEntryArray, tempDojoAttendanceEntryArray, count - 1);
					DojoAttendanceEntryArray = tempDojoAttendanceEntryArray;
				}
				for(int x = index + 1; x == count - 2; x ++)
					DojoAttendanceEntryArray[x] = DojoAttendanceEntryArray[x - 1];
				DojoAttendanceEntryArray[index] = value;
			}
		}

		void IList.Remove(object value)
		{
			Remove((DojoAttendanceEntry) value);
		}

		public void Remove(DojoAttendanceEntry value)
		{
			OnCollectionChanged(EventArgs.Empty);
			int index = IndexOf(value);
			if(index == -1)
				throw(new Exception("DojoAttendanceEntry not found in collection."));
			RemoveAt(index);
		}

		public void RemoveAt(int index)
		{
			OnCollectionChanged(EventArgs.Empty);
			lock(this)
			{
				for(int x = index + 1; x <= count - 1; x++)
					DojoAttendanceEntryArray[x-1] = DojoAttendanceEntryArray[x];
				DojoAttendanceEntryArray[count - 1] = null;
				count--;
			}
		}

		#endregion

		#region ICollection Implementation

		public int Count
		{
			get
			{
				return count;
			}
		}

		public bool IsSynchronized
		{
			get
			{
				return DojoAttendanceEntryArray.IsSynchronized;
			}
		}

		public object SyncRoot
		{
			get
			{
				return DojoAttendanceEntryArray;
			}
		}

		public void CopyTo(Array array, int index)
		{
			lock(this)
			{
				DojoAttendanceEntryArray.CopyTo(array, index);
			}
		}

		#endregion

		#region IEnumerator Implementation

		public Enumerator GetEnumerator()
		{
			return new Enumerator(DojoAttendanceEntryArray, count);
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return GetEnumerator();
		}

		public class Enumerator : IEnumerator
		{
			private DojoAttendanceEntry[] DojoAttendanceEntryArray;
			private int cursor;
			private int virtualCount;

			public Enumerator(DojoAttendanceEntry[] DojoAttendanceEntryArray, int virtualCount)
			{
				this.DojoAttendanceEntryArray = DojoAttendanceEntryArray;
				this.virtualCount = virtualCount;
				cursor = -1;
			}

			public void Reset()
			{
				cursor = -1;
			}

			public bool MoveNext()
			{
				if(cursor < DojoAttendanceEntryArray.Length)
					cursor++;
				return(!(cursor == virtualCount));
			}

			public DojoAttendanceEntry Current
			{
				get
				{
					if((cursor < 0) || (cursor == virtualCount))
						throw(new InvalidOperationException());
					return DojoAttendanceEntryArray[cursor];
				}
			}

			Object IEnumerator.Current
			{
				get
				{
					return Current;
				}
			}
		}

		#endregion

		/// <summary>
		/// Makes a shallow copy of the current DojoAttendanceEntryCollection.
		/// as the parent object.
		/// </summary>
		/// <returns>DojoAttendanceEntryCollection</returns>
		#region ICloneable Implementation

		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Makes a shallow copy of the current DojoAttendanceEntryCollection.
		/// as the parent object.
		/// </summary>
		/// <returns>DojoAttendanceEntryCollection</returns>
		public DojoAttendanceEntryCollection Clone()
		{
			DojoAttendanceEntryCollection clonedDojoAttendanceEntry = new DojoAttendanceEntryCollection(count);
			lock(this)
			{
				foreach(DojoAttendanceEntry item in this)
					clonedDojoAttendanceEntry.Add(item);
			}
			return clonedDojoAttendanceEntry;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoAttendanceEntry.
		/// </summary>
		/// <param name="isolation">Placeholders are used to isolate the 
		/// items in the DojoAttendanceEntryCollection from their children.</param>
		public DojoAttendanceEntryCollection Copy(bool isolated)
		{
			DojoAttendanceEntryCollection isolatedCollection = new DojoAttendanceEntryCollection(count);

			lock(this)
			{
				if(isolated)
				{
					for(int i = 0; i < count; i++)
					{
						isolatedCollection.Add(DojoAttendanceEntryArray[i].NewPlaceHolder());
					}
				}
				else
				{
					for(int i = 0; i < count; i++)
					{
						isolatedCollection.Add(DojoAttendanceEntryArray[i].Copy());
					}
				}
			}
			return isolatedCollection;
		}

		#endregion

		#region Events

		public event EventHandler CollectionChanged;

		protected virtual void OnCollectionChanged(EventArgs e)
		{
			if(CollectionChanged != null)
				CollectionChanged(this, e);
		}

		#endregion

		#region Sort Methods

		/// <summary>
		/// Sorts the collection by id.
		/// </summary>
		public void Sort()
		{
			lock(this)
			{
				Array.Sort(DojoAttendanceEntryArray, 0, count);
			}
		}

		#endregion

		#region Find Methods

		/// <summary>
		/// Finds a record by ID.
		/// </summary>
		public DojoAttendanceEntry Find(int id)
		{
			lock(this)
			{
				for(int x = 0; x < count; x++)
					if(DojoAttendanceEntryArray[x].ID == id)
						return DojoAttendanceEntryArray[x];
			}
			return null;
		}

		#endregion

		#region ToString() Override Method

		public override string ToString()
		{
			string lineBreak;

			if(System.Web.HttpContext.Current != null)
			lineBreak = "<br />";
			else
			lineBreak = "\r\n";

			System.Text.StringBuilder s = new System.Text.StringBuilder();
			for(int x = 0; x < count; x++)
			{
				if(x != 0)
					s.Append(lineBreak);
				s.Append(DojoAttendanceEntryArray[x].ToString());
			}

			return s.ToString();
		}

		#endregion

		//--- Begin Custom Code ---
																																																																																																																																								
		public void Sort(params DojoAttendanceEntryCompareKey[] keys)
		{
			if(count > 0)
				Array.Sort(DojoAttendanceEntryArray, 0, count, new DojoAttendanceEntryComparer(keys));
		}

		#region Find Top Instructor
						
		//TODO: THIS NEEDS OPTIMIZED WITH A FindTopInstructors(count) METHOD

		public DojoMember FindTopInstructor(DateTime minDate, DateTime maxDate, params DojoMember[] exclusions)
		{
			bool exclusionFlag;

			DojoMember currentInstructor = null;
			int currentCount = 0;

			DojoMember topInstructor = null;
			int topCount = 0;

			// Return a null value if the array is empty.
			if(this.Count == 0)
				return null;

			// Clone the array first before the sort to keep
			// array order intact.
			DojoAttendanceEntryCollection temp = this.Clone();

			// Sort array by instructor first to group instructors together,
			// this avoids a messy search routine and allows one quick pass on
			// the array.
			temp.Sort(DojoAttendanceEntryCompareKey.Instructor);

			// Preset the current id to the first entry
			currentInstructor = temp[0].Class.Instructor;
			
			foreach(DojoAttendanceEntry e in temp)
			{
				if(e.Class.ClassStart < minDate)
					continue;
				
				if(e.Class.ClassStart > maxDate)
					continue;

				// Ignore Classes where student is the teacher
				if(e.Class.Instructor.ID == e.Member.ID)
					continue;

				if(exclusions != null)
				{
					exclusionFlag = false;

					// Ignore Exclusions
					foreach(DojoMember exclusion in exclusions)
					{
						if(exclusion != null &&
							e.Class.Instructor.ID == exclusion.ID)
						{
							exclusionFlag = true;
						}
					}

					if(exclusionFlag)
					{
						continue;
					}
				}

				// TODO: Impliment the following logic!
				// Ignore Classes where student is higher ranked
				// than the instructor.

				// If the current instructor is teaching this class,
				// increase the class count.
				if(e.Class.Instructor.ID == currentInstructor.ID)
				{
					currentCount++;
				}
				else
				{
					// If the current instructor has more classes
					// than the last top instructor, save this instructor
					// as the new top instructor.
					if(currentCount > topCount)
					{
						topInstructor = currentInstructor;
						topCount = currentCount;
					}

					// Switch the current instructor to this class's
					// instructor and reset the current count to 1 since
					// this class will not be counted on the next loop.
					currentInstructor = e.Class.Instructor;
					currentCount = 1;                    
				}
			}

			// Test the last instructor's count since it was not
			// processed by the loop.
			if(currentCount > topCount)
				topInstructor = currentInstructor;

			// Return the top instructor
			return topInstructor;

		}

		#endregion

		//--- End Custom Code ---
	}
}
