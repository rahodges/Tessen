/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.People;
using Amns.Rappahanock;
using Amns.GreyFox.Security;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoTestListFlags : int { Test,
				TestLocation,
				TestListMemberType1,
				TestListMemberType2,
				TestListMemberType3,
				TestPanelChief,
				TestPanelMembers,
				TestStatus,
				TestActiveTestList,
				TestItem,
				Status,
				StatusOnFinalized,
				StatusOnCompleted,
				Editor,
				EditorPrivateContact,
				EditorEmergencyContact,
				EditorPublicContact,
				EditorParent,
				EditorRoot,
				EditorMemberType,
				EditorMemberTypeTemplate,
				EditorMembership1,
				EditorMembership2,
				EditorMembership3,
				EditorMembership4,
				EditorMembership5,
				EditorInstructor1,
				EditorInstructor2,
				EditorInstructor3,
				EditorPromotionFlags,
				EditorRank,
				EditorUserAccount,
				EditorCustomer};

	#endregion

	/// <summary>
	/// Datamanager for DojoTestList objects.
	/// </summary>
	public class DojoTestListManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_TestLists";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoTestListID",
			"CreateDate",
			"ModifyDate",
			"TestID",
			"StatusID",
			"EditorID",
			"EditorComments",
			"Field1",
			"CandidatesCompileDate"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoTestListID", "LONG", "-1" },
			{ "CreateDate", "DATETIME", "DateTime.Now" },
			{ "ModifyDate", "DATETIME", "DateTime.Now" },
			{ "TestID", "LONG", "null" },
			{ "StatusID", "LONG", "null" },
			{ "EditorID", "LONG", "null" },
			{ "EditorComments", "MEMO", "" },
			{ "Field1", "BIT", "" },
			{ "CandidatesCompileDate", "DATETIME", "" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoTestListManager()
		{
		}

		public DojoTestListManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoTestListManager.isInitialized)
			{
				DojoTestListManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoTestList into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoTestList">The DojoTestList to insert into the database.</param>
		internal static int _insert(DojoTestList dojoTestList)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			// Set Create Date to Now
			dojoTestList.CreateDate = DateTime.Now.ToUniversalTime();

			// Set Modify Date to Now
			dojoTestList.ModifyDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_TestLists " +
				"(" +
				"CreateDate," +
				"ModifyDate," +
				"TestID," +
				"StatusID," +
				"EditorID," +
				"EditorComments," +
				"Field1," +
				"CandidatesCompileDate) VALUES (" +
				"@CreateDate," +
				"@ModifyDate," +
				"@TestID," +
				"@StatusID," +
				"@EditorID," +
				"@EditorComments," +
				"@Field1," +
				"@CandidatesCompileDate);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoTestList);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoTestList);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}

			// Save child relationships for Candidates.
			if(dojoTestList.candidates != null)
			{
				dbCommand = database.GetSqlStringCommand("INSERT INTO kitTessen_TestListsChildren_Candidates " +
					"(DojoTestListID, DojoMemberID)" + 
					" VALUES (@DojoTestListID, @DojoMemberID);");
				addParameter(database, dbCommand, "@DojoTestListID", DbType.Int32);
				addParameter(database, dbCommand, "@DojoMemberID", DbType.Int32);
				foreach(DojoMember item in dojoTestList.candidates)
				{
					dbCommand.Parameters["@DojoTestListID"].Value = id;
					dbCommand.Parameters["@DojoMemberID"].Value = item.ID;
					database.ExecuteNonQuery(dbCommand);
				}
			}
			// Store dojoTestList in cache.
			if(cacheEnabled) cacheStore(dojoTestList);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoTestList dojoTestList)
		{
			Database database;
			DbCommand dbCommand;

			// Set Modify Date to Now
			dojoTestList.ModifyDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_TestLists SET CreateDate=@CreateDate," +
				"ModifyDate=@ModifyDate," +
				"TestID=@TestID," +
				"StatusID=@StatusID," +
				"EditorID=@EditorID," +
				"EditorComments=@EditorComments," +
				"Field1=@Field1," +
				"CandidatesCompileDate=@CandidatesCompileDate WHERE DojoTestListID=@DojoTestListID;");

			fillParameters(database, dbCommand, dojoTestList);
			database.AddInParameter(dbCommand, "DojoTestListID", DbType.Int32, dojoTestList.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			if(dojoTestList.candidates != null)
			{

				// Delete child relationships for Candidates.
				dbCommand = database.GetSqlStringCommand("DELETE  FROM kitTessen_TestListsChildren_Candidates WHERE DojoTestListID=@DojoTestListID;");
				database.AddInParameter(dbCommand, "@DojoTestListID", DbType.Int32, dojoTestList.iD);
				database.ExecuteNonQuery(dbCommand);

				// Save child relationships for Candidates.
				dbCommand = database.GetSqlStringCommand("INSERT INTO kitTessen_TestListsChildren_Candidates (DojoTestListID, DojoMemberID) VALUES (@DojoTestListID, @DojoMemberID);");
				database.AddInParameter(dbCommand, "@DojoTestListID", DbType.Int32, dojoTestList.iD);
				database.AddInParameter(dbCommand, "@DojoMemberID", DbType.Int32);
				foreach(DojoMember dojoMember in dojoTestList.candidates)
				{
					dbCommand.Parameters["@DojoMemberID"].Value = dojoMember.ID;
					database.ExecuteNonQuery(dbCommand);
				}
			}

			// Store dojoTestList in cache.
			if (cacheEnabled) cacheStore(dojoTestList);

			return dojoTestList.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoTestList dojoTestList)
		{
			#region _system

			addParameter(database, dbCommand, "@CreateDate", DbType.Date, dojoTestList.createDate);
			addParameter(database, dbCommand, "@ModifyDate", DbType.Date, dojoTestList.modifyDate);

			#endregion

			#region General

			if(dojoTestList.test == null)
			{
				addParameter(database, dbCommand, "@TestID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@TestID", DbType.Int32, dojoTestList.test.ID);
			}
			if(dojoTestList.status == null)
			{
				addParameter(database, dbCommand, "@StatusID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@StatusID", DbType.Int32, dojoTestList.status.ID);
			}
			if(dojoTestList.editor == null)
			{
				addParameter(database, dbCommand, "@EditorID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@EditorID", DbType.Int32, dojoTestList.editor.ID);
			}
			addParameter(database, dbCommand, "@EditorComments", DbType.String, dojoTestList.editorComments);
			addParameter(database, dbCommand, "@Field1", DbType.Boolean, dojoTestList.field1);

			#endregion

			#region System

			addParameter(database, dbCommand, "@CandidatesCompileDate", DbType.Date, dojoTestList.candidatesCompileDate);

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoTestList dojoTestList)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoTestList.iD);
				if(cachedObject != null)
				{
					((DojoTestList)cachedObject).CopyTo(dojoTestList, true);
					return dojoTestList.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_TestLists WHERE DojoTestListID=");
			query.Append(dojoTestList.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoTestListID '{0}'.", 
					dojoTestList.iD)));
			}

			FillFromReader(dojoTestList, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoTestList in cache.
			if(cacheEnabled) cacheStore(dojoTestList);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoTestListCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoTestListCollection GetCollection(string whereClause, string sortClause, params DojoTestListFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoTestListCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoTestListFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoTestListCollection dojoTestListCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoTestList.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int testOffset = -1;
			int testLocationOffset = -1;
			int testListMemberType1Offset = -1;
			int testListMemberType2Offset = -1;
			int testListMemberType3Offset = -1;
			int testPanelChiefOffset = -1;
			int testStatusOffset = -1;
			int testActiveTestListOffset = -1;
			int testItemOffset = -1;
			int statusOffset = -1;
			int statusOnFinalizedOffset = -1;
			int statusOnCompletedOffset = -1;
			int editorOffset = -1;
			int editorPrivateContactOffset = -1;
			int editorEmergencyContactOffset = -1;
			int editorPublicContactOffset = -1;
			int editorParentOffset = -1;
			int editorRootOffset = -1;
			int editorMemberTypeOffset = -1;
			int editorMemberTypeTemplateOffset = -1;
			int editorMembership1Offset = -1;
			int editorMembership2Offset = -1;
			int editorMembership3Offset = -1;
			int editorMembership4Offset = -1;
			int editorMembership5Offset = -1;
			int editorInstructor1Offset = -1;
			int editorInstructor2Offset = -1;
			int editorInstructor3Offset = -1;
			int editorRankOffset = -1;
			int editorUserAccountOffset = -1;
			int editorCustomerOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoTestListFlags.Test:
							for(int i = 0; i <= DojoTestManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test.");
								query.Append(DojoTestManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testOffset = innerJoinOffset;
							innerJoinOffset = testOffset + DojoTestManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.TestLocation:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_Location.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testLocationOffset = innerJoinOffset;
							innerJoinOffset = testLocationOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.TestListMemberType1:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_ListMemberType1.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testListMemberType1Offset = innerJoinOffset;
							innerJoinOffset = testListMemberType1Offset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.TestListMemberType2:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_ListMemberType2.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testListMemberType2Offset = innerJoinOffset;
							innerJoinOffset = testListMemberType2Offset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.TestListMemberType3:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_ListMemberType3.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testListMemberType3Offset = innerJoinOffset;
							innerJoinOffset = testListMemberType3Offset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.TestPanelChief:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_PanelChief.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testPanelChiefOffset = innerJoinOffset;
							innerJoinOffset = testPanelChiefOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.TestStatus:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_Status.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testStatusOffset = innerJoinOffset;
							innerJoinOffset = testStatusOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.TestActiveTestList:
							for(int i = 0; i <= DojoTestListManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_ActiveTestList.");
								query.Append(DojoTestListManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testActiveTestListOffset = innerJoinOffset;
							innerJoinOffset = testActiveTestListOffset + DojoTestListManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.TestItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testItemOffset = innerJoinOffset;
							innerJoinOffset = testItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.Status:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Status.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							statusOffset = innerJoinOffset;
							innerJoinOffset = statusOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.StatusOnFinalized:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Status_OnFinalized.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							statusOnFinalizedOffset = innerJoinOffset;
							innerJoinOffset = statusOnFinalizedOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.StatusOnCompleted:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Status_OnCompleted.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							statusOnCompletedOffset = innerJoinOffset;
							innerJoinOffset = statusOnCompletedOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.Editor:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorOffset = innerJoinOffset;
							innerJoinOffset = editorOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = editorPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorEmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorEmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = editorEmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorPublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorPublicContactOffset = innerJoinOffset;
							innerJoinOffset = editorPublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorParent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorParentOffset = innerJoinOffset;
							innerJoinOffset = editorParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorRoot:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorRootOffset = innerJoinOffset;
							innerJoinOffset = editorRootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = editorMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = editorMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorMembership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMembership1Offset = innerJoinOffset;
							innerJoinOffset = editorMembership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorMembership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMembership2Offset = innerJoinOffset;
							innerJoinOffset = editorMembership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorMembership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMembership3Offset = innerJoinOffset;
							innerJoinOffset = editorMembership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorMembership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMembership4Offset = innerJoinOffset;
							innerJoinOffset = editorMembership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorMembership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMembership5Offset = innerJoinOffset;
							innerJoinOffset = editorMembership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorInstructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorInstructor1Offset = innerJoinOffset;
							innerJoinOffset = editorInstructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorInstructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorInstructor2Offset = innerJoinOffset;
							innerJoinOffset = editorInstructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorInstructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorInstructor3Offset = innerJoinOffset;
							innerJoinOffset = editorInstructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorRankOffset = innerJoinOffset;
							innerJoinOffset = editorRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorUserAccountOffset = innerJoinOffset;
							innerJoinOffset = editorUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListFlags.EditorCustomer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorCustomerOffset = innerJoinOffset;
							innerJoinOffset = editorCustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_TestLists AS DojoTestList");
			}
			else
			{
				query.Append(" FROM kitTessen_TestLists AS DojoTestList");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoTestListFlags.Test:
							query.Append(" LEFT JOIN kitTessen_Tests AS Test ON DojoTestList.TestID = Test.DojoTestID)");
							break;
						case DojoTestListFlags.TestLocation:
							query.Append(" LEFT JOIN kitTessen_Locations AS Test_Location ON Test.LocationID = Test_Location.GreyFoxContactID)");
							break;
						case DojoTestListFlags.TestListMemberType1:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Test_ListMemberType1 ON Test.ListMemberType1ID = Test_ListMemberType1.DojoMemberTypeID)");
							break;
						case DojoTestListFlags.TestListMemberType2:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Test_ListMemberType2 ON Test.ListMemberType2ID = Test_ListMemberType2.DojoMemberTypeID)");
							break;
						case DojoTestListFlags.TestListMemberType3:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Test_ListMemberType3 ON Test.ListMemberType3ID = Test_ListMemberType3.DojoMemberTypeID)");
							break;
						case DojoTestListFlags.TestPanelChief:
							query.Append(" LEFT JOIN kitTessen_Members AS Test_PanelChief ON Test.PanelChiefID = Test_PanelChief.DojoMemberID)");
							break;
						case DojoTestListFlags.TestStatus:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS Test_Status ON Test.StatusID = Test_Status.DojoTestListStatusID)");
							break;
						case DojoTestListFlags.TestActiveTestList:
							query.Append(" LEFT JOIN kitTessen_TestLists AS Test_ActiveTestList ON Test.ActiveTestListID = Test_ActiveTestList.DojoTestListID)");
							break;
						case DojoTestListFlags.TestItem:
							query.Append(" LEFT JOIN RH_Items AS Test_Item ON Test.ItemID = Test_Item.RHItemID)");
							break;
						case DojoTestListFlags.Status:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS Status ON DojoTestList.StatusID = Status.DojoTestListStatusID)");
							break;
						case DojoTestListFlags.StatusOnFinalized:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS Status_OnFinalized ON Status.OnFinalizedID = Status_OnFinalized.DojoTestListStatusID)");
							break;
						case DojoTestListFlags.StatusOnCompleted:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS Status_OnCompleted ON Status.OnCompletedID = Status_OnCompleted.DojoTestListStatusID)");
							break;
						case DojoTestListFlags.Editor:
							query.Append(" LEFT JOIN kitTessen_Members AS Editor ON DojoTestList.EditorID = Editor.DojoMemberID)");
							break;
						case DojoTestListFlags.EditorPrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Editor_PrivateContact ON Editor.PrivateContactID = Editor_PrivateContact.GreyFoxContactID)");
							break;
						case DojoTestListFlags.EditorEmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Editor_EmergencyContact ON Editor.EmergencyContactID = Editor_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoTestListFlags.EditorPublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Editor_PublicContact ON Editor.PublicContactID = Editor_PublicContact.GreyFoxContactID)");
							break;
						case DojoTestListFlags.EditorParent:
							query.Append(" LEFT JOIN kitTessen_Members AS Editor_Parent ON Editor.ParentID = Editor_Parent.DojoMemberID)");
							break;
						case DojoTestListFlags.EditorRoot:
							query.Append(" LEFT JOIN kitTessen_Members AS Editor_Root ON Editor.RootID = Editor_Root.DojoMemberID)");
							break;
						case DojoTestListFlags.EditorMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Editor_MemberType ON Editor.MemberTypeID = Editor_MemberType.DojoMemberTypeID)");
							break;
						case DojoTestListFlags.EditorMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Editor_MemberTypeTemplate ON Editor.MemberTypeTemplateID = Editor_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoTestListFlags.EditorMembership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Editor_Membership1 ON Editor.Membership1ID = Editor_Membership1.DojoMembershipID)");
							break;
						case DojoTestListFlags.EditorMembership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Editor_Membership2 ON Editor.Membership2ID = Editor_Membership2.DojoMembershipID)");
							break;
						case DojoTestListFlags.EditorMembership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Editor_Membership3 ON Editor.Membership3ID = Editor_Membership3.DojoMembershipID)");
							break;
						case DojoTestListFlags.EditorMembership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Editor_Membership4 ON Editor.Membership4ID = Editor_Membership4.DojoMembershipID)");
							break;
						case DojoTestListFlags.EditorMembership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Editor_Membership5 ON Editor.Membership5ID = Editor_Membership5.DojoMembershipID)");
							break;
						case DojoTestListFlags.EditorInstructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Editor_Instructor1 ON Editor.Instructor1ID = Editor_Instructor1.DojoMemberID)");
							break;
						case DojoTestListFlags.EditorInstructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Editor_Instructor2 ON Editor.Instructor2ID = Editor_Instructor2.DojoMemberID)");
							break;
						case DojoTestListFlags.EditorInstructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Editor_Instructor3 ON Editor.Instructor3ID = Editor_Instructor3.DojoMemberID)");
							break;
						case DojoTestListFlags.EditorRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Editor_Rank ON Editor.RankID = Editor_Rank.DojoRankID)");
							break;
						case DojoTestListFlags.EditorUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Editor_UserAccount ON Editor.UserAccountID = Editor_UserAccount.GreyFoxUserID)");
							break;
						case DojoTestListFlags.EditorCustomer:
							query.Append(" LEFT JOIN RH_Customers AS Editor_Customer ON Editor.CustomerID = Editor_Customer.RHCustomerID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoTestListCollection = new DojoTestListCollection();

			while(r.Read())
			{
				DojoTestList dojoTestList = ParseFromReader(r, 0, 1);

				// Fill Test
				if(testOffset != -1 && !r.IsDBNull(testOffset))
				{
					DojoTestManager.FillFromReader(dojoTestList.test, r, testOffset, testOffset+1);

					// Fill 
					if(testLocationOffset != -1 && !r.IsDBNull(testLocationOffset))
						GreyFoxContactManager.FillFromReader(dojoTestList.test.Location, "kitTessen_Locations", r, testLocationOffset, testLocationOffset+1);

					// Fill 
					if(testListMemberType1Offset != -1 && !r.IsDBNull(testListMemberType1Offset))
						DojoMemberTypeManager.FillFromReader(dojoTestList.test.ListMemberType1, r, testListMemberType1Offset, testListMemberType1Offset+1);

					// Fill 
					if(testListMemberType2Offset != -1 && !r.IsDBNull(testListMemberType2Offset))
						DojoMemberTypeManager.FillFromReader(dojoTestList.test.ListMemberType2, r, testListMemberType2Offset, testListMemberType2Offset+1);

					// Fill 
					if(testListMemberType3Offset != -1 && !r.IsDBNull(testListMemberType3Offset))
						DojoMemberTypeManager.FillFromReader(dojoTestList.test.ListMemberType3, r, testListMemberType3Offset, testListMemberType3Offset+1);

					// Fill 
					if(testPanelChiefOffset != -1 && !r.IsDBNull(testPanelChiefOffset))
						DojoMemberManager.FillFromReader(dojoTestList.test.PanelChief, r, testPanelChiefOffset, testPanelChiefOffset+1);

					// Fill 
					if(testStatusOffset != -1 && !r.IsDBNull(testStatusOffset))
						DojoTestListStatusManager.FillFromReader(dojoTestList.test.Status, r, testStatusOffset, testStatusOffset+1);

					// Fill 
					if(testActiveTestListOffset != -1 && !r.IsDBNull(testActiveTestListOffset))
						DojoTestListManager.FillFromReader(dojoTestList.test.ActiveTestList, r, testActiveTestListOffset, testActiveTestListOffset+1);

					// Fill 
					if(testItemOffset != -1 && !r.IsDBNull(testItemOffset))
						RHItemManager.FillFromReader(dojoTestList.test.Item, r, testItemOffset, testItemOffset+1);

				}

				// Fill Status
				if(statusOffset != -1 && !r.IsDBNull(statusOffset))
				{
					DojoTestListStatusManager.FillFromReader(dojoTestList.status, r, statusOffset, statusOffset+1);

					// Fill 
					if(statusOnFinalizedOffset != -1 && !r.IsDBNull(statusOnFinalizedOffset))
						DojoTestListStatusManager.FillFromReader(dojoTestList.status.OnFinalized, r, statusOnFinalizedOffset, statusOnFinalizedOffset+1);

					// Fill 
					if(statusOnCompletedOffset != -1 && !r.IsDBNull(statusOnCompletedOffset))
						DojoTestListStatusManager.FillFromReader(dojoTestList.status.OnCompleted, r, statusOnCompletedOffset, statusOnCompletedOffset+1);

				}

				// Fill Editor
				if(editorOffset != -1 && !r.IsDBNull(editorOffset))
				{
					DojoMemberManager.FillFromReader(dojoTestList.editor, r, editorOffset, editorOffset+1);

					// Fill 
					if(editorPrivateContactOffset != -1 && !r.IsDBNull(editorPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoTestList.editor.PrivateContact, "kitTessen_Members_PrivateContacts", r, editorPrivateContactOffset, editorPrivateContactOffset+1);

					// Fill 
					if(editorEmergencyContactOffset != -1 && !r.IsDBNull(editorEmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoTestList.editor.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, editorEmergencyContactOffset, editorEmergencyContactOffset+1);

					// Fill 
					if(editorPublicContactOffset != -1 && !r.IsDBNull(editorPublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoTestList.editor.PublicContact, "kitTessen_Members_PublicContacts", r, editorPublicContactOffset, editorPublicContactOffset+1);

					// Fill 
					if(editorParentOffset != -1 && !r.IsDBNull(editorParentOffset))
						DojoMemberManager.FillFromReader(dojoTestList.editor.Parent, r, editorParentOffset, editorParentOffset+1);

					// Fill 
					if(editorRootOffset != -1 && !r.IsDBNull(editorRootOffset))
						DojoMemberManager.FillFromReader(dojoTestList.editor.Root, r, editorRootOffset, editorRootOffset+1);

					// Fill 
					if(editorMemberTypeOffset != -1 && !r.IsDBNull(editorMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoTestList.editor.MemberType, r, editorMemberTypeOffset, editorMemberTypeOffset+1);

					// Fill 
					if(editorMemberTypeTemplateOffset != -1 && !r.IsDBNull(editorMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoTestList.editor.MemberTypeTemplate, r, editorMemberTypeTemplateOffset, editorMemberTypeTemplateOffset+1);

					// Fill 
					if(editorMembership1Offset != -1 && !r.IsDBNull(editorMembership1Offset))
						DojoMembershipManager.FillFromReader(dojoTestList.editor.Membership1, r, editorMembership1Offset, editorMembership1Offset+1);

					// Fill 
					if(editorMembership2Offset != -1 && !r.IsDBNull(editorMembership2Offset))
						DojoMembershipManager.FillFromReader(dojoTestList.editor.Membership2, r, editorMembership2Offset, editorMembership2Offset+1);

					// Fill 
					if(editorMembership3Offset != -1 && !r.IsDBNull(editorMembership3Offset))
						DojoMembershipManager.FillFromReader(dojoTestList.editor.Membership3, r, editorMembership3Offset, editorMembership3Offset+1);

					// Fill 
					if(editorMembership4Offset != -1 && !r.IsDBNull(editorMembership4Offset))
						DojoMembershipManager.FillFromReader(dojoTestList.editor.Membership4, r, editorMembership4Offset, editorMembership4Offset+1);

					// Fill 
					if(editorMembership5Offset != -1 && !r.IsDBNull(editorMembership5Offset))
						DojoMembershipManager.FillFromReader(dojoTestList.editor.Membership5, r, editorMembership5Offset, editorMembership5Offset+1);

					// Fill 
					if(editorInstructor1Offset != -1 && !r.IsDBNull(editorInstructor1Offset))
						DojoMemberManager.FillFromReader(dojoTestList.editor.Instructor1, r, editorInstructor1Offset, editorInstructor1Offset+1);

					// Fill 
					if(editorInstructor2Offset != -1 && !r.IsDBNull(editorInstructor2Offset))
						DojoMemberManager.FillFromReader(dojoTestList.editor.Instructor2, r, editorInstructor2Offset, editorInstructor2Offset+1);

					// Fill 
					if(editorInstructor3Offset != -1 && !r.IsDBNull(editorInstructor3Offset))
						DojoMemberManager.FillFromReader(dojoTestList.editor.Instructor3, r, editorInstructor3Offset, editorInstructor3Offset+1);

					// Fill 
					if(editorRankOffset != -1 && !r.IsDBNull(editorRankOffset))
						DojoRankManager.FillFromReader(dojoTestList.editor.Rank, r, editorRankOffset, editorRankOffset+1);

					// Fill 
					if(editorUserAccountOffset != -1 && !r.IsDBNull(editorUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoTestList.editor.UserAccount, r, editorUserAccountOffset, editorUserAccountOffset+1);

					// Fill 
					if(editorCustomerOffset != -1 && !r.IsDBNull(editorCustomerOffset))
						RHCustomerManager.FillFromReader(dojoTestList.editor.Customer, r, editorCustomerOffset, editorCustomerOffset+1);

				}

				dojoTestListCollection.Add(dojoTestList);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoTestListCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoTestList ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoTestList dojoTestList = new DojoTestList();
			FillFromReader(dojoTestList, r, idOffset, dataOffset);
			return dojoTestList;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoTestList dojoTestList, IDataReader r, int idOffset, int dataOffset)
		{
			dojoTestList.iD = r.GetInt32(idOffset);
			dojoTestList.isSynced = true;
			dojoTestList.isPlaceHolder = false;

			dojoTestList.createDate = r.GetDateTime(0+dataOffset);
			dojoTestList.modifyDate = r.GetDateTime(1+dataOffset);
			if(!r.IsDBNull(2+dataOffset) && r.GetInt32(2+dataOffset) > 0)
			{
				dojoTestList.test = DojoTest.NewPlaceHolder(r.GetInt32(2+dataOffset));
			}
			if(!r.IsDBNull(3+dataOffset) && r.GetInt32(3+dataOffset) > 0)
			{
				dojoTestList.status = DojoTestListStatus.NewPlaceHolder(r.GetInt32(3+dataOffset));
			}
			if(!r.IsDBNull(4+dataOffset) && r.GetInt32(4+dataOffset) > 0)
			{
				dojoTestList.editor = DojoMember.NewPlaceHolder(r.GetInt32(4+dataOffset));
			}
			dojoTestList.editorComments = r.GetString(5+dataOffset);
			dojoTestList.field1 = r.GetBoolean(6+dataOffset);
			dojoTestList.candidatesCompileDate = r.GetDateTime(7+dataOffset);
		}

		#endregion

		#region Default NitroCast Fill Methods

		public static void FillCandidates(DojoTestList dojoTestList)
		{
			StringBuilder s;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			s = new StringBuilder("SELECT DojoMemberID FROM kitTessen_TestListsChildren_Candidates ");
			s.Append("WHERE DojoTestListID=");
			s.Append(dojoTestList.iD);
			s.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(s.ToString());
			r = database.ExecuteReader(dbCommand);

			DojoMemberCollection candidates;
			if(dojoTestList.candidates != null)
			{
				candidates = dojoTestList.candidates;
				candidates.Clear();
			}
			else
			{
				candidates = new DojoMemberCollection();
				dojoTestList.candidates = candidates;
			}

			while(r.Read())
				candidates.Add(DojoMember.NewPlaceHolder(r.GetInt32(0)));

			dojoTestList.Candidates = candidates;
			// Store DojoTestList in cache.
			if(cacheEnabled) cacheStore(dojoTestList);
		}

		public static void FillCandidates(DojoTestListCollection dojoTestListCollection)
		{
			StringBuilder s;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			if(dojoTestListCollection.Count > 0)
			{
				s = new StringBuilder("SELECT DojoTestListID, DojoMemberID FROM kitTessen_TestListsChildren_Candidates ORDER BY DojoTestListID; ");

				// Clone and sort collection by ID first to fill children in one pass
				DojoTestListCollection clonedCollection = dojoTestListCollection.Clone();
				clonedCollection.Sort();

				database = DatabaseFactory.CreateDatabase();
				dbCommand = database.GetSqlStringCommand(s.ToString());
				r = database.ExecuteReader(dbCommand);

				bool more = r.Read();

				foreach(DojoTestList dojoTestList in clonedCollection)
				{
					DojoMemberCollection candidates;
					if(dojoTestList.candidates != null)
					{
						candidates = dojoTestList.candidates;
						candidates.Clear();
					}
					else
					{
						candidates = new DojoMemberCollection();
						dojoTestList.candidates = candidates;
					}

					while(more)
					{
						if(r.GetInt32(0) < dojoTestList.iD)
						{
							more = r.Read();
						}
						else if(r.GetInt32(0) == dojoTestList.iD)
						{
							candidates.Add(DojoMember.NewPlaceHolder(r.GetInt32(1)));
							more = r.Read();
						}
						else
						{
							break;
						}
					}

					// No need to continue if there are no more records
					if(!more) break;
				}

			}
		}

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_TestLists WHERE DojoTestListID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);


			// Delete child relationships for Candidates.
			query.Length = 0;
			query.Append("DELETE FROM kitTessen_TestListsChildren_Candidates WHERE ");
			query.Append("DojoTestListID=");
			query.Append(id);
			query.Append(";");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_TestLists ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_TestLists_Test FOREIGN KEY (TestID) REFERENCES kitTessen_Tests (DojoTestID),");
			query.Append(" CONSTRAINT FK_kitTessen_TestLists_Status FOREIGN KEY (StatusID) REFERENCES kitTessen_DojoTestListStatuses (DojoTestListStatusID),");
			query.Append(" CONSTRAINT FK_kitTessen_TestLists_Editor FOREIGN KEY (EditorID) REFERENCES kitTessen_Members (DojoMemberID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			query.Length = 0;
			query.Append("ALTER TABLE kitTessen_TestListsChildren_Candidates ADD");
			query.Append(" CONSTRAINT FK_kitTessen_TestLists_kitTessen_TestListsChildren_Candidates FOREIGN KEY (DojoTestListID) REFERENCES kitTessen_TestLists (DojoTestListID) ON DELETE CASCADE, ");
			query.Append(" CONSTRAINT FK_kitTessen_TestListsChildren_Candidates_kitTessen_Members FOREIGN KEY (DojoMemberID) REFERENCES kitTessen_Members (DojoMemberID) ON DELETE CASCADE;");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_TestLists ");
				query.Append(" (DojoTestListID COUNTER(1,1) CONSTRAINT PK_kitTessen_TestLists PRIMARY KEY, " +
					"CreateDate DATETIME," +
					"ModifyDate DATETIME," +
					"TestID LONG," +
					"StatusID LONG," +
					"EditorID LONG," +
					"EditorComments MEMO," +
					"Field1 BIT," +
					"CandidatesCompileDate DATETIME);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_TestLists ");
				query.Append(" (DojoTestListID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_TestLists PRIMARY KEY, " +
					"CreateDate DATETIME," +
					"ModifyDate DATETIME," +
					"TestID INT," +
					"StatusID INT," +
					"EditorID INT," +
					"EditorComments NTEXT," +
					"Field1 BIT," +
					"CandidatesCompileDate DATETIME);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			//
			// Create children table for Candidates.
			//
			query.Length = 0;
			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				query.Append("CREATE TABLE kitTessen_TestListsChildren_Candidates ");
				query.Append("(DojoTestListID LONG, DojoMemberID LONG);");
				dbCommand = database.GetSqlStringCommand(query.ToString());
				database.ExecuteNonQuery(dbCommand);

			}
			else
			{
				query.Append("CREATE TABLE kitTessen_TestListsChildren_Candidates ");
				query.Append("(DojoTestListID INT, DojoMemberID INT);");
				dbCommand = database.GetSqlStringCommand(query.ToString());
				database.ExecuteNonQuery(dbCommand);

			}
		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoTestList dojoTestList)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_TestLists_" + dojoTestList.iD.ToString(), dojoTestList);
		}

		private static DojoTestList cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_TestLists_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoTestList)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_TestLists_" + id.ToString());
		}

		#endregion

	}
}

