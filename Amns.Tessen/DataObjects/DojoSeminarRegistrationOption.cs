/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;

namespace Amns.Tessen
{
	/// <summary>
	/// Registration option wrapper.
	/// </summary>
	public class DojoSeminarRegistrationOption : ICloneable, IComparable, Amns.Rappahanock.IRHLineExtension
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal decimal quantity;
		internal decimal totalFee;
		internal decimal costPerItem;
		internal DojoSeminarOption parentOption;
		internal DojoSeminarRegistration parentRegistration;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoSeminarRegistrationOption Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoSeminarRegistrationOption as a Placeholder. Placeholders only contain 
		/// a DojoSeminarRegistrationOption ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public decimal Quantity
		{
			get
			{
				EnsurePreLoad();
				return quantity;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= quantity == value;
				quantity = value;
			}
		}

		/// <summary>
		/// </summary>
		public decimal TotalFee
		{
			get
			{
				EnsurePreLoad();
				return totalFee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= totalFee == value;
				totalFee = value;
			}
		}

		/// <summary>
		/// </summary>
		public decimal CostPerItem
		{
			get
			{
				EnsurePreLoad();
				return costPerItem;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= costPerItem == value;
				costPerItem = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoSeminarOption ParentOption
		{
			get
			{
				EnsurePreLoad();
				return parentOption;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(parentOption == null)
					{
						return;
					}
					else
					{
						parentOption = value;
						isSynced = false;
					}
				}
				else
				{
					if(parentOption != null && value.ID == parentOption.ID)
					{
						return; 
					}
					else
					{
						parentOption = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoSeminarRegistration ParentRegistration
		{
			get
			{
				EnsurePreLoad();
				return parentRegistration;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(parentRegistration == null)
					{
						return;
					}
					else
					{
						parentRegistration = value;
						isSynced = false;
					}
				}
				else
				{
					if(parentRegistration != null && value.ID == parentRegistration.ID)
					{
						return; 
					}
					else
					{
						parentRegistration = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoSeminarRegistrationOption.
		/// </summary>
		public DojoSeminarRegistrationOption()
		{
		}

		public DojoSeminarRegistrationOption(int id)
		{
			this.iD = id;
			isSynced = DojoSeminarRegistrationOptionManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoSeminarRegistrationOptionManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoSeminarRegistrationOption object state to the database.
		/// </summary>
		public int Save()
		{
			if(parentOption != null)
				parentOption.Save();
			if(parentRegistration != null)
				parentRegistration.Save();

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoSeminarRegistrationOptionManager._insert(this);
			else
				DojoSeminarRegistrationOptionManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoSeminarRegistrationOptionManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoSeminarRegistrationOption object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoSeminarRegistrationOption object reflecting the replicated DojoSeminarRegistrationOption object.</returns>
		public DojoSeminarRegistrationOption Duplicate()
		{
			DojoSeminarRegistrationOption clonedDojoSeminarRegistrationOption = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoSeminarRegistrationOption.iD = DojoSeminarRegistrationOptionManager._insert(clonedDojoSeminarRegistrationOption);
			clonedDojoSeminarRegistrationOption.isSynced = true;
			return clonedDojoSeminarRegistrationOption;
		}

		/// <summary>
		/// Overwrites and existing DojoSeminarRegistrationOption object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoSeminarRegistrationOptionManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoSeminarRegistrationOption object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoSeminarRegistrationOption object reflecting the replicated DojoSeminarRegistrationOption object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoSeminarRegistrationOption object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoSeminarRegistrationOption object reflecting the replicated DojoSeminarRegistrationOption object.</returns>
		public DojoSeminarRegistrationOption Clone()
		{
			DojoSeminarRegistrationOption clonedDojoSeminarRegistrationOption = new DojoSeminarRegistrationOption();
			clonedDojoSeminarRegistrationOption.iD = iD;
			clonedDojoSeminarRegistrationOption.isSynced = isSynced;
			clonedDojoSeminarRegistrationOption.quantity = quantity;
			clonedDojoSeminarRegistrationOption.totalFee = totalFee;
			clonedDojoSeminarRegistrationOption.costPerItem = costPerItem;


			if(parentOption != null)
				clonedDojoSeminarRegistrationOption.parentOption = parentOption;

			if(parentRegistration != null)
				clonedDojoSeminarRegistrationOption.parentRegistration = parentRegistration;

			return clonedDojoSeminarRegistrationOption;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoSeminarRegistrationOption.
		/// </summary>
		/// <returns> A new DojoSeminarRegistrationOption object reflecting the cloned DojoSeminarRegistrationOption object.</returns>
		public DojoSeminarRegistrationOption Copy()
		{
			DojoSeminarRegistrationOption dojoSeminarRegistrationOption = new DojoSeminarRegistrationOption();
			CopyTo(dojoSeminarRegistrationOption);
			return dojoSeminarRegistrationOption;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoSeminarRegistrationOption.
		/// </summary>
		/// <returns> A new DojoSeminarRegistrationOption object reflecting the cloned DojoSeminarRegistrationOption object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoSeminarRegistrationOption from its children.</param>
		public DojoSeminarRegistrationOption Copy(bool isolation)
		{
			DojoSeminarRegistrationOption dojoSeminarRegistrationOption = new DojoSeminarRegistrationOption();
			CopyTo(dojoSeminarRegistrationOption, isolation);
			return dojoSeminarRegistrationOption;
		}

		/// <summary>
		/// Deep copies the current DojoSeminarRegistrationOption to another instance of DojoSeminarRegistrationOption.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoSeminarRegistrationOption">The DojoSeminarRegistrationOption to copy to.</param>
		public void CopyTo(DojoSeminarRegistrationOption dojoSeminarRegistrationOption)
		{
			CopyTo(dojoSeminarRegistrationOption, false);
		}

		/// <summary>
		/// Deep copies the current DojoSeminarRegistrationOption to another instance of DojoSeminarRegistrationOption.
		/// </summary>
		/// <param name="DojoSeminarRegistrationOption">The DojoSeminarRegistrationOption to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoSeminarRegistrationOption from its children.</param>
		public void CopyTo(DojoSeminarRegistrationOption dojoSeminarRegistrationOption, bool isolation)
		{
			dojoSeminarRegistrationOption.iD = iD;
			dojoSeminarRegistrationOption.isPlaceHolder = isPlaceHolder;
			dojoSeminarRegistrationOption.isSynced = isSynced;
			dojoSeminarRegistrationOption.quantity = quantity;
			dojoSeminarRegistrationOption.totalFee = totalFee;
			dojoSeminarRegistrationOption.costPerItem = costPerItem;
			if(parentOption != null)
			{
				if(isolation)
				{
					dojoSeminarRegistrationOption.parentOption = parentOption.NewPlaceHolder();
				}
				else
				{
					dojoSeminarRegistrationOption.parentOption = parentOption.Copy(false);
				}
			}
			if(parentRegistration != null)
			{
				if(isolation)
				{
					dojoSeminarRegistrationOption.parentRegistration = parentRegistration.NewPlaceHolder();
				}
				else
				{
					dojoSeminarRegistrationOption.parentRegistration = parentRegistration.Copy(false);
				}
			}
		}

		public DojoSeminarRegistrationOption NewPlaceHolder()
		{
			DojoSeminarRegistrationOption dojoSeminarRegistrationOption = new DojoSeminarRegistrationOption();
			dojoSeminarRegistrationOption.iD = iD;
			dojoSeminarRegistrationOption.isPlaceHolder = true;
			dojoSeminarRegistrationOption.isSynced = true;
			return dojoSeminarRegistrationOption;
		}

		public static DojoSeminarRegistrationOption NewPlaceHolder(int iD)
		{
			DojoSeminarRegistrationOption dojoSeminarRegistrationOption = new DojoSeminarRegistrationOption();
			dojoSeminarRegistrationOption.iD = iD;
			dojoSeminarRegistrationOption.isPlaceHolder = true;
			dojoSeminarRegistrationOption.isSynced = true;
			return dojoSeminarRegistrationOption;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoSeminarRegistrationOption dojoSeminarRegistrationOption = (DojoSeminarRegistrationOption) obj;
			return this.iD - dojoSeminarRegistrationOption.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoSeminarRegistrationOption dojoSeminarRegistrationOption)
		{
			return this.iD - dojoSeminarRegistrationOption.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---

        public Decimal Rate { get { return this.CostPerItem; } }

        public void ApplyAmount(decimal amount)
        {
        }

        public void PayAmount()
        {
        }

        public bool LineExpired { get { return ParentRegistration.LineExpired; } }
        public bool LineCartSaveDisabled { get { return ParentRegistration.LineCartSaveDisabled; } }

        public string ToSalesOrderDescription()
        {
            // Option Name {0}, Option Units {1}, Option Rate {2}, Option Fee {3}, Seminar {4}
            return string.Format(Localization.Strings.SemDescOrderLine_Option,
                ParentOption.Name,
                Quantity,
                CostPerItem,
                TotalFee,
                ParentRegistration.ParentSeminar.Name);
        }

		//--- End Custom Code ---
	}
}
