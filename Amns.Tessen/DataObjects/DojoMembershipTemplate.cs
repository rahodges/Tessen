/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	/// <summary>
	/// Provides a template to "print" memberships from.
	/// </summary>
	public class DojoMembershipTemplate : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal DateTime createDate;
		internal DateTime modifyDate;
		internal string name;
		internal string description;
		internal int orderNum;
		internal DojoOrganization organization;
		internal bool isPrimary;
		internal DojoMembershipTemplate rootTemplate;
		internal decimal fee;
		internal decimal startupFee;
		internal int proRateMonthA;
		internal int proRateDayA;
		internal decimal proRateFeeA;
		internal DojoMembershipDayType proRateEndA;
		internal int proRateMonthB;
		internal int proRateDayB;
		internal decimal proRateFeeB;
		internal DojoMembershipDayType proRateEndB;
		internal int proRateMonthC;
		internal int proRateDayC;
		internal decimal proRateFeeC;
		internal DojoMembershipDayType proRateEndC;
		internal TimeSpan prePurchaseTime;
		internal int ageYearsMax;
		internal int ageYearsMin;
		internal int memberForMin;
		internal int memberForMax;
		internal DojoRank rankMin;
		internal DojoRank rankMax;
		internal bool purchaseRequired;
		internal bool testRequired;
		internal bool attendanceRequired;
		internal DojoMembershipDayType membershipStart;
		internal DojoMembershipDayType membershipEnd;
		internal RHItem item;
		internal RHClass itemClass;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoMembershipTemplate Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoMembershipTemplate as a Placeholder. Placeholders only contain 
		/// a DojoMembershipTemplate ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime CreateDate
		{
			get
			{
				EnsurePreLoad();
				return createDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= createDate == value;
				createDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime ModifyDate
		{
			get
			{
				EnsurePreLoad();
				return modifyDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= modifyDate == value;
				modifyDate = value;
			}
		}

		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				EnsurePreLoad();
				return name;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= name == value;
				name = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Description
		{
			get
			{
				EnsurePreLoad();
				return description;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= description == value;
				description = value;
			}
		}

		/// <summary>
		/// </summary>
		public int OrderNum
		{
			get
			{
				EnsurePreLoad();
				return orderNum;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= orderNum == value;
				orderNum = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoOrganization Organization
		{
			get
			{
				EnsurePreLoad();
				return organization;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(organization == null)
					{
						return;
					}
					else
					{
						organization = value;
						isSynced = false;
					}
				}
				else
				{
					if(organization != null && value.ID == organization.ID)
					{
						return; 
					}
					else
					{
						organization = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public bool IsPrimary
		{
			get
			{
				EnsurePreLoad();
				return isPrimary;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isPrimary == value;
				isPrimary = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMembershipTemplate RootTemplate
		{
			get
			{
				EnsurePreLoad();
				return rootTemplate;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(rootTemplate == null)
					{
						return;
					}
					else
					{
						rootTemplate = value;
						isSynced = false;
					}
				}
				else
				{
					if(rootTemplate != null && value.ID == rootTemplate.ID)
					{
						return; 
					}
					else
					{
						rootTemplate = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public decimal Fee
		{
			get
			{
				EnsurePreLoad();
				return fee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= fee == value;
				fee = value;
			}
		}

		/// <summary>
		/// </summary>
		public decimal StartupFee
		{
			get
			{
				EnsurePreLoad();
				return startupFee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= startupFee == value;
				startupFee = value;
			}
		}

		/// <summary>
		/// </summary>
		public int ProRateMonthA
		{
			get
			{
				EnsurePreLoad();
				return proRateMonthA;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= proRateMonthA == value;
				proRateMonthA = value;
			}
		}

		/// <summary>
		/// </summary>
		public int ProRateDayA
		{
			get
			{
				EnsurePreLoad();
				return proRateDayA;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= proRateDayA == value;
				proRateDayA = value;
			}
		}

		/// <summary>
		/// </summary>
		public decimal ProRateFeeA
		{
			get
			{
				EnsurePreLoad();
				return proRateFeeA;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= proRateFeeA == value;
				proRateFeeA = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMembershipDayType ProRateEndA
		{
			get
			{
				EnsurePreLoad();
				return proRateEndA;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= proRateEndA == value;
				proRateEndA = value;
			}
		}

		/// <summary>
		/// </summary>
		public int ProRateMonthB
		{
			get
			{
				EnsurePreLoad();
				return proRateMonthB;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= proRateMonthB == value;
				proRateMonthB = value;
			}
		}

		/// <summary>
		/// </summary>
		public int ProRateDayB
		{
			get
			{
				EnsurePreLoad();
				return proRateDayB;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= proRateDayB == value;
				proRateDayB = value;
			}
		}

		/// <summary>
		/// </summary>
		public decimal ProRateFeeB
		{
			get
			{
				EnsurePreLoad();
				return proRateFeeB;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= proRateFeeB == value;
				proRateFeeB = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMembershipDayType ProRateEndB
		{
			get
			{
				EnsurePreLoad();
				return proRateEndB;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= proRateEndB == value;
				proRateEndB = value;
			}
		}

		/// <summary>
		/// </summary>
		public int ProRateMonthC
		{
			get
			{
				EnsurePreLoad();
				return proRateMonthC;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= proRateMonthC == value;
				proRateMonthC = value;
			}
		}

		/// <summary>
		/// </summary>
		public int ProRateDayC
		{
			get
			{
				EnsurePreLoad();
				return proRateDayC;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= proRateDayC == value;
				proRateDayC = value;
			}
		}

		/// <summary>
		/// </summary>
		public decimal ProRateFeeC
		{
			get
			{
				EnsurePreLoad();
				return proRateFeeC;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= proRateFeeC == value;
				proRateFeeC = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMembershipDayType ProRateEndC
		{
			get
			{
				EnsurePreLoad();
				return proRateEndC;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= proRateEndC == value;
				proRateEndC = value;
			}
		}

		/// <summary>
		/// </summary>
		public TimeSpan PrePurchaseTime
		{
			get
			{
				EnsurePreLoad();
				return prePurchaseTime;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= prePurchaseTime == value;
				prePurchaseTime = value;
			}
		}

		/// <summary>
		/// </summary>
		public int AgeYearsMax
		{
			get
			{
				EnsurePreLoad();
				return ageYearsMax;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= ageYearsMax == value;
				ageYearsMax = value;
			}
		}

		/// <summary>
		/// This is used for children and senior requirements.
		/// </summary>
		public int AgeYearsMin
		{
			get
			{
				EnsurePreLoad();
				return ageYearsMin;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= ageYearsMin == value;
				ageYearsMin = value;
			}
		}

		/// <summary>
		/// </summary>
		public int MemberForMin
		{
			get
			{
				EnsurePreLoad();
				return memberForMin;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= memberForMin == value;
				memberForMin = value;
			}
		}

		/// <summary>
		/// </summary>
		public int MemberForMax
		{
			get
			{
				EnsurePreLoad();
				return memberForMax;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= memberForMax == value;
				memberForMax = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoRank RankMin
		{
			get
			{
				EnsurePreLoad();
				return rankMin;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(rankMin == null)
					{
						return;
					}
					else
					{
						rankMin = value;
						isSynced = false;
					}
				}
				else
				{
					if(rankMin != null && value.ID == rankMin.ID)
					{
						return; 
					}
					else
					{
						rankMin = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoRank RankMax
		{
			get
			{
				EnsurePreLoad();
				return rankMax;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(rankMax == null)
					{
						return;
					}
					else
					{
						rankMax = value;
						isSynced = false;
					}
				}
				else
				{
					if(rankMax != null && value.ID == rankMax.ID)
					{
						return; 
					}
					else
					{
						rankMax = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public bool PurchaseRequired
		{
			get
			{
				EnsurePreLoad();
				return purchaseRequired;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= purchaseRequired == value;
				purchaseRequired = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool TestRequired
		{
			get
			{
				EnsurePreLoad();
				return testRequired;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= testRequired == value;
				testRequired = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool AttendanceRequired
		{
			get
			{
				EnsurePreLoad();
				return attendanceRequired;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= attendanceRequired == value;
				attendanceRequired = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMembershipDayType MembershipStart
		{
			get
			{
				EnsurePreLoad();
				return membershipStart;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= membershipStart == value;
				membershipStart = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMembershipDayType MembershipEnd
		{
			get
			{
				EnsurePreLoad();
				return membershipEnd;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= membershipEnd == value;
				membershipEnd = value;
			}
		}

		/// <summary>
		/// </summary>
		public RHItem Item
		{
			get
			{
				EnsurePreLoad();
				return item;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(item == null)
					{
						return;
					}
					else
					{
						item = value;
						isSynced = false;
					}
				}
				else
				{
					if(item != null && value.ID == item.ID)
					{
						return; 
					}
					else
					{
						item = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public RHClass ItemClass
		{
			get
			{
				EnsurePreLoad();
				return itemClass;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(itemClass == null)
					{
						return;
					}
					else
					{
						itemClass = value;
						isSynced = false;
					}
				}
				else
				{
					if(itemClass != null && value.ID == itemClass.ID)
					{
						return; 
					}
					else
					{
						itemClass = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoMembershipTemplate.
		/// </summary>
		public DojoMembershipTemplate()
		{
			createDate = DateTime.Now;
			modifyDate = DateTime.Now;
			name = string.Empty;
			description = string.Empty;
		}

		public DojoMembershipTemplate(int id)
		{
			this.iD = id;
			isSynced = DojoMembershipTemplateManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoMembershipTemplateManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoMembershipTemplate object state to the database.
		/// </summary>
		public int Save()
		{

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoMembershipTemplateManager._insert(this);
			else
				DojoMembershipTemplateManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoMembershipTemplateManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoMembershipTemplate object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoMembershipTemplate object reflecting the replicated DojoMembershipTemplate object.</returns>
		public DojoMembershipTemplate Duplicate()
		{
			DojoMembershipTemplate clonedDojoMembershipTemplate = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoMembershipTemplate.iD = DojoMembershipTemplateManager._insert(clonedDojoMembershipTemplate);
			clonedDojoMembershipTemplate.isSynced = true;
			return clonedDojoMembershipTemplate;
		}

		/// <summary>
		/// Overwrites and existing DojoMembershipTemplate object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoMembershipTemplateManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoMembershipTemplate object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoMembershipTemplate object reflecting the replicated DojoMembershipTemplate object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoMembershipTemplate object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoMembershipTemplate object reflecting the replicated DojoMembershipTemplate object.</returns>
		public DojoMembershipTemplate Clone()
		{
			DojoMembershipTemplate clonedDojoMembershipTemplate = new DojoMembershipTemplate();
			clonedDojoMembershipTemplate.iD = iD;
			clonedDojoMembershipTemplate.isSynced = isSynced;
			clonedDojoMembershipTemplate.createDate = createDate;
			clonedDojoMembershipTemplate.modifyDate = modifyDate;
			clonedDojoMembershipTemplate.name = name;
			clonedDojoMembershipTemplate.description = description;
			clonedDojoMembershipTemplate.orderNum = orderNum;
			clonedDojoMembershipTemplate.isPrimary = isPrimary;
			clonedDojoMembershipTemplate.fee = fee;
			clonedDojoMembershipTemplate.startupFee = startupFee;
			clonedDojoMembershipTemplate.proRateMonthA = proRateMonthA;
			clonedDojoMembershipTemplate.proRateDayA = proRateDayA;
			clonedDojoMembershipTemplate.proRateFeeA = proRateFeeA;
			clonedDojoMembershipTemplate.proRateMonthB = proRateMonthB;
			clonedDojoMembershipTemplate.proRateDayB = proRateDayB;
			clonedDojoMembershipTemplate.proRateFeeB = proRateFeeB;
			clonedDojoMembershipTemplate.proRateMonthC = proRateMonthC;
			clonedDojoMembershipTemplate.proRateDayC = proRateDayC;
			clonedDojoMembershipTemplate.proRateFeeC = proRateFeeC;
			clonedDojoMembershipTemplate.prePurchaseTime = prePurchaseTime;
			clonedDojoMembershipTemplate.ageYearsMax = ageYearsMax;
			clonedDojoMembershipTemplate.ageYearsMin = ageYearsMin;
			clonedDojoMembershipTemplate.memberForMin = memberForMin;
			clonedDojoMembershipTemplate.memberForMax = memberForMax;
			clonedDojoMembershipTemplate.purchaseRequired = purchaseRequired;
			clonedDojoMembershipTemplate.testRequired = testRequired;
			clonedDojoMembershipTemplate.attendanceRequired = attendanceRequired;

			clonedDojoMembershipTemplate.proRateEndA = proRateEndA;
			clonedDojoMembershipTemplate.proRateEndB = proRateEndB;
			clonedDojoMembershipTemplate.proRateEndC = proRateEndC;
			clonedDojoMembershipTemplate.membershipStart = membershipStart;
			clonedDojoMembershipTemplate.membershipEnd = membershipEnd;

			if(organization != null)
				clonedDojoMembershipTemplate.organization = organization;

			if(rootTemplate != null)
				clonedDojoMembershipTemplate.rootTemplate = rootTemplate;

			if(rankMin != null)
				clonedDojoMembershipTemplate.rankMin = rankMin;

			if(rankMax != null)
				clonedDojoMembershipTemplate.rankMax = rankMax;

			if(item != null)
				clonedDojoMembershipTemplate.item = item;

			if(itemClass != null)
				clonedDojoMembershipTemplate.itemClass = itemClass;

			return clonedDojoMembershipTemplate;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoMembershipTemplate.
		/// </summary>
		/// <returns> A new DojoMembershipTemplate object reflecting the cloned DojoMembershipTemplate object.</returns>
		public DojoMembershipTemplate Copy()
		{
			DojoMembershipTemplate dojoMembershipTemplate = new DojoMembershipTemplate();
			CopyTo(dojoMembershipTemplate);
			return dojoMembershipTemplate;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoMembershipTemplate.
		/// </summary>
		/// <returns> A new DojoMembershipTemplate object reflecting the cloned DojoMembershipTemplate object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoMembershipTemplate from its children.</param>
		public DojoMembershipTemplate Copy(bool isolation)
		{
			DojoMembershipTemplate dojoMembershipTemplate = new DojoMembershipTemplate();
			CopyTo(dojoMembershipTemplate, isolation);
			return dojoMembershipTemplate;
		}

		/// <summary>
		/// Deep copies the current DojoMembershipTemplate to another instance of DojoMembershipTemplate.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoMembershipTemplate">The DojoMembershipTemplate to copy to.</param>
		public void CopyTo(DojoMembershipTemplate dojoMembershipTemplate)
		{
			CopyTo(dojoMembershipTemplate, false);
		}

		/// <summary>
		/// Deep copies the current DojoMembershipTemplate to another instance of DojoMembershipTemplate.
		/// </summary>
		/// <param name="DojoMembershipTemplate">The DojoMembershipTemplate to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoMembershipTemplate from its children.</param>
		public void CopyTo(DojoMembershipTemplate dojoMembershipTemplate, bool isolation)
		{
			dojoMembershipTemplate.iD = iD;
			dojoMembershipTemplate.isPlaceHolder = isPlaceHolder;
			dojoMembershipTemplate.isSynced = isSynced;
			dojoMembershipTemplate.createDate = createDate;
			dojoMembershipTemplate.modifyDate = modifyDate;
			dojoMembershipTemplate.name = name;
			dojoMembershipTemplate.description = description;
			dojoMembershipTemplate.orderNum = orderNum;
			if(organization != null)
			{
				if(isolation)
				{
					dojoMembershipTemplate.organization = organization.NewPlaceHolder();
				}
				else
				{
					dojoMembershipTemplate.organization = organization.Copy(false);
				}
			}
			dojoMembershipTemplate.isPrimary = isPrimary;
			if(rootTemplate != null)
			{
				if(isolation)
				{
					dojoMembershipTemplate.rootTemplate = rootTemplate.NewPlaceHolder();
				}
				else
				{
					dojoMembershipTemplate.rootTemplate = rootTemplate.Copy(false);
				}
			}
			dojoMembershipTemplate.fee = fee;
			dojoMembershipTemplate.startupFee = startupFee;
			dojoMembershipTemplate.proRateMonthA = proRateMonthA;
			dojoMembershipTemplate.proRateDayA = proRateDayA;
			dojoMembershipTemplate.proRateFeeA = proRateFeeA;
			dojoMembershipTemplate.proRateEndA = proRateEndA;
			dojoMembershipTemplate.proRateMonthB = proRateMonthB;
			dojoMembershipTemplate.proRateDayB = proRateDayB;
			dojoMembershipTemplate.proRateFeeB = proRateFeeB;
			dojoMembershipTemplate.proRateEndB = proRateEndB;
			dojoMembershipTemplate.proRateMonthC = proRateMonthC;
			dojoMembershipTemplate.proRateDayC = proRateDayC;
			dojoMembershipTemplate.proRateFeeC = proRateFeeC;
			dojoMembershipTemplate.proRateEndC = proRateEndC;
			dojoMembershipTemplate.prePurchaseTime = prePurchaseTime;
			dojoMembershipTemplate.ageYearsMax = ageYearsMax;
			dojoMembershipTemplate.ageYearsMin = ageYearsMin;
			dojoMembershipTemplate.memberForMin = memberForMin;
			dojoMembershipTemplate.memberForMax = memberForMax;
			if(rankMin != null)
			{
				if(isolation)
				{
					dojoMembershipTemplate.rankMin = rankMin.NewPlaceHolder();
				}
				else
				{
					dojoMembershipTemplate.rankMin = rankMin.Copy(false);
				}
			}
			if(rankMax != null)
			{
				if(isolation)
				{
					dojoMembershipTemplate.rankMax = rankMax.NewPlaceHolder();
				}
				else
				{
					dojoMembershipTemplate.rankMax = rankMax.Copy(false);
				}
			}
			dojoMembershipTemplate.purchaseRequired = purchaseRequired;
			dojoMembershipTemplate.testRequired = testRequired;
			dojoMembershipTemplate.attendanceRequired = attendanceRequired;
			dojoMembershipTemplate.membershipStart = membershipStart;
			dojoMembershipTemplate.membershipEnd = membershipEnd;
			if(item != null)
			{
				if(isolation)
				{
					dojoMembershipTemplate.item = item.NewPlaceHolder();
				}
				else
				{
					dojoMembershipTemplate.item = item.Copy(false);
				}
			}
			if(itemClass != null)
			{
				if(isolation)
				{
					dojoMembershipTemplate.itemClass = itemClass.NewPlaceHolder();
				}
				else
				{
					dojoMembershipTemplate.itemClass = itemClass.Copy(false);
				}
			}
		}

		public DojoMembershipTemplate NewPlaceHolder()
		{
			DojoMembershipTemplate dojoMembershipTemplate = new DojoMembershipTemplate();
			dojoMembershipTemplate.iD = iD;
			dojoMembershipTemplate.isPlaceHolder = true;
			dojoMembershipTemplate.isSynced = true;
			return dojoMembershipTemplate;
		}

		public static DojoMembershipTemplate NewPlaceHolder(int iD)
		{
			DojoMembershipTemplate dojoMembershipTemplate = new DojoMembershipTemplate();
			dojoMembershipTemplate.iD = iD;
			dojoMembershipTemplate.isPlaceHolder = true;
			dojoMembershipTemplate.isSynced = true;
			return dojoMembershipTemplate;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoMembershipTemplate dojoMembershipTemplate = (DojoMembershipTemplate) obj;
			return this.iD - dojoMembershipTemplate.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoMembershipTemplate dojoMembershipTemplate)
		{
			return this.iD - dojoMembershipTemplate.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---



		//--- End Custom Code ---
	}
}
