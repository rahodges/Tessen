/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using Amns.GreyFox.People;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	/// <summary>
	/// Seminar
	/// </summary>
	public class DojoSeminar : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal string name;
		internal DateTime startDate;
		internal DateTime endDate;
		internal string description;
		internal bool isLocal;
		internal GreyFoxContact location;
		internal decimal classUnitFee;
		internal DojoSeminarClassUnitType classUnitType;
		internal decimal baseRegistrationFee;
		internal bool registrationEnabled;
		internal DateTime registrationStart;
		internal decimal fullEarlyRegistrationFee;
		internal DateTime earlyEndDate;
		internal decimal fullRegistrationFee;
		internal DateTime lateStartDate;
		internal decimal fullLateRegistrationFee;
		internal DateTime registrationEnd;
		internal DojoSeminarOptionCollection options;
		internal string details;
		internal string detailsOverrideUrl;
		internal string pdfUrl;
		internal RHItem item;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoSeminar Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoSeminar as a Placeholder. Placeholders only contain 
		/// a DojoSeminar ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// Name of the seminar.
		/// </summary>
		public string Name
		{
			get
			{
				EnsurePreLoad();
				return name;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= name == value;
				name = value;
			}
		}

		/// <summary>
		/// The date of the first day of the seminar, be sure to have the correct 
		/// time if necissary.
		/// </summary>
		public DateTime StartDate
		{
			get
			{
				EnsurePreLoad();
				return startDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= startDate == value;
				startDate = value;
			}
		}

		/// <summary>
		/// The last date of the seminar. Be sure to have the correct time if necissary.
		/// </summary>
		public DateTime EndDate
		{
			get
			{
				EnsurePreLoad();
				return endDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= endDate == value;
				endDate = value;
			}
		}

		/// <summary>
		/// Description of the seminar. Used for quick descriptions on seminar grids.
		/// </summary>
		public string Description
		{
			get
			{
				EnsurePreLoad();
				return description;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= description == value;
				description = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool IsLocal
		{
			get
			{
				EnsurePreLoad();
				return isLocal;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isLocal == value;
				isLocal = value;
			}
		}

		/// <summary>
		/// </summary>
		public GreyFoxContact Location
		{
			get
			{
				EnsurePreLoad();
				return location;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(location == null)
					{
						return;
					}
					else
					{
						location = value;
						isSynced = false;
					}
				}
				else
				{
					if(value.TableName != "kitTessen_Locations") throw(new Exception("Cannot set Location. Table names mismatched."));
					if(location != null && value.ID == location.ID)
					{
						return; 
					}
					else
					{
						location = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// Fee per class unit.
		/// </summary>
		public decimal ClassUnitFee
		{
			get
			{
				EnsurePreLoad();
				return classUnitFee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= classUnitFee == value;
				classUnitFee = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoSeminarClassUnitType ClassUnitType
		{
			get
			{
				EnsurePreLoad();
				return classUnitType;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= classUnitType == value;
				classUnitType = value;
			}
		}

		/// <summary>
		/// Base registration fee for entire seminar.
		/// </summary>
		public decimal BaseRegistrationFee
		{
			get
			{
				EnsurePreLoad();
				return baseRegistrationFee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= baseRegistrationFee == value;
				baseRegistrationFee = value;
			}
		}

		/// <summary>
		/// Enables online registration.
		/// </summary>
		public bool RegistrationEnabled
		{
			get
			{
				EnsurePreLoad();
				return registrationEnabled;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= registrationEnabled == value;
				registrationEnabled = value;
			}
		}

		/// <summary>
		/// The first date to allow online registration.
		/// </summary>
		public DateTime RegistrationStart
		{
			get
			{
				EnsurePreLoad();
				return registrationStart;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= registrationStart == value;
				registrationStart = value;
			}
		}

		/// <summary>
		/// </summary>
		public decimal FullEarlyRegistrationFee
		{
			get
			{
				EnsurePreLoad();
				return fullEarlyRegistrationFee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= fullEarlyRegistrationFee == value;
				fullEarlyRegistrationFee = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime EarlyEndDate
		{
			get
			{
				EnsurePreLoad();
				return earlyEndDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= earlyEndDate == value;
				earlyEndDate = value;
			}
		}

		/// <summary>
		/// Full registration fee for entire seminar with specific options, etc. 
		/// Allows discounts on full registrations. Full registrations are registrations 
		/// with all days or classes, not including options.
		/// </summary>
		public decimal FullRegistrationFee
		{
			get
			{
				EnsurePreLoad();
				return fullRegistrationFee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= fullRegistrationFee == value;
				fullRegistrationFee = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime LateStartDate
		{
			get
			{
				EnsurePreLoad();
				return lateStartDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= lateStartDate == value;
				lateStartDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public decimal FullLateRegistrationFee
		{
			get
			{
				EnsurePreLoad();
				return fullLateRegistrationFee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= fullLateRegistrationFee == value;
				fullLateRegistrationFee = value;
			}
		}

		/// <summary>
		/// The last date to allow online registration.
		/// </summary>
		public DateTime RegistrationEnd
		{
			get
			{
				EnsurePreLoad();
				return registrationEnd;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= registrationEnd == value;
				registrationEnd = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoSeminarOptionCollection Options
		{
			get
			{
				EnsurePreLoad();
				if(options == null)
				{
					DojoSeminarManager.FillOptions(this);
					options.CollectionChanged += new System.EventHandler(childrenCollection_Changed);
				}
				return options;
			}
			set
			{
				EnsurePreLoad();
				if(!object.Equals(options, value))
				{
					if(value == null)
						Options = new DojoSeminarOptionCollection();
					else
						options = value;
					options.CollectionChanged += new System.EventHandler(childrenCollection_Changed);
					isSynced = false;
				}
			}
		}

		/// <summary>
		/// Seminar details to display in seminar panels.
		/// </summary>
		public string Details
		{
			get
			{
				EnsurePreLoad();
				return details;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= details == value;
				details = value;
			}
		}

		/// <summary>
		/// Overrides the details in the database with a file.
		/// </summary>
		public string DetailsOverrideUrl
		{
			get
			{
				EnsurePreLoad();
				return detailsOverrideUrl;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= detailsOverrideUrl == value;
				detailsOverrideUrl = value;
			}
		}

		/// <summary>
		/// URL/UNC of PDF location for seminar flyer and/or registration forms.
		/// </summary>
		public string PdfUrl
		{
			get
			{
				EnsurePreLoad();
				return pdfUrl;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= pdfUrl == value;
				pdfUrl = value;
			}
		}

		/// <summary>
		/// </summary>
		public RHItem Item
		{
			get
			{
				EnsurePreLoad();
				return item;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(item == null)
					{
						return;
					}
					else
					{
						item = value;
						isSynced = false;
					}
				}
				else
				{
					if(item != null && value.ID == item.ID)
					{
						return; 
					}
					else
					{
						item = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoSeminar.
		/// </summary>
		public DojoSeminar()
		{
		}

		public DojoSeminar(int id)
		{
			this.iD = id;
			isSynced = DojoSeminarManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoSeminarManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoSeminar object state to the database.
		/// </summary>
		public int Save()
		{
			if(location != null)
				location.Save();
			if(options != null)
				foreach(DojoSeminarOption item in options)
					item.Save();

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoSeminarManager._insert(this);
			else
				DojoSeminarManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoSeminarManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoSeminar object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoSeminar object reflecting the replicated DojoSeminar object.</returns>
		public DojoSeminar Duplicate()
		{
			DojoSeminar clonedDojoSeminar = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoSeminar.iD = DojoSeminarManager._insert(clonedDojoSeminar);
			clonedDojoSeminar.isSynced = true;
			return clonedDojoSeminar;
		}

		/// <summary>
		/// Overwrites and existing DojoSeminar object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoSeminarManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoSeminar object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoSeminar object reflecting the replicated DojoSeminar object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoSeminar object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoSeminar object reflecting the replicated DojoSeminar object.</returns>
		public DojoSeminar Clone()
		{
			DojoSeminar clonedDojoSeminar = new DojoSeminar();
			clonedDojoSeminar.iD = iD;
			clonedDojoSeminar.isSynced = isSynced;
			clonedDojoSeminar.name = name;
			clonedDojoSeminar.startDate = startDate;
			clonedDojoSeminar.endDate = endDate;
			clonedDojoSeminar.description = description;
			clonedDojoSeminar.isLocal = isLocal;
			clonedDojoSeminar.classUnitFee = classUnitFee;
			clonedDojoSeminar.baseRegistrationFee = baseRegistrationFee;
			clonedDojoSeminar.registrationEnabled = registrationEnabled;
			clonedDojoSeminar.registrationStart = registrationStart;
			clonedDojoSeminar.fullEarlyRegistrationFee = fullEarlyRegistrationFee;
			clonedDojoSeminar.earlyEndDate = earlyEndDate;
			clonedDojoSeminar.fullRegistrationFee = fullRegistrationFee;
			clonedDojoSeminar.lateStartDate = lateStartDate;
			clonedDojoSeminar.fullLateRegistrationFee = fullLateRegistrationFee;
			clonedDojoSeminar.registrationEnd = registrationEnd;
			clonedDojoSeminar.details = details;
			clonedDojoSeminar.detailsOverrideUrl = detailsOverrideUrl;
			clonedDojoSeminar.pdfUrl = pdfUrl;

			clonedDojoSeminar.classUnitType = classUnitType;

			if(location != null)
				clonedDojoSeminar.location = location;

			if(options != null)
				clonedDojoSeminar.options = options.Clone();

			if(item != null)
				clonedDojoSeminar.item = item;

			return clonedDojoSeminar;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoSeminar.
		/// </summary>
		/// <returns> A new DojoSeminar object reflecting the cloned DojoSeminar object.</returns>
		public DojoSeminar Copy()
		{
			DojoSeminar dojoSeminar = new DojoSeminar();
			CopyTo(dojoSeminar);
			return dojoSeminar;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoSeminar.
		/// </summary>
		/// <returns> A new DojoSeminar object reflecting the cloned DojoSeminar object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoSeminar from its children.</param>
		public DojoSeminar Copy(bool isolation)
		{
			DojoSeminar dojoSeminar = new DojoSeminar();
			CopyTo(dojoSeminar, isolation);
			return dojoSeminar;
		}

		/// <summary>
		/// Deep copies the current DojoSeminar to another instance of DojoSeminar.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoSeminar">The DojoSeminar to copy to.</param>
		public void CopyTo(DojoSeminar dojoSeminar)
		{
			CopyTo(dojoSeminar, false);
		}

		/// <summary>
		/// Deep copies the current DojoSeminar to another instance of DojoSeminar.
		/// </summary>
		/// <param name="DojoSeminar">The DojoSeminar to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoSeminar from its children.</param>
		public void CopyTo(DojoSeminar dojoSeminar, bool isolation)
		{
			dojoSeminar.iD = iD;
			dojoSeminar.isPlaceHolder = isPlaceHolder;
			dojoSeminar.isSynced = isSynced;
			dojoSeminar.name = name;
			dojoSeminar.startDate = startDate;
			dojoSeminar.endDate = endDate;
			dojoSeminar.description = description;
			dojoSeminar.isLocal = isLocal;
			if(location != null)
			{
				if(isolation)
				{
					dojoSeminar.location = location.NewPlaceHolder();
				}
				else
				{
					dojoSeminar.location = location.Copy(false);
				}
			}
			dojoSeminar.classUnitFee = classUnitFee;
			dojoSeminar.classUnitType = classUnitType;
			dojoSeminar.baseRegistrationFee = baseRegistrationFee;
			dojoSeminar.registrationEnabled = registrationEnabled;
			dojoSeminar.registrationStart = registrationStart;
			dojoSeminar.fullEarlyRegistrationFee = fullEarlyRegistrationFee;
			dojoSeminar.earlyEndDate = earlyEndDate;
			dojoSeminar.fullRegistrationFee = fullRegistrationFee;
			dojoSeminar.lateStartDate = lateStartDate;
			dojoSeminar.fullLateRegistrationFee = fullLateRegistrationFee;
			dojoSeminar.registrationEnd = registrationEnd;
			if(options != null)
			{
				if(isolation)
				{
					dojoSeminar.options = options.Copy(true);
				}
				else
				{
					dojoSeminar.options = options.Copy(false);
				}
			}
			dojoSeminar.details = details;
			dojoSeminar.detailsOverrideUrl = detailsOverrideUrl;
			dojoSeminar.pdfUrl = pdfUrl;
			if(item != null)
			{
				if(isolation)
				{
					dojoSeminar.item = item.NewPlaceHolder();
				}
				else
				{
					dojoSeminar.item = item.Copy(false);
				}
			}
		}

		public DojoSeminar NewPlaceHolder()
		{
			DojoSeminar dojoSeminar = new DojoSeminar();
			dojoSeminar.iD = iD;
			dojoSeminar.isPlaceHolder = true;
			dojoSeminar.isSynced = true;
			return dojoSeminar;
		}

		public static DojoSeminar NewPlaceHolder(int iD)
		{
			DojoSeminar dojoSeminar = new DojoSeminar();
			dojoSeminar.iD = iD;
			dojoSeminar.isPlaceHolder = true;
			dojoSeminar.isSynced = true;
			return dojoSeminar;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoSeminar dojoSeminar = (DojoSeminar) obj;
			return this.iD - dojoSeminar.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoSeminar dojoSeminar)
		{
			return this.iD - dojoSeminar.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---
													
		private DojoClassCollection classes;
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																								
		public int ClassCount
		{
			get
			{
				if(classes == null)
				{
					classes = new DojoClassManager().GetCollection("ParentSeminarID=" + this.ID.ToString(),
						string.Empty, null);
				}

				return classes.Count;
			}
		}

		public DojoSeminarRegistration NewRegistration(DateTime registrationDate, 
			GreyFoxContact contact,
			int classUnits, DojoSeminarRegistrationOptionCollection options)
		{
			DojoSeminarRegistration r = new DojoSeminarRegistration();
			r.isSynced = false;
			r.isPlaceHolder = false;
			r.contact = contact;
			r.classUnits = classUnits;

			//
			// Calculate base registration calcSeminarFee and detect full registrations.
			//
            switch (ClassUnitType)
            {
                case DojoSeminarClassUnitType.Day:
                    TimeSpan span = endDate.Subtract(startDate);
                    if (classUnits == span.Days)
                        r.totalFee = fullRegistrationFee;
                    else
                        r.totalFee = baseRegistrationFee + (classUnitFee * classUnits);
                    break;
                case DojoSeminarClassUnitType.Class:
                    if (classUnits == ClassCount)
                        r.totalFee = fullRegistrationFee;
                    else
                        r.totalFee = baseRegistrationFee + (classUnitFee * classUnits);
                    break;
                case DojoSeminarClassUnitType.None:
                    if (classUnits == ClassCount)
                        r.totalFee = fullRegistrationFee;
                    else
                        r.totalFee = baseRegistrationFee + (classUnitFee * classUnits);
                    break;
            }
			
			//
			// Add up lineOption fees and set lineOption parent seminar.
			//
			for(int x = 0; x <= options.Count; x++)
			{
				options[x].parentRegistration = r;
				r.totalFee += options[x].totalFee;
			}
			
			return r;
		}

		public string ConstructDateLongString()
		{
			if(startDate.Year == endDate.Year)
			{
				if(startDate.Month == endDate.Month)
				{
					return startDate.ToString("dddd, MMMM d") +
						" - " +
						endDate.ToString("dddd, MMMM d yyyy");
				}
				else
				{
					return startDate.ToString("dddd, MMMM d") +
						" - " +
						endDate.ToString("dddd, MMMM d yyyy");
				}
			}
			else
			{
				return startDate.ToString("dddd, MMMM d yyyy") +
					" - " +
					endDate.ToString("dddd, MMMM d yyyy");
			}
		}

		//--- End Custom Code ---
	}
}
