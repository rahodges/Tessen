/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.People;
using Amns.GreyFox.Security;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoMembershipFlags : int { Member,
				MemberPrivateContact,
				MemberEmergencyContact,
				MemberPublicContact,
				MemberParent,
				MemberRoot,
				MemberMemberType,
				MemberMemberTypeTemplate,
				MemberMembership1,
				MemberMembership2,
				MemberMembership3,
				MemberMembership4,
				MemberMembership5,
				MemberInstructor1,
				MemberInstructor2,
				MemberInstructor3,
				MemberPromotionFlags,
				MemberRank,
				MemberUserAccount,
				MemberCustomer,
				Organization,
				OrganizationLocation,
				OrganizationClassLocations,
				OrganizationAdministrativeContact,
				OrganizationDefaultMemberType,
				Parent,
				ParentMember,
				ParentOrganization,
				ParentParent,
				ParentMemberTypeTemplate,
				ParentMembershipTemplate,
				ParentPriorMembership,
				ParentInvoiceLine,
				MemberTypeTemplate,
				MemberTypeTemplateMemberType,
				MemberTypeTemplateParent,
				MemberTypeTemplateRoot,
				MemberTypeTemplateInitialRank,
				MemberTypeTemplateInitialRole,
				MemberTypeTemplateRankMin,
				MemberTypeTemplateRankMax,
				MemberTypeTemplateMembershipTemplate1,
				MemberTypeTemplateMembershipTemplate2,
				MemberTypeTemplateMembershipTemplate3,
				MemberTypeTemplateMembershipTemplate4,
				MemberTypeTemplateMembershipTemplate5,
				MembershipTemplate,
				MembershipTemplateOrganization,
				MembershipTemplateRootTemplate,
				MembershipTemplateRankMin,
				MembershipTemplateRankMax,
				MembershipTemplateItem,
				MembershipTemplateItemClass,
				PriorMembership,
				PriorMembershipMember,
				PriorMembershipOrganization,
				PriorMembershipParent,
				PriorMembershipMemberTypeTemplate,
				PriorMembershipMembershipTemplate,
				PriorMembershipPriorMembership,
				PriorMembershipInvoiceLine,
				InvoiceLine,
				InvoiceLineInvoice,
				InvoiceLineItem,
				InvoiceLineClass,
				InvoiceLineTax};

	#endregion

	/// <summary>
	/// Datamanager for DojoMembership objects.
	/// </summary>
	public class DojoMembershipManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_Memberships";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoMembershipID",
			"MemberID",
			"StartDate",
			"EndDate",
			"OrganizationID",
			"OrganizationMemberID",
			"ParentID",
			"MemberTypeTemplateID",
			"MembershipTemplateID",
			"SessionID",
			"Fee",
			"PriorMembershipID",
			"PaymentAmount",
			"IsProRated",
			"CreateDate",
			"ModifyDate",
			"InvoiceLineID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoMembershipID", "LONG", "-1" },
			{ "MemberID", "LONG", "null" },
			{ "StartDate", "DATETIME", "" },
			{ "EndDate", "DATETIME", "" },
			{ "OrganizationID", "LONG", "null" },
			{ "OrganizationMemberID", "TEXT(75)", "" },
			{ "ParentID", "LONG", "null" },
			{ "MemberTypeTemplateID", "LONG", "null" },
			{ "MembershipTemplateID", "LONG", "null" },
			{ "SessionID", "TEXT(75)", "string.Empty" },
			{ "Fee", "CURRENCY", "" },
			{ "PriorMembershipID", "LONG", "null" },
			{ "PaymentAmount", "CURRENCY", "" },
			{ "IsProRated", "BIT", "" },
			{ "CreateDate", "DATETIME", "DateTime.Now" },
			{ "ModifyDate", "DATETIME", "DateTime.Now" },
			{ "InvoiceLineID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoMembershipManager()
		{
		}

		public DojoMembershipManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoMembershipManager.isInitialized)
			{
				DojoMembershipManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoMembership into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoMembership">The DojoMembership to insert into the database.</param>
		internal static int _insert(DojoMembership dojoMembership)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			// Set Create Date to Now
			dojoMembership.CreateDate = DateTime.Now.ToUniversalTime();

			// Set Modify Date to Now
			dojoMembership.ModifyDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_Memberships " +
				"(" +
				"MemberID," +
				"StartDate," +
				"EndDate," +
				"OrganizationID," +
				"OrganizationMemberID," +
				"ParentID," +
				"MemberTypeTemplateID," +
				"MembershipTemplateID," +
				"SessionID," +
				"Fee," +
				"PriorMembershipID," +
				"PaymentAmount," +
				"IsProRated," +
				"CreateDate," +
				"ModifyDate," +
				"InvoiceLineID) VALUES (" +
				"@MemberID," +
				"@StartDate," +
				"@EndDate," +
				"@OrganizationID," +
				"@OrganizationMemberID," +
				"@ParentID," +
				"@MemberTypeTemplateID," +
				"@MembershipTemplateID," +
				"@SessionID," +
				"@Fee," +
				"@PriorMembershipID," +
				"@PaymentAmount," +
				"@IsProRated," +
				"@CreateDate," +
				"@ModifyDate," +
				"@InvoiceLineID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoMembership);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoMembership);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoMembership in cache.
			if(cacheEnabled) cacheStore(dojoMembership);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoMembership dojoMembership)
		{
			Database database;
			DbCommand dbCommand;

			// Set Modify Date to Now
			dojoMembership.ModifyDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_Memberships SET MemberID=@MemberID," +
				"StartDate=@StartDate," +
				"EndDate=@EndDate," +
				"OrganizationID=@OrganizationID," +
				"OrganizationMemberID=@OrganizationMemberID," +
				"ParentID=@ParentID," +
				"MemberTypeTemplateID=@MemberTypeTemplateID," +
				"MembershipTemplateID=@MembershipTemplateID," +
				"SessionID=@SessionID," +
				"Fee=@Fee," +
				"PriorMembershipID=@PriorMembershipID," +
				"PaymentAmount=@PaymentAmount," +
				"IsProRated=@IsProRated," +
				"CreateDate=@CreateDate," +
				"ModifyDate=@ModifyDate," +
				"InvoiceLineID=@InvoiceLineID WHERE DojoMembershipID=@DojoMembershipID;");

			fillParameters(database, dbCommand, dojoMembership);
			database.AddInParameter(dbCommand, "DojoMembershipID", DbType.Int32, dojoMembership.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoMembership in cache.
			if (cacheEnabled) cacheStore(dojoMembership);

			return dojoMembership.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoMembership dojoMembership)
		{
			#region General

			if(dojoMembership.member == null)
			{
				addParameter(database, dbCommand, "@MemberID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MemberID", DbType.Int32, dojoMembership.member.ID);
			}
			addParameter(database, dbCommand, "@StartDate", DbType.Date, dojoMembership.startDate);
			addParameter(database, dbCommand, "@EndDate", DbType.Date, dojoMembership.endDate);
			if(dojoMembership.organization == null)
			{
				addParameter(database, dbCommand, "@OrganizationID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@OrganizationID", DbType.Int32, dojoMembership.organization.ID);
			}
			addParameter(database, dbCommand, "@OrganizationMemberID", DbType.String, dojoMembership.organizationMemberID);
			if(dojoMembership.parent == null)
			{
				addParameter(database, dbCommand, "@ParentID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ParentID", DbType.Int32, dojoMembership.parent.ID);
			}
			if(dojoMembership.memberTypeTemplate == null)
			{
				addParameter(database, dbCommand, "@MemberTypeTemplateID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MemberTypeTemplateID", DbType.Int32, dojoMembership.memberTypeTemplate.ID);
			}
			if(dojoMembership.membershipTemplate == null)
			{
				addParameter(database, dbCommand, "@MembershipTemplateID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MembershipTemplateID", DbType.Int32, dojoMembership.membershipTemplate.ID);
			}
			addParameter(database, dbCommand, "@SessionID", DbType.String, dojoMembership.sessionID);
			addParameter(database, dbCommand, "@Fee", DbType.Currency, dojoMembership.fee);
			if(dojoMembership.priorMembership == null)
			{
				addParameter(database, dbCommand, "@PriorMembershipID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@PriorMembershipID", DbType.Int32, dojoMembership.priorMembership.ID);
			}
			addParameter(database, dbCommand, "@PaymentAmount", DbType.Currency, dojoMembership.paymentAmount);
			addParameter(database, dbCommand, "@IsProRated", DbType.Boolean, dojoMembership.isProRated);

			#endregion

			#region _system

			addParameter(database, dbCommand, "@CreateDate", DbType.Date, dojoMembership.createDate);
			addParameter(database, dbCommand, "@ModifyDate", DbType.Date, dojoMembership.modifyDate);

			#endregion

			#region Rappahanock

			if(dojoMembership.invoiceLine == null)
			{
				addParameter(database, dbCommand, "@InvoiceLineID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@InvoiceLineID", DbType.Int32, dojoMembership.invoiceLine.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoMembership dojoMembership)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoMembership.iD);
				if(cachedObject != null)
				{
					((DojoMembership)cachedObject).CopyTo(dojoMembership, true);
					return dojoMembership.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_Memberships WHERE DojoMembershipID=");
			query.Append(dojoMembership.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoMembershipID '{0}'.", 
					dojoMembership.iD)));
			}

			FillFromReader(dojoMembership, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoMembership in cache.
			if(cacheEnabled) cacheStore(dojoMembership);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoMembershipCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoMembershipCollection GetCollection(string whereClause, string sortClause, params DojoMembershipFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoMembershipCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoMembershipFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoMembershipCollection dojoMembershipCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoMembership.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int memberOffset = -1;
			int memberPrivateContactOffset = -1;
			int memberEmergencyContactOffset = -1;
			int memberPublicContactOffset = -1;
			int memberParentOffset = -1;
			int memberRootOffset = -1;
			int memberMemberTypeOffset = -1;
			int memberMemberTypeTemplateOffset = -1;
			int memberMembership1Offset = -1;
			int memberMembership2Offset = -1;
			int memberMembership3Offset = -1;
			int memberMembership4Offset = -1;
			int memberMembership5Offset = -1;
			int memberInstructor1Offset = -1;
			int memberInstructor2Offset = -1;
			int memberInstructor3Offset = -1;
			int memberRankOffset = -1;
			int memberUserAccountOffset = -1;
			int memberCustomerOffset = -1;
			int organizationOffset = -1;
			int organizationLocationOffset = -1;
			int organizationAdministrativeContactOffset = -1;
			int organizationDefaultMemberTypeOffset = -1;
			int parentOffset = -1;
			int parentMemberOffset = -1;
			int parentOrganizationOffset = -1;
			int parentParentOffset = -1;
			int parentMemberTypeTemplateOffset = -1;
			int parentMembershipTemplateOffset = -1;
			int parentPriorMembershipOffset = -1;
			int parentInvoiceLineOffset = -1;
			int memberTypeTemplateOffset = -1;
			int memberTypeTemplateMemberTypeOffset = -1;
			int memberTypeTemplateParentOffset = -1;
			SortedDictionary<int, DojoMemberTypeTemplate> memberTypeTemplateParentSortedDictionary = new SortedDictionary<int, DojoMemberTypeTemplate>();
			int memberTypeTemplateRootOffset = -1;
			int memberTypeTemplateInitialRankOffset = -1;
			int memberTypeTemplateInitialRoleOffset = -1;
			int memberTypeTemplateRankMinOffset = -1;
			int memberTypeTemplateRankMaxOffset = -1;
			int memberTypeTemplateMembershipTemplate1Offset = -1;
			int memberTypeTemplateMembershipTemplate2Offset = -1;
			int memberTypeTemplateMembershipTemplate3Offset = -1;
			int memberTypeTemplateMembershipTemplate4Offset = -1;
			int memberTypeTemplateMembershipTemplate5Offset = -1;
			int membershipTemplateOffset = -1;
			int membershipTemplateOrganizationOffset = -1;
			int membershipTemplateRootTemplateOffset = -1;
			int membershipTemplateRankMinOffset = -1;
			int membershipTemplateRankMaxOffset = -1;
			int membershipTemplateItemOffset = -1;
			int membershipTemplateItemClassOffset = -1;
			int priorMembershipOffset = -1;
			int priorMembershipMemberOffset = -1;
			int priorMembershipOrganizationOffset = -1;
			int priorMembershipParentOffset = -1;
			int priorMembershipMemberTypeTemplateOffset = -1;
			int priorMembershipMembershipTemplateOffset = -1;
			int priorMembershipPriorMembershipOffset = -1;
			int priorMembershipInvoiceLineOffset = -1;
			int invoiceLineOffset = -1;
			int invoiceLineInvoiceOffset = -1;
			int invoiceLineItemOffset = -1;
			int invoiceLineClassOffset = -1;
			int invoiceLineTaxOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoMembershipFlags.Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberOffset = innerJoinOffset;
							innerJoinOffset = memberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = memberPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberEmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberEmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = memberEmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberPublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberPublicContactOffset = innerJoinOffset;
							innerJoinOffset = memberPublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberParent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberParentOffset = innerJoinOffset;
							innerJoinOffset = memberParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberRoot:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberRootOffset = innerJoinOffset;
							innerJoinOffset = memberRootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = memberMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = memberMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberMembership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership1Offset = innerJoinOffset;
							innerJoinOffset = memberMembership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberMembership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership2Offset = innerJoinOffset;
							innerJoinOffset = memberMembership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberMembership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership3Offset = innerJoinOffset;
							innerJoinOffset = memberMembership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberMembership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership4Offset = innerJoinOffset;
							innerJoinOffset = memberMembership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberMembership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership5Offset = innerJoinOffset;
							innerJoinOffset = memberMembership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberInstructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor1Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberInstructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor2Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberInstructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor3Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberRankOffset = innerJoinOffset;
							innerJoinOffset = memberRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberUserAccountOffset = innerJoinOffset;
							innerJoinOffset = memberUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberCustomer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberCustomerOffset = innerJoinOffset;
							innerJoinOffset = memberCustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.Organization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							organizationOffset = innerJoinOffset;
							innerJoinOffset = organizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.OrganizationLocation:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Organization_Location.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							organizationLocationOffset = innerJoinOffset;
							innerJoinOffset = organizationLocationOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.OrganizationAdministrativeContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Organization_AdministrativeContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							organizationAdministrativeContactOffset = innerJoinOffset;
							innerJoinOffset = organizationAdministrativeContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.OrganizationDefaultMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Organization_DefaultMemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							organizationDefaultMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = organizationDefaultMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.Parent:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentOffset = innerJoinOffset;
							innerJoinOffset = parentOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.ParentMember:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMemberOffset = innerJoinOffset;
							innerJoinOffset = parentMemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.ParentOrganization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentOrganizationOffset = innerJoinOffset;
							innerJoinOffset = parentOrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.ParentParent:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Parent.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentParentOffset = innerJoinOffset;
							innerJoinOffset = parentParentOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.ParentMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = parentMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.ParentMembershipTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_MembershipTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMembershipTemplateOffset = innerJoinOffset;
							innerJoinOffset = parentMembershipTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.ParentPriorMembership:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_PriorMembership.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentPriorMembershipOffset = innerJoinOffset;
							innerJoinOffset = parentPriorMembershipOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.ParentInvoiceLine:
							for(int i = 0; i <= RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_InvoiceLine.");
								query.Append(RHInvoiceLineManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentInvoiceLineOffset = innerJoinOffset;
							innerJoinOffset = parentInvoiceLineOffset + RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplateMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplateParent:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_Parent.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateParentOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateParentOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplateRoot:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_Root.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateRootOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateRootOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplateInitialRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_InitialRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateInitialRankOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateInitialRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplateInitialRole:
							for(int i = 0; i <= GreyFoxRoleManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_InitialRole.");
								query.Append(GreyFoxRoleManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateInitialRoleOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateInitialRoleOffset + GreyFoxRoleManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplateRankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateRankMinOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateRankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplateRankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateRankMaxOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateRankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplateMembershipTemplate1:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_MembershipTemplate1.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateMembershipTemplate1Offset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateMembershipTemplate1Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplateMembershipTemplate2:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_MembershipTemplate2.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateMembershipTemplate2Offset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateMembershipTemplate2Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplateMembershipTemplate3:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_MembershipTemplate3.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateMembershipTemplate3Offset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateMembershipTemplate3Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplateMembershipTemplate4:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_MembershipTemplate4.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateMembershipTemplate4Offset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateMembershipTemplate4Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MemberTypeTemplateMembershipTemplate5:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_MembershipTemplate5.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateMembershipTemplate5Offset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateMembershipTemplate5Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MembershipTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplateOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MembershipTemplateOrganization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplateOrganizationOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplateOrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MembershipTemplateRootTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate_RootTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplateRootTemplateOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplateRootTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MembershipTemplateRankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate_RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplateRankMinOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplateRankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MembershipTemplateRankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate_RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplateRankMaxOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplateRankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MembershipTemplateItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplateItemOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplateItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.MembershipTemplateItemClass:
							for(int i = 0; i <= RHClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate_ItemClass.");
								query.Append(RHClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplateItemClassOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplateItemClassOffset + RHClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.PriorMembership:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PriorMembership.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							priorMembershipOffset = innerJoinOffset;
							innerJoinOffset = priorMembershipOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.PriorMembershipMember:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PriorMembership_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							priorMembershipMemberOffset = innerJoinOffset;
							innerJoinOffset = priorMembershipMemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.PriorMembershipOrganization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PriorMembership_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							priorMembershipOrganizationOffset = innerJoinOffset;
							innerJoinOffset = priorMembershipOrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.PriorMembershipParent:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PriorMembership_Parent.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							priorMembershipParentOffset = innerJoinOffset;
							innerJoinOffset = priorMembershipParentOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.PriorMembershipMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PriorMembership_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							priorMembershipMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = priorMembershipMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.PriorMembershipMembershipTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PriorMembership_MembershipTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							priorMembershipMembershipTemplateOffset = innerJoinOffset;
							innerJoinOffset = priorMembershipMembershipTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.PriorMembershipPriorMembership:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PriorMembership_PriorMembership.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							priorMembershipPriorMembershipOffset = innerJoinOffset;
							innerJoinOffset = priorMembershipPriorMembershipOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.PriorMembershipInvoiceLine:
							for(int i = 0; i <= RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PriorMembership_InvoiceLine.");
								query.Append(RHInvoiceLineManager.InnerJoinFields[i]);
								query.Append(",");
							}
							priorMembershipInvoiceLineOffset = innerJoinOffset;
							innerJoinOffset = priorMembershipInvoiceLineOffset + RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.InvoiceLine:
							for(int i = 0; i <= RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InvoiceLine.");
								query.Append(RHInvoiceLineManager.InnerJoinFields[i]);
								query.Append(",");
							}
							invoiceLineOffset = innerJoinOffset;
							innerJoinOffset = invoiceLineOffset + RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.InvoiceLineInvoice:
							for(int i = 0; i <= RHInvoiceManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InvoiceLine_Invoice.");
								query.Append(RHInvoiceManager.InnerJoinFields[i]);
								query.Append(",");
							}
							invoiceLineInvoiceOffset = innerJoinOffset;
							innerJoinOffset = invoiceLineInvoiceOffset + RHInvoiceManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.InvoiceLineItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InvoiceLine_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							invoiceLineItemOffset = innerJoinOffset;
							innerJoinOffset = invoiceLineItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.InvoiceLineClass:
							for(int i = 0; i <= RHClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InvoiceLine_Class.");
								query.Append(RHClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							invoiceLineClassOffset = innerJoinOffset;
							innerJoinOffset = invoiceLineClassOffset + RHClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipFlags.InvoiceLineTax:
							for(int i = 0; i <= RHTaxTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InvoiceLine_Tax.");
								query.Append(RHTaxTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							invoiceLineTaxOffset = innerJoinOffset;
							innerJoinOffset = invoiceLineTaxOffset + RHTaxTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_Memberships AS DojoMembership");
			}
			else
			{
				query.Append(" FROM kitTessen_Memberships AS DojoMembership");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoMembershipFlags.Member:
							query.Append(" LEFT JOIN kitTessen_Members AS Member ON DojoMembership.MemberID = Member.DojoMemberID)");
							break;
						case DojoMembershipFlags.MemberPrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Member_PrivateContact ON Member.PrivateContactID = Member_PrivateContact.GreyFoxContactID)");
							break;
						case DojoMembershipFlags.MemberEmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Member_EmergencyContact ON Member.EmergencyContactID = Member_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoMembershipFlags.MemberPublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Member_PublicContact ON Member.PublicContactID = Member_PublicContact.GreyFoxContactID)");
							break;
						case DojoMembershipFlags.MemberParent:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Parent ON Member.ParentID = Member_Parent.DojoMemberID)");
							break;
						case DojoMembershipFlags.MemberRoot:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Root ON Member.RootID = Member_Root.DojoMemberID)");
							break;
						case DojoMembershipFlags.MemberMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Member_MemberType ON Member.MemberTypeID = Member_MemberType.DojoMemberTypeID)");
							break;
						case DojoMembershipFlags.MemberMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Member_MemberTypeTemplate ON Member.MemberTypeTemplateID = Member_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMembershipFlags.MemberMembership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership1 ON Member.Membership1ID = Member_Membership1.DojoMembershipID)");
							break;
						case DojoMembershipFlags.MemberMembership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership2 ON Member.Membership2ID = Member_Membership2.DojoMembershipID)");
							break;
						case DojoMembershipFlags.MemberMembership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership3 ON Member.Membership3ID = Member_Membership3.DojoMembershipID)");
							break;
						case DojoMembershipFlags.MemberMembership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership4 ON Member.Membership4ID = Member_Membership4.DojoMembershipID)");
							break;
						case DojoMembershipFlags.MemberMembership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership5 ON Member.Membership5ID = Member_Membership5.DojoMembershipID)");
							break;
						case DojoMembershipFlags.MemberInstructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor1 ON Member.Instructor1ID = Member_Instructor1.DojoMemberID)");
							break;
						case DojoMembershipFlags.MemberInstructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor2 ON Member.Instructor2ID = Member_Instructor2.DojoMemberID)");
							break;
						case DojoMembershipFlags.MemberInstructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor3 ON Member.Instructor3ID = Member_Instructor3.DojoMemberID)");
							break;
						case DojoMembershipFlags.MemberRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Member_Rank ON Member.RankID = Member_Rank.DojoRankID)");
							break;
						case DojoMembershipFlags.MemberUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Member_UserAccount ON Member.UserAccountID = Member_UserAccount.GreyFoxUserID)");
							break;
						case DojoMembershipFlags.MemberCustomer:
							query.Append(" LEFT JOIN RH_Customers AS Member_Customer ON Member.CustomerID = Member_Customer.RHCustomerID)");
							break;
						case DojoMembershipFlags.Organization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS Organization ON DojoMembership.OrganizationID = Organization.DojoOrganizationID)");
							break;
						case DojoMembershipFlags.OrganizationLocation:
							query.Append(" LEFT JOIN kitTessen_Locations AS Organization_Location ON Organization.LocationID = Organization_Location.GreyFoxContactID)");
							break;
						case DojoMembershipFlags.OrganizationAdministrativeContact:
							query.Append(" LEFT JOIN sysGlobal_Contacts AS Organization_AdministrativeContact ON Organization.AdministrativeContactID = Organization_AdministrativeContact.GreyFoxContactID)");
							break;
						case DojoMembershipFlags.OrganizationDefaultMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Organization_DefaultMemberType ON Organization.DefaultMemberTypeID = Organization_DefaultMemberType.DojoMemberTypeID)");
							break;
						case DojoMembershipFlags.Parent:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Parent ON DojoMembership.ParentID = Parent.DojoMembershipID)");
							break;
						case DojoMembershipFlags.ParentMember:
							query.Append(" LEFT JOIN kitTessen_Members AS Parent_Member ON Parent.MemberID = Parent_Member.DojoMemberID)");
							break;
						case DojoMembershipFlags.ParentOrganization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS Parent_Organization ON Parent.OrganizationID = Parent_Organization.DojoOrganizationID)");
							break;
						case DojoMembershipFlags.ParentParent:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Parent_Parent ON Parent.ParentID = Parent_Parent.DojoMembershipID)");
							break;
						case DojoMembershipFlags.ParentMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Parent_MemberTypeTemplate ON Parent.MemberTypeTemplateID = Parent_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMembershipFlags.ParentMembershipTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Parent_MembershipTemplate ON Parent.MembershipTemplateID = Parent_MembershipTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMembershipFlags.ParentPriorMembership:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Parent_PriorMembership ON Parent.PriorMembershipID = Parent_PriorMembership.DojoMembershipID)");
							break;
						case DojoMembershipFlags.ParentInvoiceLine:
							query.Append(" LEFT JOIN RH_InvoiceLines AS Parent_InvoiceLine ON Parent.InvoiceLineID = Parent_InvoiceLine.RHInvoiceLineID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS MemberTypeTemplate ON DojoMembership.MemberTypeTemplateID = MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplateMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS MemberTypeTemplate_MemberType ON MemberTypeTemplate.MemberTypeID = MemberTypeTemplate_MemberType.DojoMemberTypeID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplateParent:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS MemberTypeTemplate_Parent ON MemberTypeTemplate.ParentID = MemberTypeTemplate_Parent.DojoMemberTypeTemplateID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplateRoot:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS MemberTypeTemplate_Root ON MemberTypeTemplate.RootID = MemberTypeTemplate_Root.DojoMemberTypeTemplateID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplateInitialRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MemberTypeTemplate_InitialRank ON MemberTypeTemplate.InitialRankID = MemberTypeTemplate_InitialRank.DojoRankID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplateInitialRole:
							query.Append(" LEFT JOIN sysGlobal_Roles AS MemberTypeTemplate_InitialRole ON MemberTypeTemplate.InitialRoleID = MemberTypeTemplate_InitialRole.GreyFoxRoleID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplateRankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MemberTypeTemplate_RankMin ON MemberTypeTemplate.RankMinID = MemberTypeTemplate_RankMin.DojoRankID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplateRankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MemberTypeTemplate_RankMax ON MemberTypeTemplate.RankMaxID = MemberTypeTemplate_RankMax.DojoRankID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplateMembershipTemplate1:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MemberTypeTemplate_MembershipTemplate1 ON MemberTypeTemplate.MembershipTemplate1ID = MemberTypeTemplate_MembershipTemplate1.DojoMembershipTemplateID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplateMembershipTemplate2:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MemberTypeTemplate_MembershipTemplate2 ON MemberTypeTemplate.MembershipTemplate2ID = MemberTypeTemplate_MembershipTemplate2.DojoMembershipTemplateID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplateMembershipTemplate3:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MemberTypeTemplate_MembershipTemplate3 ON MemberTypeTemplate.MembershipTemplate3ID = MemberTypeTemplate_MembershipTemplate3.DojoMembershipTemplateID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplateMembershipTemplate4:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MemberTypeTemplate_MembershipTemplate4 ON MemberTypeTemplate.MembershipTemplate4ID = MemberTypeTemplate_MembershipTemplate4.DojoMembershipTemplateID)");
							break;
						case DojoMembershipFlags.MemberTypeTemplateMembershipTemplate5:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MemberTypeTemplate_MembershipTemplate5 ON MemberTypeTemplate.MembershipTemplate5ID = MemberTypeTemplate_MembershipTemplate5.DojoMembershipTemplateID)");
							break;
						case DojoMembershipFlags.MembershipTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MembershipTemplate ON DojoMembership.MembershipTemplateID = MembershipTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMembershipFlags.MembershipTemplateOrganization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS MembershipTemplate_Organization ON MembershipTemplate.OrganizationID = MembershipTemplate_Organization.DojoOrganizationID)");
							break;
						case DojoMembershipFlags.MembershipTemplateRootTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MembershipTemplate_RootTemplate ON MembershipTemplate.RootTemplateID = MembershipTemplate_RootTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMembershipFlags.MembershipTemplateRankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MembershipTemplate_RankMin ON MembershipTemplate.RankMinID = MembershipTemplate_RankMin.DojoRankID)");
							break;
						case DojoMembershipFlags.MembershipTemplateRankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MembershipTemplate_RankMax ON MembershipTemplate.RankMaxID = MembershipTemplate_RankMax.DojoRankID)");
							break;
						case DojoMembershipFlags.MembershipTemplateItem:
							query.Append(" LEFT JOIN RH_Items AS MembershipTemplate_Item ON MembershipTemplate.ItemID = MembershipTemplate_Item.RHItemID)");
							break;
						case DojoMembershipFlags.MembershipTemplateItemClass:
							query.Append(" LEFT JOIN RH_Classes AS MembershipTemplate_ItemClass ON MembershipTemplate.ItemClassID = MembershipTemplate_ItemClass.RHClassID)");
							break;
						case DojoMembershipFlags.PriorMembership:
							query.Append(" LEFT JOIN kitTessen_Memberships AS PriorMembership ON DojoMembership.PriorMembershipID = PriorMembership.DojoMembershipID)");
							break;
						case DojoMembershipFlags.PriorMembershipMember:
							query.Append(" LEFT JOIN kitTessen_Members AS PriorMembership_Member ON PriorMembership.MemberID = PriorMembership_Member.DojoMemberID)");
							break;
						case DojoMembershipFlags.PriorMembershipOrganization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS PriorMembership_Organization ON PriorMembership.OrganizationID = PriorMembership_Organization.DojoOrganizationID)");
							break;
						case DojoMembershipFlags.PriorMembershipParent:
							query.Append(" LEFT JOIN kitTessen_Memberships AS PriorMembership_Parent ON PriorMembership.ParentID = PriorMembership_Parent.DojoMembershipID)");
							break;
						case DojoMembershipFlags.PriorMembershipMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS PriorMembership_MemberTypeTemplate ON PriorMembership.MemberTypeTemplateID = PriorMembership_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMembershipFlags.PriorMembershipMembershipTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS PriorMembership_MembershipTemplate ON PriorMembership.MembershipTemplateID = PriorMembership_MembershipTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMembershipFlags.PriorMembershipPriorMembership:
							query.Append(" LEFT JOIN kitTessen_Memberships AS PriorMembership_PriorMembership ON PriorMembership.PriorMembershipID = PriorMembership_PriorMembership.DojoMembershipID)");
							break;
						case DojoMembershipFlags.PriorMembershipInvoiceLine:
							query.Append(" LEFT JOIN RH_InvoiceLines AS PriorMembership_InvoiceLine ON PriorMembership.InvoiceLineID = PriorMembership_InvoiceLine.RHInvoiceLineID)");
							break;
						case DojoMembershipFlags.InvoiceLine:
							query.Append(" LEFT JOIN RH_InvoiceLines AS InvoiceLine ON DojoMembership.InvoiceLineID = InvoiceLine.RHInvoiceLineID)");
							break;
						case DojoMembershipFlags.InvoiceLineInvoice:
							query.Append(" LEFT JOIN RH_Invoices AS InvoiceLine_Invoice ON InvoiceLine.InvoiceID = InvoiceLine_Invoice.RHInvoiceID)");
							break;
						case DojoMembershipFlags.InvoiceLineItem:
							query.Append(" LEFT JOIN RH_Items AS InvoiceLine_Item ON InvoiceLine.ItemID = InvoiceLine_Item.RHItemID)");
							break;
						case DojoMembershipFlags.InvoiceLineClass:
							query.Append(" LEFT JOIN RH_Classes AS InvoiceLine_Class ON InvoiceLine.ClassID = InvoiceLine_Class.RHClassID)");
							break;
						case DojoMembershipFlags.InvoiceLineTax:
							query.Append(" LEFT JOIN RH_TaxTypes AS InvoiceLine_Tax ON InvoiceLine.TaxID = InvoiceLine_Tax.RHTaxTypeID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoMembershipCollection = new DojoMembershipCollection();

			while(r.Read())
			{
				DojoMembership dojoMembership = ParseFromReader(r, 0, 1);

				// Fill Member
				if(memberOffset != -1 && !r.IsDBNull(memberOffset))
				{
					DojoMemberManager.FillFromReader(dojoMembership.member, r, memberOffset, memberOffset+1);

					// Fill 
					if(memberPrivateContactOffset != -1 && !r.IsDBNull(memberPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMembership.member.PrivateContact, "kitTessen_Members_PrivateContacts", r, memberPrivateContactOffset, memberPrivateContactOffset+1);

					// Fill 
					if(memberEmergencyContactOffset != -1 && !r.IsDBNull(memberEmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMembership.member.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, memberEmergencyContactOffset, memberEmergencyContactOffset+1);

					// Fill 
					if(memberPublicContactOffset != -1 && !r.IsDBNull(memberPublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMembership.member.PublicContact, "kitTessen_Members_PublicContacts", r, memberPublicContactOffset, memberPublicContactOffset+1);

					// Fill 
					if(memberParentOffset != -1 && !r.IsDBNull(memberParentOffset))
						DojoMemberManager.FillFromReader(dojoMembership.member.Parent, r, memberParentOffset, memberParentOffset+1);

					// Fill 
					if(memberRootOffset != -1 && !r.IsDBNull(memberRootOffset))
						DojoMemberManager.FillFromReader(dojoMembership.member.Root, r, memberRootOffset, memberRootOffset+1);

					// Fill 
					if(memberMemberTypeOffset != -1 && !r.IsDBNull(memberMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoMembership.member.MemberType, r, memberMemberTypeOffset, memberMemberTypeOffset+1);

					// Fill 
					if(memberMemberTypeTemplateOffset != -1 && !r.IsDBNull(memberMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMembership.member.MemberTypeTemplate, r, memberMemberTypeTemplateOffset, memberMemberTypeTemplateOffset+1);

					// Fill 
					if(memberMembership1Offset != -1 && !r.IsDBNull(memberMembership1Offset))
						DojoMembershipManager.FillFromReader(dojoMembership.member.Membership1, r, memberMembership1Offset, memberMembership1Offset+1);

					// Fill 
					if(memberMembership2Offset != -1 && !r.IsDBNull(memberMembership2Offset))
						DojoMembershipManager.FillFromReader(dojoMembership.member.Membership2, r, memberMembership2Offset, memberMembership2Offset+1);

					// Fill 
					if(memberMembership3Offset != -1 && !r.IsDBNull(memberMembership3Offset))
						DojoMembershipManager.FillFromReader(dojoMembership.member.Membership3, r, memberMembership3Offset, memberMembership3Offset+1);

					// Fill 
					if(memberMembership4Offset != -1 && !r.IsDBNull(memberMembership4Offset))
						DojoMembershipManager.FillFromReader(dojoMembership.member.Membership4, r, memberMembership4Offset, memberMembership4Offset+1);

					// Fill 
					if(memberMembership5Offset != -1 && !r.IsDBNull(memberMembership5Offset))
						DojoMembershipManager.FillFromReader(dojoMembership.member.Membership5, r, memberMembership5Offset, memberMembership5Offset+1);

					// Fill 
					if(memberInstructor1Offset != -1 && !r.IsDBNull(memberInstructor1Offset))
						DojoMemberManager.FillFromReader(dojoMembership.member.Instructor1, r, memberInstructor1Offset, memberInstructor1Offset+1);

					// Fill 
					if(memberInstructor2Offset != -1 && !r.IsDBNull(memberInstructor2Offset))
						DojoMemberManager.FillFromReader(dojoMembership.member.Instructor2, r, memberInstructor2Offset, memberInstructor2Offset+1);

					// Fill 
					if(memberInstructor3Offset != -1 && !r.IsDBNull(memberInstructor3Offset))
						DojoMemberManager.FillFromReader(dojoMembership.member.Instructor3, r, memberInstructor3Offset, memberInstructor3Offset+1);

					// Fill 
					if(memberRankOffset != -1 && !r.IsDBNull(memberRankOffset))
						DojoRankManager.FillFromReader(dojoMembership.member.Rank, r, memberRankOffset, memberRankOffset+1);

					// Fill 
					if(memberUserAccountOffset != -1 && !r.IsDBNull(memberUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoMembership.member.UserAccount, r, memberUserAccountOffset, memberUserAccountOffset+1);

					// Fill 
					if(memberCustomerOffset != -1 && !r.IsDBNull(memberCustomerOffset))
						RHCustomerManager.FillFromReader(dojoMembership.member.Customer, r, memberCustomerOffset, memberCustomerOffset+1);

				}

				// Fill Organization
				if(organizationOffset != -1 && !r.IsDBNull(organizationOffset))
				{
					DojoOrganizationManager.FillFromReader(dojoMembership.organization, r, organizationOffset, organizationOffset+1);

					// Fill 
					if(organizationLocationOffset != -1 && !r.IsDBNull(organizationLocationOffset))
						GreyFoxContactManager.FillFromReader(dojoMembership.organization.Location, "kitTessen_Locations", r, organizationLocationOffset, organizationLocationOffset+1);

					// Fill 
					if(organizationAdministrativeContactOffset != -1 && !r.IsDBNull(organizationAdministrativeContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMembership.organization.AdministrativeContact, "sysGlobal_Contacts", r, organizationAdministrativeContactOffset, organizationAdministrativeContactOffset+1);

					// Fill 
					if(organizationDefaultMemberTypeOffset != -1 && !r.IsDBNull(organizationDefaultMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoMembership.organization.DefaultMemberType, r, organizationDefaultMemberTypeOffset, organizationDefaultMemberTypeOffset+1);

				}

				// Fill Parent
				if(parentOffset != -1 && !r.IsDBNull(parentOffset))
				{
					DojoMembershipManager.FillFromReader(dojoMembership.parent, r, parentOffset, parentOffset+1);

					// Fill 
					if(parentMemberOffset != -1 && !r.IsDBNull(parentMemberOffset))
						DojoMemberManager.FillFromReader(dojoMembership.parent.Member, r, parentMemberOffset, parentMemberOffset+1);

					// Fill 
					if(parentOrganizationOffset != -1 && !r.IsDBNull(parentOrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMembership.parent.Organization, r, parentOrganizationOffset, parentOrganizationOffset+1);

					// Fill Parent Membership
					if(parentParentOffset != -1 && !r.IsDBNull(parentParentOffset))
						DojoMembershipManager.FillFromReader(dojoMembership.parent.Parent, r, parentParentOffset, parentParentOffset+1);

					// Fill Parent Template Group
					if(parentMemberTypeTemplateOffset != -1 && !r.IsDBNull(parentMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMembership.parent.MemberTypeTemplate, r, parentMemberTypeTemplateOffset, parentMemberTypeTemplateOffset+1);

					// Fill Parent Template
					if(parentMembershipTemplateOffset != -1 && !r.IsDBNull(parentMembershipTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMembership.parent.MembershipTemplate, r, parentMembershipTemplateOffset, parentMembershipTemplateOffset+1);

					// Fill 
					if(parentPriorMembershipOffset != -1 && !r.IsDBNull(parentPriorMembershipOffset))
						DojoMembershipManager.FillFromReader(dojoMembership.parent.PriorMembership, r, parentPriorMembershipOffset, parentPriorMembershipOffset+1);

					// Fill 
					if(parentInvoiceLineOffset != -1 && !r.IsDBNull(parentInvoiceLineOffset))
						RHInvoiceLineManager.FillFromReader(dojoMembership.parent.InvoiceLine, r, parentInvoiceLineOffset, parentInvoiceLineOffset+1);

				}

				// Fill MemberTypeTemplate
				if(memberTypeTemplateOffset != -1 && !r.IsDBNull(memberTypeTemplateOffset))
				{
					DojoMemberTypeTemplateManager.FillFromReader(dojoMembership.memberTypeTemplate, r, memberTypeTemplateOffset, memberTypeTemplateOffset+1);

					// Fill Member Type
					if(memberTypeTemplateMemberTypeOffset != -1 && !r.IsDBNull(memberTypeTemplateMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoMembership.memberTypeTemplate.MemberType, r, memberTypeTemplateMemberTypeOffset, memberTypeTemplateMemberTypeOffset+1);

					// Fill Parent Template Group
					if(memberTypeTemplateParentOffset != -1 && !r.IsDBNull(memberTypeTemplateParentOffset))
					{
						if(!memberTypeTemplateParentSortedDictionary.TryGetValue(r.GetInt32(memberTypeTemplateParentOffset), out dojoMembership.memberTypeTemplate.parent))
						{
							DojoMemberTypeTemplateManager.FillFromReader(dojoMembership.memberTypeTemplate.Parent, r, memberTypeTemplateParentOffset, memberTypeTemplateParentOffset+1);
							memberTypeTemplateParentSortedDictionary.Add(dojoMembership.memberTypeTemplate.Parent.ID, dojoMembership.memberTypeTemplate.Parent);
						}
					}

					// Fill 
					if(memberTypeTemplateRootOffset != -1 && !r.IsDBNull(memberTypeTemplateRootOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMembership.memberTypeTemplate.Root, r, memberTypeTemplateRootOffset, memberTypeTemplateRootOffset+1);

					// Fill 
					if(memberTypeTemplateInitialRankOffset != -1 && !r.IsDBNull(memberTypeTemplateInitialRankOffset))
						DojoRankManager.FillFromReader(dojoMembership.memberTypeTemplate.InitialRank, r, memberTypeTemplateInitialRankOffset, memberTypeTemplateInitialRankOffset+1);

					// Fill 
					if(memberTypeTemplateInitialRoleOffset != -1 && !r.IsDBNull(memberTypeTemplateInitialRoleOffset))
						GreyFoxRoleManager.FillFromReader(dojoMembership.memberTypeTemplate.InitialRole, r, memberTypeTemplateInitialRoleOffset, memberTypeTemplateInitialRoleOffset+1);

					// Fill 
					if(memberTypeTemplateRankMinOffset != -1 && !r.IsDBNull(memberTypeTemplateRankMinOffset))
						DojoRankManager.FillFromReader(dojoMembership.memberTypeTemplate.RankMin, r, memberTypeTemplateRankMinOffset, memberTypeTemplateRankMinOffset+1);

					// Fill 
					if(memberTypeTemplateRankMaxOffset != -1 && !r.IsDBNull(memberTypeTemplateRankMaxOffset))
						DojoRankManager.FillFromReader(dojoMembership.memberTypeTemplate.RankMax, r, memberTypeTemplateRankMaxOffset, memberTypeTemplateRankMaxOffset+1);

					// Fill 
					if(memberTypeTemplateMembershipTemplate1Offset != -1 && !r.IsDBNull(memberTypeTemplateMembershipTemplate1Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMembership.memberTypeTemplate.MembershipTemplate1, r, memberTypeTemplateMembershipTemplate1Offset, memberTypeTemplateMembershipTemplate1Offset+1);

					// Fill 
					if(memberTypeTemplateMembershipTemplate2Offset != -1 && !r.IsDBNull(memberTypeTemplateMembershipTemplate2Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMembership.memberTypeTemplate.MembershipTemplate2, r, memberTypeTemplateMembershipTemplate2Offset, memberTypeTemplateMembershipTemplate2Offset+1);

					// Fill 
					if(memberTypeTemplateMembershipTemplate3Offset != -1 && !r.IsDBNull(memberTypeTemplateMembershipTemplate3Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMembership.memberTypeTemplate.MembershipTemplate3, r, memberTypeTemplateMembershipTemplate3Offset, memberTypeTemplateMembershipTemplate3Offset+1);

					// Fill 
					if(memberTypeTemplateMembershipTemplate4Offset != -1 && !r.IsDBNull(memberTypeTemplateMembershipTemplate4Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMembership.memberTypeTemplate.MembershipTemplate4, r, memberTypeTemplateMembershipTemplate4Offset, memberTypeTemplateMembershipTemplate4Offset+1);

					// Fill 
					if(memberTypeTemplateMembershipTemplate5Offset != -1 && !r.IsDBNull(memberTypeTemplateMembershipTemplate5Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMembership.memberTypeTemplate.MembershipTemplate5, r, memberTypeTemplateMembershipTemplate5Offset, memberTypeTemplateMembershipTemplate5Offset+1);

				}

				// Fill MembershipTemplate
				if(membershipTemplateOffset != -1 && !r.IsDBNull(membershipTemplateOffset))
				{
					DojoMembershipTemplateManager.FillFromReader(dojoMembership.membershipTemplate, r, membershipTemplateOffset, membershipTemplateOffset+1);

					// Fill 
					if(membershipTemplateOrganizationOffset != -1 && !r.IsDBNull(membershipTemplateOrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMembership.membershipTemplate.Organization, r, membershipTemplateOrganizationOffset, membershipTemplateOrganizationOffset+1);

					// Fill 
					if(membershipTemplateRootTemplateOffset != -1 && !r.IsDBNull(membershipTemplateRootTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMembership.membershipTemplate.RootTemplate, r, membershipTemplateRootTemplateOffset, membershipTemplateRootTemplateOffset+1);

					// Fill 
					if(membershipTemplateRankMinOffset != -1 && !r.IsDBNull(membershipTemplateRankMinOffset))
						DojoRankManager.FillFromReader(dojoMembership.membershipTemplate.RankMin, r, membershipTemplateRankMinOffset, membershipTemplateRankMinOffset+1);

					// Fill 
					if(membershipTemplateRankMaxOffset != -1 && !r.IsDBNull(membershipTemplateRankMaxOffset))
						DojoRankManager.FillFromReader(dojoMembership.membershipTemplate.RankMax, r, membershipTemplateRankMaxOffset, membershipTemplateRankMaxOffset+1);

					// Fill 
					if(membershipTemplateItemOffset != -1 && !r.IsDBNull(membershipTemplateItemOffset))
						RHItemManager.FillFromReader(dojoMembership.membershipTemplate.Item, r, membershipTemplateItemOffset, membershipTemplateItemOffset+1);

					// Fill 
					if(membershipTemplateItemClassOffset != -1 && !r.IsDBNull(membershipTemplateItemClassOffset))
						RHClassManager.FillFromReader(dojoMembership.membershipTemplate.ItemClass, r, membershipTemplateItemClassOffset, membershipTemplateItemClassOffset+1);

				}

				// Fill PriorMembership
				if(priorMembershipOffset != -1 && !r.IsDBNull(priorMembershipOffset))
				{
					DojoMembershipManager.FillFromReader(dojoMembership.priorMembership, r, priorMembershipOffset, priorMembershipOffset+1);

					// Fill 
					if(priorMembershipMemberOffset != -1 && !r.IsDBNull(priorMembershipMemberOffset))
						DojoMemberManager.FillFromReader(dojoMembership.priorMembership.Member, r, priorMembershipMemberOffset, priorMembershipMemberOffset+1);

					// Fill 
					if(priorMembershipOrganizationOffset != -1 && !r.IsDBNull(priorMembershipOrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMembership.priorMembership.Organization, r, priorMembershipOrganizationOffset, priorMembershipOrganizationOffset+1);

					// Fill Parent Membership
					if(priorMembershipParentOffset != -1 && !r.IsDBNull(priorMembershipParentOffset))
						DojoMembershipManager.FillFromReader(dojoMembership.priorMembership.Parent, r, priorMembershipParentOffset, priorMembershipParentOffset+1);

					// Fill Parent Template Group
					if(priorMembershipMemberTypeTemplateOffset != -1 && !r.IsDBNull(priorMembershipMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMembership.priorMembership.MemberTypeTemplate, r, priorMembershipMemberTypeTemplateOffset, priorMembershipMemberTypeTemplateOffset+1);

					// Fill Parent Template
					if(priorMembershipMembershipTemplateOffset != -1 && !r.IsDBNull(priorMembershipMembershipTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMembership.priorMembership.MembershipTemplate, r, priorMembershipMembershipTemplateOffset, priorMembershipMembershipTemplateOffset+1);

					// Fill 
					if(priorMembershipPriorMembershipOffset != -1 && !r.IsDBNull(priorMembershipPriorMembershipOffset))
						DojoMembershipManager.FillFromReader(dojoMembership.priorMembership.PriorMembership, r, priorMembershipPriorMembershipOffset, priorMembershipPriorMembershipOffset+1);

					// Fill 
					if(priorMembershipInvoiceLineOffset != -1 && !r.IsDBNull(priorMembershipInvoiceLineOffset))
						RHInvoiceLineManager.FillFromReader(dojoMembership.priorMembership.InvoiceLine, r, priorMembershipInvoiceLineOffset, priorMembershipInvoiceLineOffset+1);

				}

				// Fill InvoiceLine
				if(invoiceLineOffset != -1 && !r.IsDBNull(invoiceLineOffset))
				{
					RHInvoiceLineManager.FillFromReader(dojoMembership.invoiceLine, r, invoiceLineOffset, invoiceLineOffset+1);

					// Fill Invoice
					if(invoiceLineInvoiceOffset != -1 && !r.IsDBNull(invoiceLineInvoiceOffset))
						RHInvoiceManager.FillFromReader(dojoMembership.invoiceLine.Invoice, r, invoiceLineInvoiceOffset, invoiceLineInvoiceOffset+1);

					// Fill Product
					if(invoiceLineItemOffset != -1 && !r.IsDBNull(invoiceLineItemOffset))
						RHItemManager.FillFromReader(dojoMembership.invoiceLine.Item, r, invoiceLineItemOffset, invoiceLineItemOffset+1);

					// Fill 
					if(invoiceLineClassOffset != -1 && !r.IsDBNull(invoiceLineClassOffset))
						RHClassManager.FillFromReader(dojoMembership.invoiceLine.Class, r, invoiceLineClassOffset, invoiceLineClassOffset+1);

					// Fill 
					if(invoiceLineTaxOffset != -1 && !r.IsDBNull(invoiceLineTaxOffset))
						RHTaxTypeManager.FillFromReader(dojoMembership.invoiceLine.Tax, r, invoiceLineTaxOffset, invoiceLineTaxOffset+1);

				}

				dojoMembershipCollection.Add(dojoMembership);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoMembershipCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoMembership ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoMembership dojoMembership = new DojoMembership();
			FillFromReader(dojoMembership, r, idOffset, dataOffset);
			return dojoMembership;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoMembership dojoMembership, IDataReader r, int idOffset, int dataOffset)
		{
			dojoMembership.iD = r.GetInt32(idOffset);
			dojoMembership.isSynced = true;
			dojoMembership.isPlaceHolder = false;

			if(!r.IsDBNull(0+dataOffset) && r.GetInt32(0+dataOffset) > 0)
			{
				dojoMembership.member = DojoMember.NewPlaceHolder(r.GetInt32(0+dataOffset));
			}
			if(!r.IsDBNull(1+dataOffset)) 
				dojoMembership.startDate = r.GetDateTime(1+dataOffset);
			else
				dojoMembership.startDate = DateTime.MinValue;
			if(!r.IsDBNull(2+dataOffset)) 
				dojoMembership.endDate = r.GetDateTime(2+dataOffset);
			else
				dojoMembership.endDate = DateTime.MinValue;
			if(!r.IsDBNull(3+dataOffset) && r.GetInt32(3+dataOffset) > 0)
			{
				dojoMembership.organization = DojoOrganization.NewPlaceHolder(r.GetInt32(3+dataOffset));
			}
			dojoMembership.organizationMemberID = r.GetString(4+dataOffset);
			if(!r.IsDBNull(5+dataOffset) && r.GetInt32(5+dataOffset) > 0)
			{
				dojoMembership.parent = DojoMembership.NewPlaceHolder(r.GetInt32(5+dataOffset));
			}
			if(!r.IsDBNull(6+dataOffset) && r.GetInt32(6+dataOffset) > 0)
			{
				dojoMembership.memberTypeTemplate = DojoMemberTypeTemplate.NewPlaceHolder(r.GetInt32(6+dataOffset));
			}
			if(!r.IsDBNull(7+dataOffset) && r.GetInt32(7+dataOffset) > 0)
			{
				dojoMembership.membershipTemplate = DojoMembershipTemplate.NewPlaceHolder(r.GetInt32(7+dataOffset));
			}
			if(!r.IsDBNull(8+dataOffset)) 
				dojoMembership.sessionID = r.GetString(8+dataOffset);
			else
				dojoMembership.sessionID = string.Empty;
			dojoMembership.fee = r.GetDecimal(9+dataOffset);
			if(!r.IsDBNull(10+dataOffset) && r.GetInt32(10+dataOffset) > 0)
			{
				dojoMembership.priorMembership = DojoMembership.NewPlaceHolder(r.GetInt32(10+dataOffset));
			}
			dojoMembership.paymentAmount = r.GetDecimal(11+dataOffset);
			dojoMembership.isProRated = r.GetBoolean(12+dataOffset);
			dojoMembership.createDate = r.GetDateTime(13+dataOffset);
			dojoMembership.modifyDate = r.GetDateTime(14+dataOffset);
			if(!r.IsDBNull(15+dataOffset) && r.GetInt32(15+dataOffset) > 0)
			{
				dojoMembership.invoiceLine = RHInvoiceLine.NewPlaceHolder(r.GetInt32(15+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_Memberships WHERE DojoMembershipID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_Memberships ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_Memberships_Member FOREIGN KEY (MemberID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_Memberships_Organization FOREIGN KEY (OrganizationID) REFERENCES kitTessen_Organizations (DojoOrganizationID),");
			query.Append(" CONSTRAINT FK_kitTessen_Memberships_Parent FOREIGN KEY (ParentID) REFERENCES kitTessen_Memberships (DojoMembershipID),");
			query.Append(" CONSTRAINT FK_kitTessen_Memberships_MemberTypeTemplate FOREIGN KEY (MemberTypeTemplateID) REFERENCES kitTessen_MemberTypeTemplates (DojoMemberTypeTemplateID),");
			query.Append(" CONSTRAINT FK_kitTessen_Memberships_MembershipTemplate FOREIGN KEY (MembershipTemplateID) REFERENCES kitTessen_MembershipTemplates (DojoMembershipTemplateID),");
			query.Append(" CONSTRAINT FK_kitTessen_Memberships_PriorMembership FOREIGN KEY (PriorMembershipID) REFERENCES kitTessen_Memberships (DojoMembershipID),");
			query.Append(" CONSTRAINT FK_kitTessen_Memberships_InvoiceLine FOREIGN KEY (InvoiceLineID) REFERENCES RH_InvoiceLines (RHInvoiceLineID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_Memberships ");
				query.Append(" (DojoMembershipID COUNTER(1,1) CONSTRAINT PK_kitTessen_Memberships PRIMARY KEY, " +
					"MemberID LONG," +
					"StartDate DATETIME," +
					"EndDate DATETIME," +
					"OrganizationID LONG," +
					"OrganizationMemberID TEXT(75)," +
					"ParentID LONG," +
					"MemberTypeTemplateID LONG," +
					"MembershipTemplateID LONG," +
					"SessionID TEXT(75)," +
					"Fee CURRENCY," +
					"PriorMembershipID LONG," +
					"PaymentAmount CURRENCY," +
					"IsProRated BIT," +
					"CreateDate DATETIME," +
					"ModifyDate DATETIME," +
					"InvoiceLineID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_Memberships ");
				query.Append(" (DojoMembershipID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_Memberships PRIMARY KEY, " +
					"MemberID INT," +
					"StartDate DATETIME," +
					"EndDate DATETIME," +
					"OrganizationID INT," +
					"OrganizationMemberID NVARCHAR(75)," +
					"ParentID INT," +
					"MemberTypeTemplateID INT," +
					"MembershipTemplateID INT," +
					"SessionID NVARCHAR(75)," +
					"Fee MONEY," +
					"PriorMembershipID INT," +
					"PaymentAmount MONEY," +
					"IsProRated BIT," +
					"CreateDate DATETIME," +
					"ModifyDate DATETIME," +
					"InvoiceLineID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoMembership dojoMembership)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_Memberships_" + dojoMembership.iD.ToString(), dojoMembership);
		}

		private static DojoMembership cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_Memberships_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoMembership)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_Memberships_" + id.ToString());
		}

		#endregion

	}
}

