/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using Amns.GreyFox.People;
using Amns.GreyFox.Security;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	/// <summary>
	/// DojoMember
	/// </summary>
	public class DojoMember : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal GreyFoxContact privateContact;
		internal GreyFoxContact emergencyContact;
		internal GreyFoxContact publicContact;
		internal DojoMember parent;
		internal DojoMember root;
		internal DateTime createDate;
		internal DateTime modifyDate;
		internal DojoMemberType memberType;
		internal DojoMemberTypeTemplate memberTypeTemplate;
		internal string memberTypeTreeHash;
		internal DateTime memberSince;
		internal DojoMembership membership1;
		internal DojoMembership membership2;
		internal DojoMembership membership3;
		internal DojoMembership membership4;
		internal DojoMembership membership5;
		internal DateTime lastMembershipScan;
		internal bool isPrimaryOrgActive;
		internal TimeSpan timeInRank;
		internal TimeSpan timeInMembership;
		internal DojoMember instructor1;
		internal DojoMember instructor2;
		internal DojoMember instructor3;
		internal DateTime lastSignin;
		internal DateTime lastAttendanceScan;
		internal string attendanceMessage;
		internal bool hasWaiver;
		internal bool isPromotable;
		internal DojoPromotionFlagCollection promotionFlags;
		internal bool isInstructor;
		internal DojoRank rank;
		internal DateTime rankDate;
		internal GreyFoxUser userAccount;
		internal bool isPastDue;
		internal DateTime lastDuesScan;
		internal RHCustomer customer;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoMember Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoMember as a Placeholder. Placeholders only contain 
		/// a DojoMember ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public GreyFoxContact PrivateContact
		{
			get
			{
				EnsurePreLoad();
				return privateContact;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(privateContact == null)
					{
						return;
					}
					else
					{
						privateContact = value;
						isSynced = false;
					}
				}
				else
				{
					if(value.TableName != "kitTessen_Members_PrivateContacts") throw(new Exception("Cannot set PrivateContact. Table names mismatched."));
					if(privateContact != null && value.ID == privateContact.ID)
					{
						return; 
					}
					else
					{
						privateContact = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public GreyFoxContact EmergencyContact
		{
			get
			{
				EnsurePreLoad();
				return emergencyContact;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(emergencyContact == null)
					{
						return;
					}
					else
					{
						emergencyContact = value;
						isSynced = false;
					}
				}
				else
				{
					if(value.TableName != "kitTessen_Members_EmergencyContacts") throw(new Exception("Cannot set EmergencyContact. Table names mismatched."));
					if(emergencyContact != null && value.ID == emergencyContact.ID)
					{
						return; 
					}
					else
					{
						emergencyContact = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public GreyFoxContact PublicContact
		{
			get
			{
				EnsurePreLoad();
				return publicContact;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(publicContact == null)
					{
						return;
					}
					else
					{
						publicContact = value;
						isSynced = false;
					}
				}
				else
				{
					if(value.TableName != "kitTessen_Members_PublicContacts") throw(new Exception("Cannot set PublicContact. Table names mismatched."));
					if(publicContact != null && value.ID == publicContact.ID)
					{
						return; 
					}
					else
					{
						publicContact = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Parent
		{
			get
			{
				EnsurePreLoad();
				return parent;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(parent == null)
					{
						return;
					}
					else
					{
						parent = value;
						isSynced = false;
					}
				}
				else
				{
					if(parent != null && value.ID == parent.ID)
					{
						return; 
					}
					else
					{
						parent = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Root
		{
			get
			{
				EnsurePreLoad();
				return root;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(root == null)
					{
						return;
					}
					else
					{
						root = value;
						isSynced = false;
					}
				}
				else
				{
					if(root != null && value.ID == root.ID)
					{
						return; 
					}
					else
					{
						root = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DateTime CreateDate
		{
			get
			{
				EnsurePreLoad();
				return createDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= createDate == value;
				createDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime ModifyDate
		{
			get
			{
				EnsurePreLoad();
				return modifyDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= modifyDate == value;
				modifyDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMemberType MemberType
		{
			get
			{
				EnsurePreLoad();
				return memberType;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(memberType == null)
					{
						return;
					}
					else
					{
						memberType = value;
						isSynced = false;
					}
				}
				else
				{
					if(memberType != null && value.ID == memberType.ID)
					{
						return; 
					}
					else
					{
						memberType = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMemberTypeTemplate MemberTypeTemplate
		{
			get
			{
				EnsurePreLoad();
				return memberTypeTemplate;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(memberTypeTemplate == null)
					{
						return;
					}
					else
					{
						memberTypeTemplate = value;
						isSynced = false;
					}
				}
				else
				{
					if(memberTypeTemplate != null && value.ID == memberTypeTemplate.ID)
					{
						return; 
					}
					else
					{
						memberTypeTemplate = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public string MemberTypeTreeHash
		{
			get
			{
				EnsurePreLoad();
				return memberTypeTreeHash;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= memberTypeTreeHash == value;
				memberTypeTreeHash = value;
			}
		}

		/// <summary>
		/// The date the member originally joined the dojo.
		/// </summary>
		public DateTime MemberSince
		{
			get
			{
				EnsurePreLoad();
				return memberSince;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= memberSince == value;
				memberSince = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMembership Membership1
		{
			get
			{
				EnsurePreLoad();
				return membership1;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(membership1 == null)
					{
						return;
					}
					else
					{
						membership1 = value;
						isSynced = false;
					}
				}
				else
				{
					if(membership1 != null && value.ID == membership1.ID)
					{
						return; 
					}
					else
					{
						membership1 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMembership Membership2
		{
			get
			{
				EnsurePreLoad();
				return membership2;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(membership2 == null)
					{
						return;
					}
					else
					{
						membership2 = value;
						isSynced = false;
					}
				}
				else
				{
					if(membership2 != null && value.ID == membership2.ID)
					{
						return; 
					}
					else
					{
						membership2 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMembership Membership3
		{
			get
			{
				EnsurePreLoad();
				return membership3;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(membership3 == null)
					{
						return;
					}
					else
					{
						membership3 = value;
						isSynced = false;
					}
				}
				else
				{
					if(membership3 != null && value.ID == membership3.ID)
					{
						return; 
					}
					else
					{
						membership3 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMembership Membership4
		{
			get
			{
				EnsurePreLoad();
				return membership4;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(membership4 == null)
					{
						return;
					}
					else
					{
						membership4 = value;
						isSynced = false;
					}
				}
				else
				{
					if(membership4 != null && value.ID == membership4.ID)
					{
						return; 
					}
					else
					{
						membership4 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMembership Membership5
		{
			get
			{
				EnsurePreLoad();
				return membership5;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(membership5 == null)
					{
						return;
					}
					else
					{
						membership5 = value;
						isSynced = false;
					}
				}
				else
				{
					if(membership5 != null && value.ID == membership5.ID)
					{
						return; 
					}
					else
					{
						membership5 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DateTime LastMembershipScan
		{
			get
			{
				EnsurePreLoad();
				return lastMembershipScan;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= lastMembershipScan == value;
				lastMembershipScan = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool IsPrimaryOrgActive
		{
			get
			{
				EnsurePreLoad();
				return isPrimaryOrgActive;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isPrimaryOrgActive == value;
				isPrimaryOrgActive = value;
			}
		}

		/// <summary>
		/// </summary>
		public TimeSpan TimeInRank
		{
			get
			{
				EnsurePreLoad();
				return timeInRank;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= timeInRank == value;
				timeInRank = value;
			}
		}

		/// <summary>
		/// </summary>
		public TimeSpan TimeInMembership
		{
			get
			{
				EnsurePreLoad();
				return timeInMembership;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= timeInMembership == value;
				timeInMembership = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Instructor1
		{
			get
			{
				EnsurePreLoad();
				return instructor1;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(instructor1 == null)
					{
						return;
					}
					else
					{
						instructor1 = value;
						isSynced = false;
					}
				}
				else
				{
					if(instructor1 != null && value.ID == instructor1.ID)
					{
						return; 
					}
					else
					{
						instructor1 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Instructor2
		{
			get
			{
				EnsurePreLoad();
				return instructor2;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(instructor2 == null)
					{
						return;
					}
					else
					{
						instructor2 = value;
						isSynced = false;
					}
				}
				else
				{
					if(instructor2 != null && value.ID == instructor2.ID)
					{
						return; 
					}
					else
					{
						instructor2 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Instructor3
		{
			get
			{
				EnsurePreLoad();
				return instructor3;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(instructor3 == null)
					{
						return;
					}
					else
					{
						instructor3 = value;
						isSynced = false;
					}
				}
				else
				{
					if(instructor3 != null && value.ID == instructor3.ID)
					{
						return; 
					}
					else
					{
						instructor3 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// Last time the member signed in. Used for Signin scans to trim member 
		/// types.
		/// </summary>
		public DateTime LastSignin
		{
			get
			{
				EnsurePreLoad();
				return lastSignin;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= lastSignin == value;
				lastSignin = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime LastAttendanceScan
		{
			get
			{
				EnsurePreLoad();
				return lastAttendanceScan;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= lastAttendanceScan == value;
				lastAttendanceScan = value;
			}
		}

		/// <summary>
		/// </summary>
		public string AttendanceMessage
		{
			get
			{
				EnsurePreLoad();
				return attendanceMessage;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= attendanceMessage == value;
				attendanceMessage = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool HasWaiver
		{
			get
			{
				EnsurePreLoad();
				return hasWaiver;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= hasWaiver == value;
				hasWaiver = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool IsPromotable
		{
			get
			{
				EnsurePreLoad();
				return isPromotable;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isPromotable == value;
				isPromotable = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoPromotionFlagCollection PromotionFlags
		{
			get
			{
				EnsurePreLoad();
				if(promotionFlags == null)
				{
					DojoMemberManager.FillPromotionFlags(this);
					promotionFlags.CollectionChanged += new System.EventHandler(childrenCollection_Changed);
				}
				return promotionFlags;
			}
			set
			{
				EnsurePreLoad();
				if(!object.Equals(promotionFlags, value))
				{
					if(value == null)
						PromotionFlags = new DojoPromotionFlagCollection();
					else
						promotionFlags = value;
					promotionFlags.CollectionChanged += new System.EventHandler(childrenCollection_Changed);
					isSynced = false;
				}
			}
		}

		/// <summary>
		/// </summary>
		public bool IsInstructor
		{
			get
			{
				EnsurePreLoad();
				return isInstructor;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isInstructor == value;
				isInstructor = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoRank Rank
		{
			get
			{
				EnsurePreLoad();
				return rank;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(rank == null)
					{
						return;
					}
					else
					{
						rank = value;
						isSynced = false;
					}
				}
				else
				{
					if(rank != null && value.ID == rank.ID)
					{
						return; 
					}
					else
					{
						rank = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DateTime RankDate
		{
			get
			{
				EnsurePreLoad();
				return rankDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= rankDate == value;
				rankDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public GreyFoxUser UserAccount
		{
			get
			{
				EnsurePreLoad();
				return userAccount;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(userAccount == null)
					{
						return;
					}
					else
					{
						userAccount = value;
						isSynced = false;
					}
				}
				else
				{
					if(userAccount != null && value.ID == userAccount.ID)
					{
						return; 
					}
					else
					{
						userAccount = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public bool IsPastDue
		{
			get
			{
				EnsurePreLoad();
				return isPastDue;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isPastDue == value;
				isPastDue = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime LastDuesScan
		{
			get
			{
				EnsurePreLoad();
				return lastDuesScan;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= lastDuesScan == value;
				lastDuesScan = value;
			}
		}

		/// <summary>
		/// </summary>
		public RHCustomer Customer
		{
			get
			{
				EnsurePreLoad();
				return customer;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(customer == null)
					{
						return;
					}
					else
					{
						customer = value;
						isSynced = false;
					}
				}
				else
				{
					if(customer != null && value.ID == customer.ID)
					{
						return; 
					}
					else
					{
						customer = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoMember.
		/// </summary>
		public DojoMember()
		{
			createDate = DateTime.Now;
			modifyDate = DateTime.Now;
			memberTypeTreeHash = string.Empty;
		}

		public DojoMember(int id)
		{
			this.iD = id;
			isSynced = DojoMemberManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoMemberManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoMember object state to the database.
		/// </summary>
		public int Save()
		{
			if(privateContact != null)
				privateContact.Save();
			if(emergencyContact != null)
				emergencyContact.Save();
			if(publicContact != null)
				publicContact.Save();
			if(promotionFlags != null)
				foreach(DojoPromotionFlag item in promotionFlags)
					item.Save();
			if(rank != null)
				rank.Save();
			if(userAccount != null)
				userAccount.Save();

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoMemberManager._insert(this);
			else
				DojoMemberManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoMemberManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
			privateContact.Delete();
			emergencyContact.Delete();
			publicContact.Delete();
			userAccount.Delete();
		}
		/// <summary>
		/// Duplicates DojoMember object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoMember object reflecting the replicated DojoMember object.</returns>
		public DojoMember Duplicate()
		{
			DojoMember clonedDojoMember = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoMember.iD = DojoMemberManager._insert(clonedDojoMember);
			clonedDojoMember.isSynced = true;
			return clonedDojoMember;
		}

		/// <summary>
		/// Overwrites and existing DojoMember object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoMemberManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoMember object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoMember object reflecting the replicated DojoMember object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoMember object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoMember object reflecting the replicated DojoMember object.</returns>
		public DojoMember Clone()
		{
			DojoMember clonedDojoMember = new DojoMember();
			clonedDojoMember.iD = iD;
			clonedDojoMember.isSynced = isSynced;
			clonedDojoMember.createDate = createDate;
			clonedDojoMember.modifyDate = modifyDate;
			clonedDojoMember.memberTypeTreeHash = memberTypeTreeHash;
			clonedDojoMember.memberSince = memberSince;
			clonedDojoMember.lastMembershipScan = lastMembershipScan;
			clonedDojoMember.isPrimaryOrgActive = isPrimaryOrgActive;
			clonedDojoMember.timeInRank = timeInRank;
			clonedDojoMember.timeInMembership = timeInMembership;
			clonedDojoMember.lastSignin = lastSignin;
			clonedDojoMember.lastAttendanceScan = lastAttendanceScan;
			clonedDojoMember.attendanceMessage = attendanceMessage;
			clonedDojoMember.hasWaiver = hasWaiver;
			clonedDojoMember.isPromotable = isPromotable;
			clonedDojoMember.isInstructor = isInstructor;
			clonedDojoMember.rankDate = rankDate;
			clonedDojoMember.isPastDue = isPastDue;
			clonedDojoMember.lastDuesScan = lastDuesScan;


			if(privateContact != null)
				clonedDojoMember.privateContact = privateContact.Duplicate("kitTessen_Members_PrivateContacts");

			if(emergencyContact != null)
				clonedDojoMember.emergencyContact = emergencyContact.Duplicate("kitTessen_Members_EmergencyContacts");

			if(publicContact != null)
				clonedDojoMember.publicContact = publicContact.Duplicate("kitTessen_Members_PublicContacts");

			if(parent != null)
				clonedDojoMember.parent = parent;

			if(root != null)
				clonedDojoMember.root = root;

			if(memberType != null)
				clonedDojoMember.memberType = memberType;

			if(memberTypeTemplate != null)
				clonedDojoMember.memberTypeTemplate = memberTypeTemplate;

			if(membership1 != null)
				clonedDojoMember.membership1 = membership1;

			if(membership2 != null)
				clonedDojoMember.membership2 = membership2;

			if(membership3 != null)
				clonedDojoMember.membership3 = membership3;

			if(membership4 != null)
				clonedDojoMember.membership4 = membership4;

			if(membership5 != null)
				clonedDojoMember.membership5 = membership5;

			if(instructor1 != null)
				clonedDojoMember.instructor1 = instructor1;

			if(instructor2 != null)
				clonedDojoMember.instructor2 = instructor2;

			if(instructor3 != null)
				clonedDojoMember.instructor3 = instructor3;

			if(promotionFlags != null)
				clonedDojoMember.promotionFlags = promotionFlags.Clone();

			if(rank != null)
				clonedDojoMember.rank = rank;

			if(userAccount != null)
				clonedDojoMember.userAccount = userAccount.Duplicate();

			if(customer != null)
				clonedDojoMember.customer = customer;

			return clonedDojoMember;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoMember.
		/// </summary>
		/// <returns> A new DojoMember object reflecting the cloned DojoMember object.</returns>
		public DojoMember Copy()
		{
			DojoMember dojoMember = new DojoMember();
			CopyTo(dojoMember);
			return dojoMember;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoMember.
		/// </summary>
		/// <returns> A new DojoMember object reflecting the cloned DojoMember object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoMember from its children.</param>
		public DojoMember Copy(bool isolation)
		{
			DojoMember dojoMember = new DojoMember();
			CopyTo(dojoMember, isolation);
			return dojoMember;
		}

		/// <summary>
		/// Deep copies the current DojoMember to another instance of DojoMember.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoMember">The DojoMember to copy to.</param>
		public void CopyTo(DojoMember dojoMember)
		{
			CopyTo(dojoMember, false);
		}

		/// <summary>
		/// Deep copies the current DojoMember to another instance of DojoMember.
		/// </summary>
		/// <param name="DojoMember">The DojoMember to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoMember from its children.</param>
		public void CopyTo(DojoMember dojoMember, bool isolation)
		{
			dojoMember.iD = iD;
			dojoMember.isPlaceHolder = isPlaceHolder;
			dojoMember.isSynced = isSynced;
			if(privateContact != null)
			{
				if(isolation)
				{
					dojoMember.privateContact = privateContact.NewPlaceHolder();
				}
				else
				{
					dojoMember.privateContact = privateContact.Copy(false);
				}
			}
			if(emergencyContact != null)
			{
				if(isolation)
				{
					dojoMember.emergencyContact = emergencyContact.NewPlaceHolder();
				}
				else
				{
					dojoMember.emergencyContact = emergencyContact.Copy(false);
				}
			}
			if(publicContact != null)
			{
				if(isolation)
				{
					dojoMember.publicContact = publicContact.NewPlaceHolder();
				}
				else
				{
					dojoMember.publicContact = publicContact.Copy(false);
				}
			}
			if(parent != null)
			{
				if(isolation)
				{
					dojoMember.parent = parent.NewPlaceHolder();
				}
				else
				{
					dojoMember.parent = parent.Copy(false);
				}
			}
			if(root != null)
			{
				if(isolation)
				{
					dojoMember.root = root.NewPlaceHolder();
				}
				else
				{
					dojoMember.root = root.Copy(false);
				}
			}
			dojoMember.createDate = createDate;
			dojoMember.modifyDate = modifyDate;
			if(memberType != null)
			{
				if(isolation)
				{
					dojoMember.memberType = memberType.NewPlaceHolder();
				}
				else
				{
					dojoMember.memberType = memberType.Copy(false);
				}
			}
			if(memberTypeTemplate != null)
			{
				if(isolation)
				{
					dojoMember.memberTypeTemplate = memberTypeTemplate.NewPlaceHolder();
				}
				else
				{
					dojoMember.memberTypeTemplate = memberTypeTemplate.Copy(false);
				}
			}
			dojoMember.memberTypeTreeHash = memberTypeTreeHash;
			dojoMember.memberSince = memberSince;
			if(membership1 != null)
			{
				if(isolation)
				{
					dojoMember.membership1 = membership1.NewPlaceHolder();
				}
				else
				{
					dojoMember.membership1 = membership1.Copy(false);
				}
			}
			if(membership2 != null)
			{
				if(isolation)
				{
					dojoMember.membership2 = membership2.NewPlaceHolder();
				}
				else
				{
					dojoMember.membership2 = membership2.Copy(false);
				}
			}
			if(membership3 != null)
			{
				if(isolation)
				{
					dojoMember.membership3 = membership3.NewPlaceHolder();
				}
				else
				{
					dojoMember.membership3 = membership3.Copy(false);
				}
			}
			if(membership4 != null)
			{
				if(isolation)
				{
					dojoMember.membership4 = membership4.NewPlaceHolder();
				}
				else
				{
					dojoMember.membership4 = membership4.Copy(false);
				}
			}
			if(membership5 != null)
			{
				if(isolation)
				{
					dojoMember.membership5 = membership5.NewPlaceHolder();
				}
				else
				{
					dojoMember.membership5 = membership5.Copy(false);
				}
			}
			dojoMember.lastMembershipScan = lastMembershipScan;
			dojoMember.isPrimaryOrgActive = isPrimaryOrgActive;
			dojoMember.timeInRank = timeInRank;
			dojoMember.timeInMembership = timeInMembership;
			if(instructor1 != null)
			{
				if(isolation)
				{
					dojoMember.instructor1 = instructor1.NewPlaceHolder();
				}
				else
				{
					dojoMember.instructor1 = instructor1.Copy(false);
				}
			}
			if(instructor2 != null)
			{
				if(isolation)
				{
					dojoMember.instructor2 = instructor2.NewPlaceHolder();
				}
				else
				{
					dojoMember.instructor2 = instructor2.Copy(false);
				}
			}
			if(instructor3 != null)
			{
				if(isolation)
				{
					dojoMember.instructor3 = instructor3.NewPlaceHolder();
				}
				else
				{
					dojoMember.instructor3 = instructor3.Copy(false);
				}
			}
			dojoMember.lastSignin = lastSignin;
			dojoMember.lastAttendanceScan = lastAttendanceScan;
			dojoMember.attendanceMessage = attendanceMessage;
			dojoMember.hasWaiver = hasWaiver;
			dojoMember.isPromotable = isPromotable;
			if(promotionFlags != null)
			{
				if(isolation)
				{
					dojoMember.promotionFlags = promotionFlags.Copy(true);
				}
				else
				{
					dojoMember.promotionFlags = promotionFlags.Copy(false);
				}
			}
			dojoMember.isInstructor = isInstructor;
			if(rank != null)
			{
				if(isolation)
				{
					dojoMember.rank = rank.NewPlaceHolder();
				}
				else
				{
					dojoMember.rank = rank.Copy(false);
				}
			}
			dojoMember.rankDate = rankDate;
			if(userAccount != null)
			{
				if(isolation)
				{
					dojoMember.userAccount = userAccount.NewPlaceHolder();
				}
				else
				{
					dojoMember.userAccount = userAccount.Copy(false);
				}
			}
			dojoMember.isPastDue = isPastDue;
			dojoMember.lastDuesScan = lastDuesScan;
			if(customer != null)
			{
				if(isolation)
				{
					dojoMember.customer = customer.NewPlaceHolder();
				}
				else
				{
					dojoMember.customer = customer.Copy(false);
				}
			}
		}

		public DojoMember NewPlaceHolder()
		{
			DojoMember dojoMember = new DojoMember();
			dojoMember.iD = iD;
			dojoMember.isPlaceHolder = true;
			dojoMember.isSynced = true;
			return dojoMember;
		}

		public static DojoMember NewPlaceHolder(int iD)
		{
			DojoMember dojoMember = new DojoMember();
			dojoMember.iD = iD;
			dojoMember.isPlaceHolder = true;
			dojoMember.isSynced = true;
			return dojoMember;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoMember dojoMember = (DojoMember) obj;
			return this.iD - dojoMember.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoMember dojoMember)
		{
			return this.iD - dojoMember.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---

        #region Internals for Template Processing

        /// <summary>
        /// This is for internal template processing only.
        /// </summary>
        internal DojoMemberCollection subMembers;

        /// <summary>
        /// This is for internal template processing only.
        /// </summary>
        internal string treeHash;

        /// <summary>
        /// This is for internal template processing only.
        /// </summary>
        internal DojoMember treeRoot;

        #endregion

        public DojoMembershipCollection CollateMemberships()
        {
            DojoMembershipCollection memberships = new DojoMembershipCollection(5);
            if (Membership1 != null) memberships.Add(Membership1);
            if (Membership2 != null) memberships.Add(Membership2);
            if (Membership3 != null) memberships.Add(Membership3);
            if (Membership4 != null) memberships.Add(Membership4);
            if (Membership5 != null) memberships.Add(Membership5);
            return memberships;
        }

        public DateTime TestEligibilityDate
		{
			get { return RankDate.Add(Rank.PromotionTimeFromLastTest); }
		}

		public TimeSpan TestEligibilityHoursBalance
		{
			get { return TimeInRank.Subtract(Rank.PromotionTimeInRank); }
		}
																																																																																																																																																																																																																																																																																																					
		public bool WarningFlag
		{
			get
			{
				EnsurePreLoad();

				return PrivateContact.IsBadAddress |
					this.IsPastDue;
			}
		}

		public void AddMemoMessage(string message)
		{
			if(this.PrivateContact.MemoText != "")
			{
				this.PrivateContact.MemoText += "\r\n";
			}

			this.PrivateContact.MemoText += message;
		}

        public string IconPrimaryOrgActive
        {
            get
            {
                if (IsPrimaryOrgActive)
                {
                    return "flag_blue";
                }
                else
                {
                    return "flag_red";
                }
            }
        }

		//--- End Custom Code ---
	}
}
