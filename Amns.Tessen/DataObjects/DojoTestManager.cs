/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.People;
using Amns.GreyFox.Security;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoTestFlags : int { Location,
				ListMemberType1,
				ListMemberType2,
				ListMemberType3,
				PanelChief,
				PanelChiefPrivateContact,
				PanelChiefEmergencyContact,
				PanelChiefPublicContact,
				PanelChiefParent,
				PanelChiefRoot,
				PanelChiefMemberType,
				PanelChiefMemberTypeTemplate,
				PanelChiefMembership1,
				PanelChiefMembership2,
				PanelChiefMembership3,
				PanelChiefMembership4,
				PanelChiefMembership5,
				PanelChiefInstructor1,
				PanelChiefInstructor2,
				PanelChiefInstructor3,
				PanelChiefPromotionFlags,
				PanelChiefRank,
				PanelChiefUserAccount,
				PanelChiefCustomer,
				Status,
				StatusOnFinalized,
				StatusOnCompleted,
				ActiveTestList,
				ActiveTestListTest,
				ActiveTestListStatus,
				ActiveTestListEditor,
				ActiveTestListCandidates,
				Item,
				ItemParentItem,
				ItemPurchaseVendor,
				ItemPurchaseAccount,
				ItemInventoryAccount,
				ItemTax,
				ItemSalesIncomeAccount,
				ItemWebRelatedItems};

	#endregion

	/// <summary>
	/// Datamanager for DojoTest objects.
	/// </summary>
	public class DojoTestManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_Tests";
		public static readonly string LocationTable = "kitTessen_Locations";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoTestID",
			"Name",
			"Description",
			"TestDate",
			"LocationID",
			"ListMemberType1ID",
			"ListMemberType2ID",
			"ListMemberType3ID",
			"PanelChiefID",
			"StatusID",
			"ActiveTestListID",
			"ItemID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoTestID", "LONG", "-1" },
			{ "Name", "TEXT(75)", "" },
			{ "Description", "MEMO", "" },
			{ "TestDate", "DATETIME", "" },
			{ "LocationID", "LONG", "null" },
			{ "ListMemberType1ID", "LONG", "null" },
			{ "ListMemberType2ID", "LONG", "null" },
			{ "ListMemberType3ID", "LONG", "null" },
			{ "PanelChiefID", "LONG", "null" },
			{ "StatusID", "LONG", "null" },
			{ "ActiveTestListID", "LONG", "null" },
			{ "ItemID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoTestManager()
		{
		}

		public DojoTestManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoTestManager.isInitialized)
			{
				DojoTestManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoTest into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoTest">The DojoTest to insert into the database.</param>
		internal static int _insert(DojoTest dojoTest)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_Tests " +
				"(" +
				"Name," +
				"Description," +
				"TestDate," +
				"LocationID," +
				"ListMemberType1ID," +
				"ListMemberType2ID," +
				"ListMemberType3ID," +
				"PanelChiefID," +
				"StatusID," +
				"ActiveTestListID," +
				"ItemID) VALUES (" +
				"@Name," +
				"@Description," +
				"@TestDate," +
				"@LocationID," +
				"@ListMemberType1ID," +
				"@ListMemberType2ID," +
				"@ListMemberType3ID," +
				"@PanelChiefID," +
				"@StatusID," +
				"@ActiveTestListID," +
				"@ItemID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoTest);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoTest);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}

			// Save child relationships for PanelMembers.
			if(dojoTest.panelMembers != null)
			{
				dbCommand = database.GetSqlStringCommand("INSERT INTO kitTessen_TestsChildren_PanelMembers " +
					"(DojoTestID, DojoMemberID)" + 
					" VALUES (@DojoTestID, @DojoMemberID);");
				addParameter(database, dbCommand, "@DojoTestID", DbType.Int32);
				addParameter(database, dbCommand, "@DojoMemberID", DbType.Int32);
				foreach(DojoMember item in dojoTest.panelMembers)
				{
					dbCommand.Parameters["@DojoTestID"].Value = id;
					dbCommand.Parameters["@DojoMemberID"].Value = item.ID;
					database.ExecuteNonQuery(dbCommand);
				}
			}
			// Store dojoTest in cache.
			if(cacheEnabled) cacheStore(dojoTest);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoTest dojoTest)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_Tests SET Name=@Name," +
				"Description=@Description," +
				"TestDate=@TestDate," +
				"LocationID=@LocationID," +
				"ListMemberType1ID=@ListMemberType1ID," +
				"ListMemberType2ID=@ListMemberType2ID," +
				"ListMemberType3ID=@ListMemberType3ID," +
				"PanelChiefID=@PanelChiefID," +
				"StatusID=@StatusID," +
				"ActiveTestListID=@ActiveTestListID," +
				"ItemID=@ItemID WHERE DojoTestID=@DojoTestID;");

			fillParameters(database, dbCommand, dojoTest);
			database.AddInParameter(dbCommand, "DojoTestID", DbType.Int32, dojoTest.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			if(dojoTest.panelMembers != null)
			{

				// Delete child relationships for PanelMembers.
				dbCommand = database.GetSqlStringCommand("DELETE  FROM kitTessen_TestsChildren_PanelMembers WHERE DojoTestID=@DojoTestID;");
				database.AddInParameter(dbCommand, "@DojoTestID", DbType.Int32, dojoTest.iD);
				database.ExecuteNonQuery(dbCommand);

				// Save child relationships for PanelMembers.
				dbCommand = database.GetSqlStringCommand("INSERT INTO kitTessen_TestsChildren_PanelMembers (DojoTestID, DojoMemberID) VALUES (@DojoTestID, @DojoMemberID);");
				database.AddInParameter(dbCommand, "@DojoTestID", DbType.Int32, dojoTest.iD);
				database.AddInParameter(dbCommand, "@DojoMemberID", DbType.Int32);
				foreach(DojoMember dojoMember in dojoTest.panelMembers)
				{
					dbCommand.Parameters["@DojoMemberID"].Value = dojoMember.ID;
					database.ExecuteNonQuery(dbCommand);
				}
			}

			// Store dojoTest in cache.
			if (cacheEnabled) cacheStore(dojoTest);

			return dojoTest.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoTest dojoTest)
		{
			#region Default

			addParameter(database, dbCommand, "@Name", DbType.String, dojoTest.name);
			addParameter(database, dbCommand, "@Description", DbType.String, dojoTest.description);
			addParameter(database, dbCommand, "@TestDate", DbType.Date, dojoTest.testDate);
			if(dojoTest.location == null)
			{
				addParameter(database, dbCommand, "@LocationID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@LocationID", DbType.Int32, dojoTest.location.ID);
			}

			#endregion

			#region List Generator

			if(dojoTest.listMemberType1 == null)
			{
				addParameter(database, dbCommand, "@ListMemberType1ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ListMemberType1ID", DbType.Int32, dojoTest.listMemberType1.ID);
			}
			if(dojoTest.listMemberType2 == null)
			{
				addParameter(database, dbCommand, "@ListMemberType2ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ListMemberType2ID", DbType.Int32, dojoTest.listMemberType2.ID);
			}
			if(dojoTest.listMemberType3 == null)
			{
				addParameter(database, dbCommand, "@ListMemberType3ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ListMemberType3ID", DbType.Int32, dojoTest.listMemberType3.ID);
			}

			#endregion

			#region Administration

			if(dojoTest.panelChief == null)
			{
				addParameter(database, dbCommand, "@PanelChiefID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@PanelChiefID", DbType.Int32, dojoTest.panelChief.ID);
			}

			#endregion

			#region System

			if(dojoTest.status == null)
			{
				addParameter(database, dbCommand, "@StatusID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@StatusID", DbType.Int32, dojoTest.status.ID);
			}
			if(dojoTest.activeTestList == null)
			{
				addParameter(database, dbCommand, "@ActiveTestListID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ActiveTestListID", DbType.Int32, dojoTest.activeTestList.ID);
			}

			#endregion

			#region Rappahanock

			if(dojoTest.item == null)
			{
				addParameter(database, dbCommand, "@ItemID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ItemID", DbType.Int32, dojoTest.item.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoTest dojoTest)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoTest.iD);
				if(cachedObject != null)
				{
					((DojoTest)cachedObject).CopyTo(dojoTest, true);
					return dojoTest.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_Tests WHERE DojoTestID=");
			query.Append(dojoTest.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoTestID '{0}'.", 
					dojoTest.iD)));
			}

			FillFromReader(dojoTest, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoTest in cache.
			if(cacheEnabled) cacheStore(dojoTest);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoTestCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoTestCollection GetCollection(string whereClause, string sortClause, params DojoTestFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoTestCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoTestFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoTestCollection dojoTestCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoTest.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int locationOffset = -1;
			int listMemberType1Offset = -1;
			int listMemberType2Offset = -1;
			int listMemberType3Offset = -1;
			int panelChiefOffset = -1;
			int panelChiefPrivateContactOffset = -1;
			int panelChiefEmergencyContactOffset = -1;
			int panelChiefPublicContactOffset = -1;
			int panelChiefParentOffset = -1;
			int panelChiefRootOffset = -1;
			int panelChiefMemberTypeOffset = -1;
			int panelChiefMemberTypeTemplateOffset = -1;
			int panelChiefMembership1Offset = -1;
			int panelChiefMembership2Offset = -1;
			int panelChiefMembership3Offset = -1;
			int panelChiefMembership4Offset = -1;
			int panelChiefMembership5Offset = -1;
			int panelChiefInstructor1Offset = -1;
			int panelChiefInstructor2Offset = -1;
			int panelChiefInstructor3Offset = -1;
			int panelChiefRankOffset = -1;
			int panelChiefUserAccountOffset = -1;
			int panelChiefCustomerOffset = -1;
			int statusOffset = -1;
			int statusOnFinalizedOffset = -1;
			int statusOnCompletedOffset = -1;
			int activeTestListOffset = -1;
			int activeTestListTestOffset = -1;
			int activeTestListStatusOffset = -1;
			int activeTestListEditorOffset = -1;
			int itemOffset = -1;
			int itemParentItemOffset = -1;
			int itemPurchaseVendorOffset = -1;
			int itemPurchaseAccountOffset = -1;
			int itemInventoryAccountOffset = -1;
			int itemTaxOffset = -1;
			int itemSalesIncomeAccountOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoTestFlags.Location:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Location.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							locationOffset = innerJoinOffset;
							innerJoinOffset = locationOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ListMemberType1:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ListMemberType1.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							listMemberType1Offset = innerJoinOffset;
							innerJoinOffset = listMemberType1Offset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ListMemberType2:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ListMemberType2.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							listMemberType2Offset = innerJoinOffset;
							innerJoinOffset = listMemberType2Offset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ListMemberType3:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ListMemberType3.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							listMemberType3Offset = innerJoinOffset;
							innerJoinOffset = listMemberType3Offset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChief:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefOffset = innerJoinOffset;
							innerJoinOffset = panelChiefOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = panelChiefPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefEmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefEmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = panelChiefEmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefPublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefPublicContactOffset = innerJoinOffset;
							innerJoinOffset = panelChiefPublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefParent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefParentOffset = innerJoinOffset;
							innerJoinOffset = panelChiefParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefRoot:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefRootOffset = innerJoinOffset;
							innerJoinOffset = panelChiefRootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = panelChiefMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = panelChiefMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefMembership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefMembership1Offset = innerJoinOffset;
							innerJoinOffset = panelChiefMembership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefMembership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefMembership2Offset = innerJoinOffset;
							innerJoinOffset = panelChiefMembership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefMembership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefMembership3Offset = innerJoinOffset;
							innerJoinOffset = panelChiefMembership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefMembership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefMembership4Offset = innerJoinOffset;
							innerJoinOffset = panelChiefMembership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefMembership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefMembership5Offset = innerJoinOffset;
							innerJoinOffset = panelChiefMembership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefInstructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefInstructor1Offset = innerJoinOffset;
							innerJoinOffset = panelChiefInstructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefInstructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefInstructor2Offset = innerJoinOffset;
							innerJoinOffset = panelChiefInstructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefInstructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefInstructor3Offset = innerJoinOffset;
							innerJoinOffset = panelChiefInstructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefRankOffset = innerJoinOffset;
							innerJoinOffset = panelChiefRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefUserAccountOffset = innerJoinOffset;
							innerJoinOffset = panelChiefUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.PanelChiefCustomer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PanelChief_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							panelChiefCustomerOffset = innerJoinOffset;
							innerJoinOffset = panelChiefCustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.Status:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Status.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							statusOffset = innerJoinOffset;
							innerJoinOffset = statusOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.StatusOnFinalized:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Status_OnFinalized.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							statusOnFinalizedOffset = innerJoinOffset;
							innerJoinOffset = statusOnFinalizedOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.StatusOnCompleted:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Status_OnCompleted.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							statusOnCompletedOffset = innerJoinOffset;
							innerJoinOffset = statusOnCompletedOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ActiveTestList:
							for(int i = 0; i <= DojoTestListManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ActiveTestList.");
								query.Append(DojoTestListManager.InnerJoinFields[i]);
								query.Append(",");
							}
							activeTestListOffset = innerJoinOffset;
							innerJoinOffset = activeTestListOffset + DojoTestListManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ActiveTestListTest:
							for(int i = 0; i <= DojoTestManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ActiveTestList_Test.");
								query.Append(DojoTestManager.InnerJoinFields[i]);
								query.Append(",");
							}
							activeTestListTestOffset = innerJoinOffset;
							innerJoinOffset = activeTestListTestOffset + DojoTestManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ActiveTestListStatus:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ActiveTestList_Status.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							activeTestListStatusOffset = innerJoinOffset;
							innerJoinOffset = activeTestListStatusOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ActiveTestListEditor:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ActiveTestList_Editor.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							activeTestListEditorOffset = innerJoinOffset;
							innerJoinOffset = activeTestListEditorOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.Item:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemOffset = innerJoinOffset;
							innerJoinOffset = itemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ItemParentItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_ParentItem.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemParentItemOffset = innerJoinOffset;
							innerJoinOffset = itemParentItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ItemPurchaseVendor:
							for(int i = 0; i <= RHVendorManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_PurchaseVendor.");
								query.Append(RHVendorManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemPurchaseVendorOffset = innerJoinOffset;
							innerJoinOffset = itemPurchaseVendorOffset + RHVendorManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ItemPurchaseAccount:
							for(int i = 0; i <= RHAccountManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_PurchaseAccount.");
								query.Append(RHAccountManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemPurchaseAccountOffset = innerJoinOffset;
							innerJoinOffset = itemPurchaseAccountOffset + RHAccountManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ItemInventoryAccount:
							for(int i = 0; i <= RHAccountManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_InventoryAccount.");
								query.Append(RHAccountManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemInventoryAccountOffset = innerJoinOffset;
							innerJoinOffset = itemInventoryAccountOffset + RHAccountManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ItemTax:
							for(int i = 0; i <= RHTaxTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_Tax.");
								query.Append(RHTaxTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemTaxOffset = innerJoinOffset;
							innerJoinOffset = itemTaxOffset + RHTaxTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestFlags.ItemSalesIncomeAccount:
							for(int i = 0; i <= RHAccountManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_SalesIncomeAccount.");
								query.Append(RHAccountManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemSalesIncomeAccountOffset = innerJoinOffset;
							innerJoinOffset = itemSalesIncomeAccountOffset + RHAccountManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_Tests AS DojoTest");
			}
			else
			{
				query.Append(" FROM kitTessen_Tests AS DojoTest");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoTestFlags.Location:
							query.Append(" LEFT JOIN kitTessen_Locations AS Location ON DojoTest.LocationID = Location.GreyFoxContactID)");
							break;
						case DojoTestFlags.ListMemberType1:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS ListMemberType1 ON DojoTest.ListMemberType1ID = ListMemberType1.DojoMemberTypeID)");
							break;
						case DojoTestFlags.ListMemberType2:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS ListMemberType2 ON DojoTest.ListMemberType2ID = ListMemberType2.DojoMemberTypeID)");
							break;
						case DojoTestFlags.ListMemberType3:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS ListMemberType3 ON DojoTest.ListMemberType3ID = ListMemberType3.DojoMemberTypeID)");
							break;
						case DojoTestFlags.PanelChief:
							query.Append(" LEFT JOIN kitTessen_Members AS PanelChief ON DojoTest.PanelChiefID = PanelChief.DojoMemberID)");
							break;
						case DojoTestFlags.PanelChiefPrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS PanelChief_PrivateContact ON PanelChief.PrivateContactID = PanelChief_PrivateContact.GreyFoxContactID)");
							break;
						case DojoTestFlags.PanelChiefEmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS PanelChief_EmergencyContact ON PanelChief.EmergencyContactID = PanelChief_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoTestFlags.PanelChiefPublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS PanelChief_PublicContact ON PanelChief.PublicContactID = PanelChief_PublicContact.GreyFoxContactID)");
							break;
						case DojoTestFlags.PanelChiefParent:
							query.Append(" LEFT JOIN kitTessen_Members AS PanelChief_Parent ON PanelChief.ParentID = PanelChief_Parent.DojoMemberID)");
							break;
						case DojoTestFlags.PanelChiefRoot:
							query.Append(" LEFT JOIN kitTessen_Members AS PanelChief_Root ON PanelChief.RootID = PanelChief_Root.DojoMemberID)");
							break;
						case DojoTestFlags.PanelChiefMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS PanelChief_MemberType ON PanelChief.MemberTypeID = PanelChief_MemberType.DojoMemberTypeID)");
							break;
						case DojoTestFlags.PanelChiefMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS PanelChief_MemberTypeTemplate ON PanelChief.MemberTypeTemplateID = PanelChief_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoTestFlags.PanelChiefMembership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS PanelChief_Membership1 ON PanelChief.Membership1ID = PanelChief_Membership1.DojoMembershipID)");
							break;
						case DojoTestFlags.PanelChiefMembership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS PanelChief_Membership2 ON PanelChief.Membership2ID = PanelChief_Membership2.DojoMembershipID)");
							break;
						case DojoTestFlags.PanelChiefMembership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS PanelChief_Membership3 ON PanelChief.Membership3ID = PanelChief_Membership3.DojoMembershipID)");
							break;
						case DojoTestFlags.PanelChiefMembership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS PanelChief_Membership4 ON PanelChief.Membership4ID = PanelChief_Membership4.DojoMembershipID)");
							break;
						case DojoTestFlags.PanelChiefMembership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS PanelChief_Membership5 ON PanelChief.Membership5ID = PanelChief_Membership5.DojoMembershipID)");
							break;
						case DojoTestFlags.PanelChiefInstructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS PanelChief_Instructor1 ON PanelChief.Instructor1ID = PanelChief_Instructor1.DojoMemberID)");
							break;
						case DojoTestFlags.PanelChiefInstructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS PanelChief_Instructor2 ON PanelChief.Instructor2ID = PanelChief_Instructor2.DojoMemberID)");
							break;
						case DojoTestFlags.PanelChiefInstructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS PanelChief_Instructor3 ON PanelChief.Instructor3ID = PanelChief_Instructor3.DojoMemberID)");
							break;
						case DojoTestFlags.PanelChiefRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS PanelChief_Rank ON PanelChief.RankID = PanelChief_Rank.DojoRankID)");
							break;
						case DojoTestFlags.PanelChiefUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS PanelChief_UserAccount ON PanelChief.UserAccountID = PanelChief_UserAccount.GreyFoxUserID)");
							break;
						case DojoTestFlags.PanelChiefCustomer:
							query.Append(" LEFT JOIN RH_Customers AS PanelChief_Customer ON PanelChief.CustomerID = PanelChief_Customer.RHCustomerID)");
							break;
						case DojoTestFlags.Status:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS Status ON DojoTest.StatusID = Status.DojoTestListStatusID)");
							break;
						case DojoTestFlags.StatusOnFinalized:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS Status_OnFinalized ON Status.OnFinalizedID = Status_OnFinalized.DojoTestListStatusID)");
							break;
						case DojoTestFlags.StatusOnCompleted:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS Status_OnCompleted ON Status.OnCompletedID = Status_OnCompleted.DojoTestListStatusID)");
							break;
						case DojoTestFlags.ActiveTestList:
							query.Append(" LEFT JOIN kitTessen_TestLists AS ActiveTestList ON DojoTest.ActiveTestListID = ActiveTestList.DojoTestListID)");
							break;
						case DojoTestFlags.ActiveTestListTest:
							query.Append(" LEFT JOIN kitTessen_Tests AS ActiveTestList_Test ON ActiveTestList.TestID = ActiveTestList_Test.DojoTestID)");
							break;
						case DojoTestFlags.ActiveTestListStatus:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS ActiveTestList_Status ON ActiveTestList.StatusID = ActiveTestList_Status.DojoTestListStatusID)");
							break;
						case DojoTestFlags.ActiveTestListEditor:
							query.Append(" LEFT JOIN kitTessen_Members AS ActiveTestList_Editor ON ActiveTestList.EditorID = ActiveTestList_Editor.DojoMemberID)");
							break;
						case DojoTestFlags.Item:
							query.Append(" LEFT JOIN RH_Items AS Item ON DojoTest.ItemID = Item.RHItemID)");
							break;
						case DojoTestFlags.ItemParentItem:
							query.Append(" LEFT JOIN RH_Items AS Item_ParentItem ON Item.ParentItemID = Item_ParentItem.RHItemID)");
							break;
						case DojoTestFlags.ItemPurchaseVendor:
							query.Append(" LEFT JOIN RH_Vendors AS Item_PurchaseVendor ON Item.PurchaseVendorID = Item_PurchaseVendor.RHVendorID)");
							break;
						case DojoTestFlags.ItemPurchaseAccount:
							query.Append(" LEFT JOIN RH_Accounts AS Item_PurchaseAccount ON Item.PurchaseAccountID = Item_PurchaseAccount.RHAccountID)");
							break;
						case DojoTestFlags.ItemInventoryAccount:
							query.Append(" LEFT JOIN RH_Accounts AS Item_InventoryAccount ON Item.InventoryAccountID = Item_InventoryAccount.RHAccountID)");
							break;
						case DojoTestFlags.ItemTax:
							query.Append(" LEFT JOIN RH_TaxTypes AS Item_Tax ON Item.TaxID = Item_Tax.RHTaxTypeID)");
							break;
						case DojoTestFlags.ItemSalesIncomeAccount:
							query.Append(" LEFT JOIN RH_Accounts AS Item_SalesIncomeAccount ON Item.SalesIncomeAccountID = Item_SalesIncomeAccount.RHAccountID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoTestCollection = new DojoTestCollection();

			while(r.Read())
			{
				DojoTest dojoTest = ParseFromReader(r, 0, 1);

				// Fill Location
				if(locationOffset != -1 && !r.IsDBNull(locationOffset))
					GreyFoxContactManager.FillFromReader(dojoTest.location, "kitTessen_Locations", r, locationOffset, locationOffset+1);

				// Fill ListMemberType1
				if(listMemberType1Offset != -1 && !r.IsDBNull(listMemberType1Offset))
					DojoMemberTypeManager.FillFromReader(dojoTest.listMemberType1, r, listMemberType1Offset, listMemberType1Offset+1);

				// Fill ListMemberType2
				if(listMemberType2Offset != -1 && !r.IsDBNull(listMemberType2Offset))
					DojoMemberTypeManager.FillFromReader(dojoTest.listMemberType2, r, listMemberType2Offset, listMemberType2Offset+1);

				// Fill ListMemberType3
				if(listMemberType3Offset != -1 && !r.IsDBNull(listMemberType3Offset))
					DojoMemberTypeManager.FillFromReader(dojoTest.listMemberType3, r, listMemberType3Offset, listMemberType3Offset+1);

				// Fill PanelChief
				if(panelChiefOffset != -1 && !r.IsDBNull(panelChiefOffset))
				{
					DojoMemberManager.FillFromReader(dojoTest.panelChief, r, panelChiefOffset, panelChiefOffset+1);

					// Fill 
					if(panelChiefPrivateContactOffset != -1 && !r.IsDBNull(panelChiefPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoTest.panelChief.PrivateContact, "kitTessen_Members_PrivateContacts", r, panelChiefPrivateContactOffset, panelChiefPrivateContactOffset+1);

					// Fill 
					if(panelChiefEmergencyContactOffset != -1 && !r.IsDBNull(panelChiefEmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoTest.panelChief.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, panelChiefEmergencyContactOffset, panelChiefEmergencyContactOffset+1);

					// Fill 
					if(panelChiefPublicContactOffset != -1 && !r.IsDBNull(panelChiefPublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoTest.panelChief.PublicContact, "kitTessen_Members_PublicContacts", r, panelChiefPublicContactOffset, panelChiefPublicContactOffset+1);

					// Fill 
					if(panelChiefParentOffset != -1 && !r.IsDBNull(panelChiefParentOffset))
						DojoMemberManager.FillFromReader(dojoTest.panelChief.Parent, r, panelChiefParentOffset, panelChiefParentOffset+1);

					// Fill 
					if(panelChiefRootOffset != -1 && !r.IsDBNull(panelChiefRootOffset))
						DojoMemberManager.FillFromReader(dojoTest.panelChief.Root, r, panelChiefRootOffset, panelChiefRootOffset+1);

					// Fill 
					if(panelChiefMemberTypeOffset != -1 && !r.IsDBNull(panelChiefMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoTest.panelChief.MemberType, r, panelChiefMemberTypeOffset, panelChiefMemberTypeOffset+1);

					// Fill 
					if(panelChiefMemberTypeTemplateOffset != -1 && !r.IsDBNull(panelChiefMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoTest.panelChief.MemberTypeTemplate, r, panelChiefMemberTypeTemplateOffset, panelChiefMemberTypeTemplateOffset+1);

					// Fill 
					if(panelChiefMembership1Offset != -1 && !r.IsDBNull(panelChiefMembership1Offset))
						DojoMembershipManager.FillFromReader(dojoTest.panelChief.Membership1, r, panelChiefMembership1Offset, panelChiefMembership1Offset+1);

					// Fill 
					if(panelChiefMembership2Offset != -1 && !r.IsDBNull(panelChiefMembership2Offset))
						DojoMembershipManager.FillFromReader(dojoTest.panelChief.Membership2, r, panelChiefMembership2Offset, panelChiefMembership2Offset+1);

					// Fill 
					if(panelChiefMembership3Offset != -1 && !r.IsDBNull(panelChiefMembership3Offset))
						DojoMembershipManager.FillFromReader(dojoTest.panelChief.Membership3, r, panelChiefMembership3Offset, panelChiefMembership3Offset+1);

					// Fill 
					if(panelChiefMembership4Offset != -1 && !r.IsDBNull(panelChiefMembership4Offset))
						DojoMembershipManager.FillFromReader(dojoTest.panelChief.Membership4, r, panelChiefMembership4Offset, panelChiefMembership4Offset+1);

					// Fill 
					if(panelChiefMembership5Offset != -1 && !r.IsDBNull(panelChiefMembership5Offset))
						DojoMembershipManager.FillFromReader(dojoTest.panelChief.Membership5, r, panelChiefMembership5Offset, panelChiefMembership5Offset+1);

					// Fill 
					if(panelChiefInstructor1Offset != -1 && !r.IsDBNull(panelChiefInstructor1Offset))
						DojoMemberManager.FillFromReader(dojoTest.panelChief.Instructor1, r, panelChiefInstructor1Offset, panelChiefInstructor1Offset+1);

					// Fill 
					if(panelChiefInstructor2Offset != -1 && !r.IsDBNull(panelChiefInstructor2Offset))
						DojoMemberManager.FillFromReader(dojoTest.panelChief.Instructor2, r, panelChiefInstructor2Offset, panelChiefInstructor2Offset+1);

					// Fill 
					if(panelChiefInstructor3Offset != -1 && !r.IsDBNull(panelChiefInstructor3Offset))
						DojoMemberManager.FillFromReader(dojoTest.panelChief.Instructor3, r, panelChiefInstructor3Offset, panelChiefInstructor3Offset+1);

					// Fill 
					if(panelChiefRankOffset != -1 && !r.IsDBNull(panelChiefRankOffset))
						DojoRankManager.FillFromReader(dojoTest.panelChief.Rank, r, panelChiefRankOffset, panelChiefRankOffset+1);

					// Fill 
					if(panelChiefUserAccountOffset != -1 && !r.IsDBNull(panelChiefUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoTest.panelChief.UserAccount, r, panelChiefUserAccountOffset, panelChiefUserAccountOffset+1);

					// Fill 
					if(panelChiefCustomerOffset != -1 && !r.IsDBNull(panelChiefCustomerOffset))
						RHCustomerManager.FillFromReader(dojoTest.panelChief.Customer, r, panelChiefCustomerOffset, panelChiefCustomerOffset+1);

				}

				// Fill Status
				if(statusOffset != -1 && !r.IsDBNull(statusOffset))
				{
					DojoTestListStatusManager.FillFromReader(dojoTest.status, r, statusOffset, statusOffset+1);

					// Fill 
					if(statusOnFinalizedOffset != -1 && !r.IsDBNull(statusOnFinalizedOffset))
						DojoTestListStatusManager.FillFromReader(dojoTest.status.OnFinalized, r, statusOnFinalizedOffset, statusOnFinalizedOffset+1);

					// Fill 
					if(statusOnCompletedOffset != -1 && !r.IsDBNull(statusOnCompletedOffset))
						DojoTestListStatusManager.FillFromReader(dojoTest.status.OnCompleted, r, statusOnCompletedOffset, statusOnCompletedOffset+1);

				}

				// Fill ActiveTestList
				if(activeTestListOffset != -1 && !r.IsDBNull(activeTestListOffset))
				{
					DojoTestListManager.FillFromReader(dojoTest.activeTestList, r, activeTestListOffset, activeTestListOffset+1);

					// Fill Test
					if(activeTestListTestOffset != -1 && !r.IsDBNull(activeTestListTestOffset))
						DojoTestManager.FillFromReader(dojoTest.activeTestList.Test, r, activeTestListTestOffset, activeTestListTestOffset+1);

					// Fill 
					if(activeTestListStatusOffset != -1 && !r.IsDBNull(activeTestListStatusOffset))
						DojoTestListStatusManager.FillFromReader(dojoTest.activeTestList.Status, r, activeTestListStatusOffset, activeTestListStatusOffset+1);

					// Fill 
					if(activeTestListEditorOffset != -1 && !r.IsDBNull(activeTestListEditorOffset))
						DojoMemberManager.FillFromReader(dojoTest.activeTestList.Editor, r, activeTestListEditorOffset, activeTestListEditorOffset+1);

				}

				// Fill Item
				if(itemOffset != -1 && !r.IsDBNull(itemOffset))
				{
					RHItemManager.FillFromReader(dojoTest.item, r, itemOffset, itemOffset+1);

					// Fill 
					if(itemParentItemOffset != -1 && !r.IsDBNull(itemParentItemOffset))
						RHItemManager.FillFromReader(dojoTest.item.ParentItem, r, itemParentItemOffset, itemParentItemOffset+1);

					// Fill Vendor
					if(itemPurchaseVendorOffset != -1 && !r.IsDBNull(itemPurchaseVendorOffset))
						RHVendorManager.FillFromReader(dojoTest.item.PurchaseVendor, r, itemPurchaseVendorOffset, itemPurchaseVendorOffset+1);

					// Fill Purchase Account
					if(itemPurchaseAccountOffset != -1 && !r.IsDBNull(itemPurchaseAccountOffset))
						RHAccountManager.FillFromReader(dojoTest.item.PurchaseAccount, r, itemPurchaseAccountOffset, itemPurchaseAccountOffset+1);

					// Fill Asset Account
					if(itemInventoryAccountOffset != -1 && !r.IsDBNull(itemInventoryAccountOffset))
						RHAccountManager.FillFromReader(dojoTest.item.InventoryAccount, r, itemInventoryAccountOffset, itemInventoryAccountOffset+1);

					// Fill 
					if(itemTaxOffset != -1 && !r.IsDBNull(itemTaxOffset))
						RHTaxTypeManager.FillFromReader(dojoTest.item.Tax, r, itemTaxOffset, itemTaxOffset+1);

					// Fill 
					if(itemSalesIncomeAccountOffset != -1 && !r.IsDBNull(itemSalesIncomeAccountOffset))
						RHAccountManager.FillFromReader(dojoTest.item.SalesIncomeAccount, r, itemSalesIncomeAccountOffset, itemSalesIncomeAccountOffset+1);

				}

				dojoTestCollection.Add(dojoTest);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoTestCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoTest ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoTest dojoTest = new DojoTest();
			FillFromReader(dojoTest, r, idOffset, dataOffset);
			return dojoTest;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoTest dojoTest, IDataReader r, int idOffset, int dataOffset)
		{
			dojoTest.iD = r.GetInt32(idOffset);
			dojoTest.isSynced = true;
			dojoTest.isPlaceHolder = false;

			dojoTest.name = r.GetString(0+dataOffset);
			dojoTest.description = r.GetString(1+dataOffset);
			dojoTest.testDate = r.GetDateTime(2+dataOffset);
			if(!r.IsDBNull(3+dataOffset) && r.GetInt32(3+dataOffset) > 0)
			{
				dojoTest.location = GreyFoxContact.NewPlaceHolder("kitTessen_Locations", r.GetInt32(3+dataOffset));
			}
			if(!r.IsDBNull(4+dataOffset) && r.GetInt32(4+dataOffset) > 0)
			{
				dojoTest.listMemberType1 = DojoMemberType.NewPlaceHolder(r.GetInt32(4+dataOffset));
			}
			if(!r.IsDBNull(5+dataOffset) && r.GetInt32(5+dataOffset) > 0)
			{
				dojoTest.listMemberType2 = DojoMemberType.NewPlaceHolder(r.GetInt32(5+dataOffset));
			}
			if(!r.IsDBNull(6+dataOffset) && r.GetInt32(6+dataOffset) > 0)
			{
				dojoTest.listMemberType3 = DojoMemberType.NewPlaceHolder(r.GetInt32(6+dataOffset));
			}
			if(!r.IsDBNull(7+dataOffset) && r.GetInt32(7+dataOffset) > 0)
			{
				dojoTest.panelChief = DojoMember.NewPlaceHolder(r.GetInt32(7+dataOffset));
			}
			if(!r.IsDBNull(8+dataOffset) && r.GetInt32(8+dataOffset) > 0)
			{
				dojoTest.status = DojoTestListStatus.NewPlaceHolder(r.GetInt32(8+dataOffset));
			}
			if(!r.IsDBNull(9+dataOffset) && r.GetInt32(9+dataOffset) > 0)
			{
				dojoTest.activeTestList = DojoTestList.NewPlaceHolder(r.GetInt32(9+dataOffset));
			}
			if(!r.IsDBNull(10+dataOffset) && r.GetInt32(10+dataOffset) > 0)
			{
				dojoTest.item = RHItem.NewPlaceHolder(r.GetInt32(10+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		public static void FillPanelMembers(DojoTest dojoTest)
		{
			StringBuilder s;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			s = new StringBuilder("SELECT DojoMemberID FROM kitTessen_TestsChildren_PanelMembers ");
			s.Append("WHERE DojoTestID=");
			s.Append(dojoTest.iD);
			s.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(s.ToString());
			r = database.ExecuteReader(dbCommand);

			DojoMemberCollection panelMembers;
			if(dojoTest.panelMembers != null)
			{
				panelMembers = dojoTest.panelMembers;
				panelMembers.Clear();
			}
			else
			{
				panelMembers = new DojoMemberCollection();
				dojoTest.panelMembers = panelMembers;
			}

			while(r.Read())
				panelMembers.Add(DojoMember.NewPlaceHolder(r.GetInt32(0)));

			dojoTest.PanelMembers = panelMembers;
			// Store DojoTest in cache.
			if(cacheEnabled) cacheStore(dojoTest);
		}

		public static void FillPanelMembers(DojoTestCollection dojoTestCollection)
		{
			StringBuilder s;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			if(dojoTestCollection.Count > 0)
			{
				s = new StringBuilder("SELECT DojoTestID, DojoMemberID FROM kitTessen_TestsChildren_PanelMembers ORDER BY DojoTestID; ");

				// Clone and sort collection by ID first to fill children in one pass
				DojoTestCollection clonedCollection = dojoTestCollection.Clone();
				clonedCollection.Sort();

				database = DatabaseFactory.CreateDatabase();
				dbCommand = database.GetSqlStringCommand(s.ToString());
				r = database.ExecuteReader(dbCommand);

				bool more = r.Read();

				foreach(DojoTest dojoTest in clonedCollection)
				{
					DojoMemberCollection panelMembers;
					if(dojoTest.panelMembers != null)
					{
						panelMembers = dojoTest.panelMembers;
						panelMembers.Clear();
					}
					else
					{
						panelMembers = new DojoMemberCollection();
						dojoTest.panelMembers = panelMembers;
					}

					while(more)
					{
						if(r.GetInt32(0) < dojoTest.iD)
						{
							more = r.Read();
						}
						else if(r.GetInt32(0) == dojoTest.iD)
						{
							panelMembers.Add(DojoMember.NewPlaceHolder(r.GetInt32(1)));
							more = r.Read();
						}
						else
						{
							break;
						}
					}

					// No need to continue if there are no more records
					if(!more) break;
				}

			}
		}

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_Tests WHERE DojoTestID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);


			// Delete child relationships for PanelMembers.
			query.Length = 0;
			query.Append("DELETE FROM kitTessen_TestsChildren_PanelMembers WHERE ");
			query.Append("DojoTestID=");
			query.Append(id);
			query.Append(";");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			GreyFoxContactManager locationManager = 
				new GreyFoxContactManager("kitTessen_Locations");
			msg.Append(locationManager.VerifyTable(repair));

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_Tests ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_Tests_Location FOREIGN KEY (LocationID) REFERENCES kitTessen_Locations (GreyFoxContactID),");
			query.Append(" CONSTRAINT FK_kitTessen_Tests_ListMemberType1 FOREIGN KEY (ListMemberType1ID) REFERENCES kitTessen_MemberTypes (DojoMemberTypeID),");
			query.Append(" CONSTRAINT FK_kitTessen_Tests_ListMemberType2 FOREIGN KEY (ListMemberType2ID) REFERENCES kitTessen_MemberTypes (DojoMemberTypeID),");
			query.Append(" CONSTRAINT FK_kitTessen_Tests_ListMemberType3 FOREIGN KEY (ListMemberType3ID) REFERENCES kitTessen_MemberTypes (DojoMemberTypeID),");
			query.Append(" CONSTRAINT FK_kitTessen_Tests_PanelChief FOREIGN KEY (PanelChiefID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_Tests_Status FOREIGN KEY (StatusID) REFERENCES kitTessen_DojoTestListStatuses (DojoTestListStatusID),");
			query.Append(" CONSTRAINT FK_kitTessen_Tests_ActiveTestList FOREIGN KEY (ActiveTestListID) REFERENCES kitTessen_TestLists (DojoTestListID),");
			query.Append(" CONSTRAINT FK_kitTessen_Tests_Item FOREIGN KEY (ItemID) REFERENCES RH_Items (RHItemID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			query.Length = 0;
			query.Append("ALTER TABLE kitTessen_TestsChildren_PanelMembers ADD");
			query.Append(" CONSTRAINT FK_kitTessen_Tests_kitTessen_TestsChildren_PanelMembers FOREIGN KEY (DojoTestID) REFERENCES kitTessen_Tests (DojoTestID) ON DELETE CASCADE, ");
			query.Append(" CONSTRAINT FK_kitTessen_TestsChildren_PanelMembers_kitTessen_Members FOREIGN KEY (DojoMemberID) REFERENCES kitTessen_Members (DojoMemberID) ON DELETE CASCADE;");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_Tests ");
				query.Append(" (DojoTestID COUNTER(1,1) CONSTRAINT PK_kitTessen_Tests PRIMARY KEY, " +
					"Name TEXT(75)," +
					"Description MEMO," +
					"TestDate DATETIME," +
					"LocationID LONG," +
					"ListMemberType1ID LONG," +
					"ListMemberType2ID LONG," +
					"ListMemberType3ID LONG," +
					"PanelChiefID LONG," +
					"StatusID LONG," +
					"ActiveTestListID LONG," +
					"ItemID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_Tests ");
				query.Append(" (DojoTestID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_Tests PRIMARY KEY, " +
					"Name NVARCHAR(75)," +
					"Description NTEXT," +
					"TestDate DATETIME," +
					"LocationID INT," +
					"ListMemberType1ID INT," +
					"ListMemberType2ID INT," +
					"ListMemberType3ID INT," +
					"PanelChiefID INT," +
					"StatusID INT," +
					"ActiveTestListID INT," +
					"ItemID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			//
			// Create object level table for Location.
			//
			GreyFoxContactManager locationManager = new GreyFoxContactManager("kitTessen_Locations");
			locationManager.CreateTable();

			//
			// Create children table for PanelMembers.
			//
			query.Length = 0;
			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				query.Append("CREATE TABLE kitTessen_TestsChildren_PanelMembers ");
				query.Append("(DojoTestID LONG, DojoMemberID LONG);");
				dbCommand = database.GetSqlStringCommand(query.ToString());
				database.ExecuteNonQuery(dbCommand);

			}
			else
			{
				query.Append("CREATE TABLE kitTessen_TestsChildren_PanelMembers ");
				query.Append("(DojoTestID INT, DojoMemberID INT);");
				dbCommand = database.GetSqlStringCommand(query.ToString());
				database.ExecuteNonQuery(dbCommand);

			}
		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoTest dojoTest)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_Tests_" + dojoTest.iD.ToString(), dojoTest);
		}

		private static DojoTest cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_Tests_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoTest)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_Tests_" + id.ToString());
		}

		#endregion

		//--- Begin Custom Code ---

		//--- End Custom Code ---
	}
}

