/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;

namespace Amns.Tessen
{
	/// <summary>
	/// A wrapper for DojoMember class for collection placement in DojoTestList class.
	/// </summary>
	public class DojoTestListJournalEntry : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal DojoTestList testList;
		internal DojoMember member;
		internal DojoTestListJournalEntryType entryType;
		internal DateTime createDate;
		internal DojoMember editor;
		internal string comment;
		internal DojoPromotion promotion;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoTestListJournalEntry Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoTestListJournalEntry as a Placeholder. Placeholders only contain 
		/// a DojoTestListJournalEntry ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoTestList TestList
		{
			get
			{
				EnsurePreLoad();
				return testList;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(testList == null)
					{
						return;
					}
					else
					{
						testList = value;
						isSynced = false;
					}
				}
				else
				{
					if(testList != null && value.ID == testList.ID)
					{
						return; 
					}
					else
					{
						testList = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Member
		{
			get
			{
				EnsurePreLoad();
				return member;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(member == null)
					{
						return;
					}
					else
					{
						member = value;
						isSynced = false;
					}
				}
				else
				{
					if(member != null && value.ID == member.ID)
					{
						return; 
					}
					else
					{
						member = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoTestListJournalEntryType EntryType
		{
			get
			{
				EnsurePreLoad();
				return entryType;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(entryType == null)
					{
						return;
					}
					else
					{
						entryType = value;
						isSynced = false;
					}
				}
				else
				{
					if(entryType != null && value.ID == entryType.ID)
					{
						return; 
					}
					else
					{
						entryType = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DateTime CreateDate
		{
			get
			{
				EnsurePreLoad();
				return createDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= createDate == value;
				createDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Editor
		{
			get
			{
				EnsurePreLoad();
				return editor;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(editor == null)
					{
						return;
					}
					else
					{
						editor = value;
						isSynced = false;
					}
				}
				else
				{
					if(editor != null && value.ID == editor.ID)
					{
						return; 
					}
					else
					{
						editor = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public string Comment
		{
			get
			{
				EnsurePreLoad();
				return comment;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= comment == value;
				comment = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoPromotion Promotion
		{
			get
			{
				EnsurePreLoad();
				return promotion;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(promotion == null)
					{
						return;
					}
					else
					{
						promotion = value;
						isSynced = false;
					}
				}
				else
				{
					if(promotion != null && value.ID == promotion.ID)
					{
						return; 
					}
					else
					{
						promotion = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoTestListJournalEntry.
		/// </summary>
		public DojoTestListJournalEntry()
		{
			createDate = DateTime.Now;
		}

		public DojoTestListJournalEntry(int id)
		{
			this.iD = id;
			isSynced = DojoTestListJournalEntryManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoTestListJournalEntryManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoTestListJournalEntry object state to the database.
		/// </summary>
		public int Save()
		{

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoTestListJournalEntryManager._insert(this);
			else
				DojoTestListJournalEntryManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoTestListJournalEntryManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoTestListJournalEntry object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoTestListJournalEntry object reflecting the replicated DojoTestListJournalEntry object.</returns>
		public DojoTestListJournalEntry Duplicate()
		{
			DojoTestListJournalEntry clonedDojoTestListJournalEntry = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoTestListJournalEntry.iD = DojoTestListJournalEntryManager._insert(clonedDojoTestListJournalEntry);
			clonedDojoTestListJournalEntry.isSynced = true;
			return clonedDojoTestListJournalEntry;
		}

		/// <summary>
		/// Overwrites and existing DojoTestListJournalEntry object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoTestListJournalEntryManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoTestListJournalEntry object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoTestListJournalEntry object reflecting the replicated DojoTestListJournalEntry object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoTestListJournalEntry object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoTestListJournalEntry object reflecting the replicated DojoTestListJournalEntry object.</returns>
		public DojoTestListJournalEntry Clone()
		{
			DojoTestListJournalEntry clonedDojoTestListJournalEntry = new DojoTestListJournalEntry();
			clonedDojoTestListJournalEntry.iD = iD;
			clonedDojoTestListJournalEntry.isSynced = isSynced;
			clonedDojoTestListJournalEntry.createDate = createDate;
			clonedDojoTestListJournalEntry.comment = comment;


			if(testList != null)
				clonedDojoTestListJournalEntry.testList = testList;

			if(member != null)
				clonedDojoTestListJournalEntry.member = member;

			if(entryType != null)
				clonedDojoTestListJournalEntry.entryType = entryType;

			if(editor != null)
				clonedDojoTestListJournalEntry.editor = editor;

			if(promotion != null)
				clonedDojoTestListJournalEntry.promotion = promotion;

			return clonedDojoTestListJournalEntry;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoTestListJournalEntry.
		/// </summary>
		/// <returns> A new DojoTestListJournalEntry object reflecting the cloned DojoTestListJournalEntry object.</returns>
		public DojoTestListJournalEntry Copy()
		{
			DojoTestListJournalEntry dojoTestListJournalEntry = new DojoTestListJournalEntry();
			CopyTo(dojoTestListJournalEntry);
			return dojoTestListJournalEntry;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoTestListJournalEntry.
		/// </summary>
		/// <returns> A new DojoTestListJournalEntry object reflecting the cloned DojoTestListJournalEntry object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoTestListJournalEntry from its children.</param>
		public DojoTestListJournalEntry Copy(bool isolation)
		{
			DojoTestListJournalEntry dojoTestListJournalEntry = new DojoTestListJournalEntry();
			CopyTo(dojoTestListJournalEntry, isolation);
			return dojoTestListJournalEntry;
		}

		/// <summary>
		/// Deep copies the current DojoTestListJournalEntry to another instance of DojoTestListJournalEntry.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoTestListJournalEntry">The DojoTestListJournalEntry to copy to.</param>
		public void CopyTo(DojoTestListJournalEntry dojoTestListJournalEntry)
		{
			CopyTo(dojoTestListJournalEntry, false);
		}

		/// <summary>
		/// Deep copies the current DojoTestListJournalEntry to another instance of DojoTestListJournalEntry.
		/// </summary>
		/// <param name="DojoTestListJournalEntry">The DojoTestListJournalEntry to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoTestListJournalEntry from its children.</param>
		public void CopyTo(DojoTestListJournalEntry dojoTestListJournalEntry, bool isolation)
		{
			dojoTestListJournalEntry.iD = iD;
			dojoTestListJournalEntry.isPlaceHolder = isPlaceHolder;
			dojoTestListJournalEntry.isSynced = isSynced;
			if(testList != null)
			{
				if(isolation)
				{
					dojoTestListJournalEntry.testList = testList.NewPlaceHolder();
				}
				else
				{
					dojoTestListJournalEntry.testList = testList.Copy(false);
				}
			}
			if(member != null)
			{
				if(isolation)
				{
					dojoTestListJournalEntry.member = member.NewPlaceHolder();
				}
				else
				{
					dojoTestListJournalEntry.member = member.Copy(false);
				}
			}
			if(entryType != null)
			{
				if(isolation)
				{
					dojoTestListJournalEntry.entryType = entryType.NewPlaceHolder();
				}
				else
				{
					dojoTestListJournalEntry.entryType = entryType.Copy(false);
				}
			}
			dojoTestListJournalEntry.createDate = createDate;
			if(editor != null)
			{
				if(isolation)
				{
					dojoTestListJournalEntry.editor = editor.NewPlaceHolder();
				}
				else
				{
					dojoTestListJournalEntry.editor = editor.Copy(false);
				}
			}
			dojoTestListJournalEntry.comment = comment;
			if(promotion != null)
			{
				if(isolation)
				{
					dojoTestListJournalEntry.promotion = promotion.NewPlaceHolder();
				}
				else
				{
					dojoTestListJournalEntry.promotion = promotion.Copy(false);
				}
			}
		}

		public DojoTestListJournalEntry NewPlaceHolder()
		{
			DojoTestListJournalEntry dojoTestListJournalEntry = new DojoTestListJournalEntry();
			dojoTestListJournalEntry.iD = iD;
			dojoTestListJournalEntry.isPlaceHolder = true;
			dojoTestListJournalEntry.isSynced = true;
			return dojoTestListJournalEntry;
		}

		public static DojoTestListJournalEntry NewPlaceHolder(int iD)
		{
			DojoTestListJournalEntry dojoTestListJournalEntry = new DojoTestListJournalEntry();
			dojoTestListJournalEntry.iD = iD;
			dojoTestListJournalEntry.isPlaceHolder = true;
			dojoTestListJournalEntry.isSynced = true;
			return dojoTestListJournalEntry;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoTestListJournalEntry dojoTestListJournalEntry = (DojoTestListJournalEntry) obj;
			return this.iD - dojoTestListJournalEntry.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoTestListJournalEntry dojoTestListJournalEntry)
		{
			return this.iD - dojoTestListJournalEntry.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

	}
}
