/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;

namespace Amns.Tessen
{
	/// <summary>
	/// Summary of MyClass
	/// </summary>
	public class DojoTestListJournalEntryType : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal string name;
		internal string description;
		internal int orderNum;
		internal bool eligible;
		internal bool failed;
		internal bool passed;
		internal bool certificateRequest;
		internal bool certificatePending;
		internal bool certificateReceived;
		internal bool ineligible;
		internal DojoTestListJournalEntryType onRemovedStatus;
		internal DojoTestListJournalEntryType onFailedStatus;
		internal DojoTestListJournalEntryType onPassedStatus;
		internal DojoTestListJournalEntryType onPromotedStatus;
		internal DojoTestListJournalEntryType onCertificateRequestedStatus;
		internal DojoTestListJournalEntryType onCertificatePendingStatus;
		internal DojoTestListJournalEntryType onCertificateReceivedStatus;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoTestListJournalEntryType Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoTestListJournalEntryType as a Placeholder. Placeholders only contain 
		/// a DojoTestListJournalEntryType ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Name
		{
			get
			{
				EnsurePreLoad();
				return name;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= name == value;
				name = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Description
		{
			get
			{
				EnsurePreLoad();
				return description;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= description == value;
				description = value;
			}
		}

		/// <summary>
		/// </summary>
		public int OrderNum
		{
			get
			{
				EnsurePreLoad();
				return orderNum;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= orderNum == value;
				orderNum = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool Eligible
		{
			get
			{
				EnsurePreLoad();
				return eligible;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= eligible == value;
				eligible = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool Failed
		{
			get
			{
				EnsurePreLoad();
				return failed;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= failed == value;
				failed = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool Passed
		{
			get
			{
				EnsurePreLoad();
				return passed;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= passed == value;
				passed = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool CertificateRequest
		{
			get
			{
				EnsurePreLoad();
				return certificateRequest;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= certificateRequest == value;
				certificateRequest = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool CertificatePending
		{
			get
			{
				EnsurePreLoad();
				return certificatePending;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= certificatePending == value;
				certificatePending = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool CertificateReceived
		{
			get
			{
				EnsurePreLoad();
				return certificateReceived;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= certificateReceived == value;
				certificateReceived = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool Ineligible
		{
			get
			{
				EnsurePreLoad();
				return ineligible;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= ineligible == value;
				ineligible = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoTestListJournalEntryType OnRemovedStatus
		{
			get
			{
				EnsurePreLoad();
				return onRemovedStatus;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(onRemovedStatus == null)
					{
						return;
					}
					else
					{
						onRemovedStatus = value;
						isSynced = false;
					}
				}
				else
				{
					if(onRemovedStatus != null && value.ID == onRemovedStatus.ID)
					{
						return; 
					}
					else
					{
						onRemovedStatus = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoTestListJournalEntryType OnFailedStatus
		{
			get
			{
				EnsurePreLoad();
				return onFailedStatus;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(onFailedStatus == null)
					{
						return;
					}
					else
					{
						onFailedStatus = value;
						isSynced = false;
					}
				}
				else
				{
					if(onFailedStatus != null && value.ID == onFailedStatus.ID)
					{
						return; 
					}
					else
					{
						onFailedStatus = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoTestListJournalEntryType OnPassedStatus
		{
			get
			{
				EnsurePreLoad();
				return onPassedStatus;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(onPassedStatus == null)
					{
						return;
					}
					else
					{
						onPassedStatus = value;
						isSynced = false;
					}
				}
				else
				{
					if(onPassedStatus != null && value.ID == onPassedStatus.ID)
					{
						return; 
					}
					else
					{
						onPassedStatus = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoTestListJournalEntryType OnPromotedStatus
		{
			get
			{
				EnsurePreLoad();
				return onPromotedStatus;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(onPromotedStatus == null)
					{
						return;
					}
					else
					{
						onPromotedStatus = value;
						isSynced = false;
					}
				}
				else
				{
					if(onPromotedStatus != null && value.ID == onPromotedStatus.ID)
					{
						return; 
					}
					else
					{
						onPromotedStatus = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoTestListJournalEntryType OnCertificateRequestedStatus
		{
			get
			{
				EnsurePreLoad();
				return onCertificateRequestedStatus;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(onCertificateRequestedStatus == null)
					{
						return;
					}
					else
					{
						onCertificateRequestedStatus = value;
						isSynced = false;
					}
				}
				else
				{
					if(onCertificateRequestedStatus != null && value.ID == onCertificateRequestedStatus.ID)
					{
						return; 
					}
					else
					{
						onCertificateRequestedStatus = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoTestListJournalEntryType OnCertificatePendingStatus
		{
			get
			{
				EnsurePreLoad();
				return onCertificatePendingStatus;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(onCertificatePendingStatus == null)
					{
						return;
					}
					else
					{
						onCertificatePendingStatus = value;
						isSynced = false;
					}
				}
				else
				{
					if(onCertificatePendingStatus != null && value.ID == onCertificatePendingStatus.ID)
					{
						return; 
					}
					else
					{
						onCertificatePendingStatus = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoTestListJournalEntryType OnCertificateReceivedStatus
		{
			get
			{
				EnsurePreLoad();
				return onCertificateReceivedStatus;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(onCertificateReceivedStatus == null)
					{
						return;
					}
					else
					{
						onCertificateReceivedStatus = value;
						isSynced = false;
					}
				}
				else
				{
					if(onCertificateReceivedStatus != null && value.ID == onCertificateReceivedStatus.ID)
					{
						return; 
					}
					else
					{
						onCertificateReceivedStatus = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoTestListJournalEntryType.
		/// </summary>
		public DojoTestListJournalEntryType()
		{
		}

		public DojoTestListJournalEntryType(int id)
		{
			this.iD = id;
			isSynced = DojoTestListJournalEntryTypeManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoTestListJournalEntryTypeManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoTestListJournalEntryType object state to the database.
		/// </summary>
		public int Save()
		{

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoTestListJournalEntryTypeManager._insert(this);
			else
				DojoTestListJournalEntryTypeManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoTestListJournalEntryTypeManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoTestListJournalEntryType object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoTestListJournalEntryType object reflecting the replicated DojoTestListJournalEntryType object.</returns>
		public DojoTestListJournalEntryType Duplicate()
		{
			DojoTestListJournalEntryType clonedDojoTestListJournalEntryType = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoTestListJournalEntryType.iD = DojoTestListJournalEntryTypeManager._insert(clonedDojoTestListJournalEntryType);
			clonedDojoTestListJournalEntryType.isSynced = true;
			return clonedDojoTestListJournalEntryType;
		}

		/// <summary>
		/// Overwrites and existing DojoTestListJournalEntryType object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoTestListJournalEntryTypeManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoTestListJournalEntryType object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoTestListJournalEntryType object reflecting the replicated DojoTestListJournalEntryType object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoTestListJournalEntryType object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoTestListJournalEntryType object reflecting the replicated DojoTestListJournalEntryType object.</returns>
		public DojoTestListJournalEntryType Clone()
		{
			DojoTestListJournalEntryType clonedDojoTestListJournalEntryType = new DojoTestListJournalEntryType();
			clonedDojoTestListJournalEntryType.iD = iD;
			clonedDojoTestListJournalEntryType.isSynced = isSynced;
			clonedDojoTestListJournalEntryType.name = name;
			clonedDojoTestListJournalEntryType.description = description;
			clonedDojoTestListJournalEntryType.orderNum = orderNum;
			clonedDojoTestListJournalEntryType.eligible = eligible;
			clonedDojoTestListJournalEntryType.failed = failed;
			clonedDojoTestListJournalEntryType.passed = passed;
			clonedDojoTestListJournalEntryType.certificateRequest = certificateRequest;
			clonedDojoTestListJournalEntryType.certificatePending = certificatePending;
			clonedDojoTestListJournalEntryType.certificateReceived = certificateReceived;
			clonedDojoTestListJournalEntryType.ineligible = ineligible;


			if(onRemovedStatus != null)
				clonedDojoTestListJournalEntryType.onRemovedStatus = onRemovedStatus;

			if(onFailedStatus != null)
				clonedDojoTestListJournalEntryType.onFailedStatus = onFailedStatus;

			if(onPassedStatus != null)
				clonedDojoTestListJournalEntryType.onPassedStatus = onPassedStatus;

			if(onPromotedStatus != null)
				clonedDojoTestListJournalEntryType.onPromotedStatus = onPromotedStatus;

			if(onCertificateRequestedStatus != null)
				clonedDojoTestListJournalEntryType.onCertificateRequestedStatus = onCertificateRequestedStatus;

			if(onCertificatePendingStatus != null)
				clonedDojoTestListJournalEntryType.onCertificatePendingStatus = onCertificatePendingStatus;

			if(onCertificateReceivedStatus != null)
				clonedDojoTestListJournalEntryType.onCertificateReceivedStatus = onCertificateReceivedStatus;

			return clonedDojoTestListJournalEntryType;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoTestListJournalEntryType.
		/// </summary>
		/// <returns> A new DojoTestListJournalEntryType object reflecting the cloned DojoTestListJournalEntryType object.</returns>
		public DojoTestListJournalEntryType Copy()
		{
			DojoTestListJournalEntryType dojoTestListJournalEntryType = new DojoTestListJournalEntryType();
			CopyTo(dojoTestListJournalEntryType);
			return dojoTestListJournalEntryType;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoTestListJournalEntryType.
		/// </summary>
		/// <returns> A new DojoTestListJournalEntryType object reflecting the cloned DojoTestListJournalEntryType object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoTestListJournalEntryType from its children.</param>
		public DojoTestListJournalEntryType Copy(bool isolation)
		{
			DojoTestListJournalEntryType dojoTestListJournalEntryType = new DojoTestListJournalEntryType();
			CopyTo(dojoTestListJournalEntryType, isolation);
			return dojoTestListJournalEntryType;
		}

		/// <summary>
		/// Deep copies the current DojoTestListJournalEntryType to another instance of DojoTestListJournalEntryType.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoTestListJournalEntryType">The DojoTestListJournalEntryType to copy to.</param>
		public void CopyTo(DojoTestListJournalEntryType dojoTestListJournalEntryType)
		{
			CopyTo(dojoTestListJournalEntryType, false);
		}

		/// <summary>
		/// Deep copies the current DojoTestListJournalEntryType to another instance of DojoTestListJournalEntryType.
		/// </summary>
		/// <param name="DojoTestListJournalEntryType">The DojoTestListJournalEntryType to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoTestListJournalEntryType from its children.</param>
		public void CopyTo(DojoTestListJournalEntryType dojoTestListJournalEntryType, bool isolation)
		{
			dojoTestListJournalEntryType.iD = iD;
			dojoTestListJournalEntryType.isPlaceHolder = isPlaceHolder;
			dojoTestListJournalEntryType.isSynced = isSynced;
			dojoTestListJournalEntryType.name = name;
			dojoTestListJournalEntryType.description = description;
			dojoTestListJournalEntryType.orderNum = orderNum;
			dojoTestListJournalEntryType.eligible = eligible;
			dojoTestListJournalEntryType.failed = failed;
			dojoTestListJournalEntryType.passed = passed;
			dojoTestListJournalEntryType.certificateRequest = certificateRequest;
			dojoTestListJournalEntryType.certificatePending = certificatePending;
			dojoTestListJournalEntryType.certificateReceived = certificateReceived;
			dojoTestListJournalEntryType.ineligible = ineligible;
			if(onRemovedStatus != null)
			{
				if(isolation)
				{
					dojoTestListJournalEntryType.onRemovedStatus = onRemovedStatus.NewPlaceHolder();
				}
				else
				{
					dojoTestListJournalEntryType.onRemovedStatus = onRemovedStatus.Copy(false);
				}
			}
			if(onFailedStatus != null)
			{
				if(isolation)
				{
					dojoTestListJournalEntryType.onFailedStatus = onFailedStatus.NewPlaceHolder();
				}
				else
				{
					dojoTestListJournalEntryType.onFailedStatus = onFailedStatus.Copy(false);
				}
			}
			if(onPassedStatus != null)
			{
				if(isolation)
				{
					dojoTestListJournalEntryType.onPassedStatus = onPassedStatus.NewPlaceHolder();
				}
				else
				{
					dojoTestListJournalEntryType.onPassedStatus = onPassedStatus.Copy(false);
				}
			}
			if(onPromotedStatus != null)
			{
				if(isolation)
				{
					dojoTestListJournalEntryType.onPromotedStatus = onPromotedStatus.NewPlaceHolder();
				}
				else
				{
					dojoTestListJournalEntryType.onPromotedStatus = onPromotedStatus.Copy(false);
				}
			}
			if(onCertificateRequestedStatus != null)
			{
				if(isolation)
				{
					dojoTestListJournalEntryType.onCertificateRequestedStatus = onCertificateRequestedStatus.NewPlaceHolder();
				}
				else
				{
					dojoTestListJournalEntryType.onCertificateRequestedStatus = onCertificateRequestedStatus.Copy(false);
				}
			}
			if(onCertificatePendingStatus != null)
			{
				if(isolation)
				{
					dojoTestListJournalEntryType.onCertificatePendingStatus = onCertificatePendingStatus.NewPlaceHolder();
				}
				else
				{
					dojoTestListJournalEntryType.onCertificatePendingStatus = onCertificatePendingStatus.Copy(false);
				}
			}
			if(onCertificateReceivedStatus != null)
			{
				if(isolation)
				{
					dojoTestListJournalEntryType.onCertificateReceivedStatus = onCertificateReceivedStatus.NewPlaceHolder();
				}
				else
				{
					dojoTestListJournalEntryType.onCertificateReceivedStatus = onCertificateReceivedStatus.Copy(false);
				}
			}
		}

		public DojoTestListJournalEntryType NewPlaceHolder()
		{
			DojoTestListJournalEntryType dojoTestListJournalEntryType = new DojoTestListJournalEntryType();
			dojoTestListJournalEntryType.iD = iD;
			dojoTestListJournalEntryType.isPlaceHolder = true;
			dojoTestListJournalEntryType.isSynced = true;
			return dojoTestListJournalEntryType;
		}

		public static DojoTestListJournalEntryType NewPlaceHolder(int iD)
		{
			DojoTestListJournalEntryType dojoTestListJournalEntryType = new DojoTestListJournalEntryType();
			dojoTestListJournalEntryType.iD = iD;
			dojoTestListJournalEntryType.isPlaceHolder = true;
			dojoTestListJournalEntryType.isSynced = true;
			return dojoTestListJournalEntryType;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoTestListJournalEntryType dojoTestListJournalEntryType = (DojoTestListJournalEntryType) obj;
			return this.iD - dojoTestListJournalEntryType.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoTestListJournalEntryType dojoTestListJournalEntryType)
		{
			return this.iD - dojoTestListJournalEntryType.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

	}
}
