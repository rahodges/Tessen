/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using Amns.GreyFox.People;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	/// <summary>
	/// Summary of MyClass
	/// </summary>
	public class DojoTest : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal string name;
		internal string description;
		internal DateTime testDate;
		internal GreyFoxContact location;
		internal DojoMemberType listMemberType1;
		internal DojoMemberType listMemberType2;
		internal DojoMemberType listMemberType3;
		internal DojoMember panelChief;
		internal DojoMemberCollection panelMembers;
		internal DojoTestListStatus status;
		internal DojoTestList activeTestList;
		internal RHItem item;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoTest Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoTest as a Placeholder. Placeholders only contain 
		/// a DojoTest ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Name
		{
			get
			{
				EnsurePreLoad();
				return name;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= name == value;
				name = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Description
		{
			get
			{
				EnsurePreLoad();
				return description;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= description == value;
				description = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime TestDate
		{
			get
			{
				EnsurePreLoad();
				return testDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= testDate == value;
				testDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public GreyFoxContact Location
		{
			get
			{
				EnsurePreLoad();
				return location;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(location == null)
					{
						return;
					}
					else
					{
						location = value;
						isSynced = false;
					}
				}
				else
				{
					if(value.TableName != "kitTessen_Locations") throw(new Exception("Cannot set Location. Table names mismatched."));
					if(location != null && value.ID == location.ID)
					{
						return; 
					}
					else
					{
						location = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMemberType ListMemberType1
		{
			get
			{
				EnsurePreLoad();
				return listMemberType1;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(listMemberType1 == null)
					{
						return;
					}
					else
					{
						listMemberType1 = value;
						isSynced = false;
					}
				}
				else
				{
					if(listMemberType1 != null && value.ID == listMemberType1.ID)
					{
						return; 
					}
					else
					{
						listMemberType1 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMemberType ListMemberType2
		{
			get
			{
				EnsurePreLoad();
				return listMemberType2;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(listMemberType2 == null)
					{
						return;
					}
					else
					{
						listMemberType2 = value;
						isSynced = false;
					}
				}
				else
				{
					if(listMemberType2 != null && value.ID == listMemberType2.ID)
					{
						return; 
					}
					else
					{
						listMemberType2 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMemberType ListMemberType3
		{
			get
			{
				EnsurePreLoad();
				return listMemberType3;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(listMemberType3 == null)
					{
						return;
					}
					else
					{
						listMemberType3 = value;
						isSynced = false;
					}
				}
				else
				{
					if(listMemberType3 != null && value.ID == listMemberType3.ID)
					{
						return; 
					}
					else
					{
						listMemberType3 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember PanelChief
		{
			get
			{
				EnsurePreLoad();
				return panelChief;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(panelChief == null)
					{
						return;
					}
					else
					{
						panelChief = value;
						isSynced = false;
					}
				}
				else
				{
					if(panelChief != null && value.ID == panelChief.ID)
					{
						return; 
					}
					else
					{
						panelChief = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMemberCollection PanelMembers
		{
			get
			{
				EnsurePreLoad();
				if(panelMembers == null)
				{
					DojoTestManager.FillPanelMembers(this);
					panelMembers.CollectionChanged += new System.EventHandler(childrenCollection_Changed);
				}
				return panelMembers;
			}
			set
			{
				EnsurePreLoad();
				if(!object.Equals(panelMembers, value))
				{
					if(value == null)
						PanelMembers = new DojoMemberCollection();
					else
						panelMembers = value;
					panelMembers.CollectionChanged += new System.EventHandler(childrenCollection_Changed);
					isSynced = false;
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoTestListStatus Status
		{
			get
			{
				EnsurePreLoad();
				return status;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(status == null)
					{
						return;
					}
					else
					{
						status = value;
						isSynced = false;
					}
				}
				else
				{
					if(status != null && value.ID == status.ID)
					{
						return; 
					}
					else
					{
						status = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoTestList ActiveTestList
		{
			get
			{
				EnsurePreLoad();
				return activeTestList;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(activeTestList == null)
					{
						return;
					}
					else
					{
						activeTestList = value;
						isSynced = false;
					}
				}
				else
				{
					if(activeTestList != null && value.ID == activeTestList.ID)
					{
						return; 
					}
					else
					{
						activeTestList = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public RHItem Item
		{
			get
			{
				EnsurePreLoad();
				return item;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(item == null)
					{
						return;
					}
					else
					{
						item = value;
						isSynced = false;
					}
				}
				else
				{
					if(item != null && value.ID == item.ID)
					{
						return; 
					}
					else
					{
						item = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoTest.
		/// </summary>
		public DojoTest()
		{
		}

		public DojoTest(int id)
		{
			this.iD = id;
			isSynced = DojoTestManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoTestManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoTest object state to the database.
		/// </summary>
		public int Save()
		{
			if(location != null)
				location.Save();

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoTestManager._insert(this);
			else
				DojoTestManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoTestManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoTest object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoTest object reflecting the replicated DojoTest object.</returns>
		public DojoTest Duplicate()
		{
			DojoTest clonedDojoTest = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoTest.iD = DojoTestManager._insert(clonedDojoTest);
			clonedDojoTest.isSynced = true;
			return clonedDojoTest;
		}

		/// <summary>
		/// Overwrites and existing DojoTest object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoTestManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoTest object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoTest object reflecting the replicated DojoTest object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoTest object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoTest object reflecting the replicated DojoTest object.</returns>
		public DojoTest Clone()
		{
			DojoTest clonedDojoTest = new DojoTest();
			clonedDojoTest.iD = iD;
			clonedDojoTest.isSynced = isSynced;
			clonedDojoTest.name = name;
			clonedDojoTest.description = description;
			clonedDojoTest.testDate = testDate;


			if(location != null)
				clonedDojoTest.location = location;

			if(listMemberType1 != null)
				clonedDojoTest.listMemberType1 = listMemberType1;

			if(listMemberType2 != null)
				clonedDojoTest.listMemberType2 = listMemberType2;

			if(listMemberType3 != null)
				clonedDojoTest.listMemberType3 = listMemberType3;

			if(panelChief != null)
				clonedDojoTest.panelChief = panelChief;

			if(panelMembers != null)
				clonedDojoTest.panelMembers = panelMembers.Clone();

			if(status != null)
				clonedDojoTest.status = status;

			if(activeTestList != null)
				clonedDojoTest.activeTestList = activeTestList;

			if(item != null)
				clonedDojoTest.item = item;

			return clonedDojoTest;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoTest.
		/// </summary>
		/// <returns> A new DojoTest object reflecting the cloned DojoTest object.</returns>
		public DojoTest Copy()
		{
			DojoTest dojoTest = new DojoTest();
			CopyTo(dojoTest);
			return dojoTest;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoTest.
		/// </summary>
		/// <returns> A new DojoTest object reflecting the cloned DojoTest object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoTest from its children.</param>
		public DojoTest Copy(bool isolation)
		{
			DojoTest dojoTest = new DojoTest();
			CopyTo(dojoTest, isolation);
			return dojoTest;
		}

		/// <summary>
		/// Deep copies the current DojoTest to another instance of DojoTest.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoTest">The DojoTest to copy to.</param>
		public void CopyTo(DojoTest dojoTest)
		{
			CopyTo(dojoTest, false);
		}

		/// <summary>
		/// Deep copies the current DojoTest to another instance of DojoTest.
		/// </summary>
		/// <param name="DojoTest">The DojoTest to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoTest from its children.</param>
		public void CopyTo(DojoTest dojoTest, bool isolation)
		{
			dojoTest.iD = iD;
			dojoTest.isPlaceHolder = isPlaceHolder;
			dojoTest.isSynced = isSynced;
			dojoTest.name = name;
			dojoTest.description = description;
			dojoTest.testDate = testDate;
			if(location != null)
			{
				if(isolation)
				{
					dojoTest.location = location.NewPlaceHolder();
				}
				else
				{
					dojoTest.location = location.Copy(false);
				}
			}
			if(listMemberType1 != null)
			{
				if(isolation)
				{
					dojoTest.listMemberType1 = listMemberType1.NewPlaceHolder();
				}
				else
				{
					dojoTest.listMemberType1 = listMemberType1.Copy(false);
				}
			}
			if(listMemberType2 != null)
			{
				if(isolation)
				{
					dojoTest.listMemberType2 = listMemberType2.NewPlaceHolder();
				}
				else
				{
					dojoTest.listMemberType2 = listMemberType2.Copy(false);
				}
			}
			if(listMemberType3 != null)
			{
				if(isolation)
				{
					dojoTest.listMemberType3 = listMemberType3.NewPlaceHolder();
				}
				else
				{
					dojoTest.listMemberType3 = listMemberType3.Copy(false);
				}
			}
			if(panelChief != null)
			{
				if(isolation)
				{
					dojoTest.panelChief = panelChief.NewPlaceHolder();
				}
				else
				{
					dojoTest.panelChief = panelChief.Copy(false);
				}
			}
			if(panelMembers != null)
			{
				if(isolation)
				{
					dojoTest.panelMembers = panelMembers.Copy(true);
				}
				else
				{
					dojoTest.panelMembers = panelMembers.Copy(false);
				}
			}
			if(status != null)
			{
				if(isolation)
				{
					dojoTest.status = status.NewPlaceHolder();
				}
				else
				{
					dojoTest.status = status.Copy(false);
				}
			}
			if(activeTestList != null)
			{
				if(isolation)
				{
					dojoTest.activeTestList = activeTestList.NewPlaceHolder();
				}
				else
				{
					dojoTest.activeTestList = activeTestList.Copy(false);
				}
			}
			if(item != null)
			{
				if(isolation)
				{
					dojoTest.item = item.NewPlaceHolder();
				}
				else
				{
					dojoTest.item = item.Copy(false);
				}
			}
		}

		public DojoTest NewPlaceHolder()
		{
			DojoTest dojoTest = new DojoTest();
			dojoTest.iD = iD;
			dojoTest.isPlaceHolder = true;
			dojoTest.isSynced = true;
			return dojoTest;
		}

		public static DojoTest NewPlaceHolder(int iD)
		{
			DojoTest dojoTest = new DojoTest();
			dojoTest.iD = iD;
			dojoTest.isPlaceHolder = true;
			dojoTest.isSynced = true;
			return dojoTest;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoTest dojoTest = (DojoTest) obj;
			return this.iD - dojoTest.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoTest dojoTest)
		{
			return this.iD - dojoTest.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
		public override string ToString()
		{
			return name + " (" + testDate.ToShortDateString() + ")";
		}
		//--- End Custom Code ---
	}
}
