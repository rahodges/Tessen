/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.Security;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoMemberTypeTemplateFlags : int { MemberType,
				Parent,
				ParentMemberType,
				ParentParent,
				ParentRoot,
				ParentInitialRank,
				ParentInitialRole,
				ParentRankMin,
				ParentRankMax,
				ParentMembershipTemplate1,
				ParentMembershipTemplate2,
				ParentMembershipTemplate3,
				ParentMembershipTemplate4,
				ParentMembershipTemplate5,
				Root,
				RootMemberType,
				RootParent,
				RootRoot,
				RootInitialRank,
				RootInitialRole,
				RootRankMin,
				RootRankMax,
				RootMembershipTemplate1,
				RootMembershipTemplate2,
				RootMembershipTemplate3,
				RootMembershipTemplate4,
				RootMembershipTemplate5,
				InitialRank,
				InitialRankPromotionRank,
				InitialRankItem,
				InitialRole,
				RankMin,
				RankMinPromotionRank,
				RankMinItem,
				RankMax,
				RankMaxPromotionRank,
				RankMaxItem,
				MembershipTemplate1,
				MembershipTemplate1Organization,
				MembershipTemplate1RootTemplate,
				MembershipTemplate1RankMin,
				MembershipTemplate1RankMax,
				MembershipTemplate1Item,
				MembershipTemplate1ItemClass,
				MembershipTemplate2,
				MembershipTemplate2Organization,
				MembershipTemplate2RootTemplate,
				MembershipTemplate2RankMin,
				MembershipTemplate2RankMax,
				MembershipTemplate2Item,
				MembershipTemplate2ItemClass,
				MembershipTemplate3,
				MembershipTemplate3Organization,
				MembershipTemplate3RootTemplate,
				MembershipTemplate3RankMin,
				MembershipTemplate3RankMax,
				MembershipTemplate3Item,
				MembershipTemplate3ItemClass,
				MembershipTemplate4,
				MembershipTemplate4Organization,
				MembershipTemplate4RootTemplate,
				MembershipTemplate4RankMin,
				MembershipTemplate4RankMax,
				MembershipTemplate4Item,
				MembershipTemplate4ItemClass,
				MembershipTemplate5,
				MembershipTemplate5Organization,
				MembershipTemplate5RootTemplate,
				MembershipTemplate5RankMin,
				MembershipTemplate5RankMax,
				MembershipTemplate5Item,
				MembershipTemplate5ItemClass};

	#endregion

	/// <summary>
	/// Datamanager for DojoMemberTypeTemplate objects.
	/// </summary>
	public class DojoMemberTypeTemplateManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_MemberTypeTemplates";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoMemberTypeTemplateID",
			"CreateDate",
			"ModifyDate",
			"Name",
			"Description",
			"OrderNum",
			"MemberTypeID",
			"MemberTypeTreeHash",
			"ParentID",
			"RootID",
			"InitialRankID",
			"InitialRoleID",
			"InitialEmailFrom",
			"InitialEmailBody",
			"AllowGuestPurchase",
			"AllowPurchase",
			"AllowRenewal",
			"AllowAutoRenewal",
			"AgeYearsMax",
			"AgeYearsMin",
			"MemberForMin",
			"MemberForMax",
			"RankMinID",
			"RankMaxID",
			"MembershipTemplate1ID",
			"MembershipTemplate2ID",
			"MembershipTemplate3ID",
			"MembershipTemplate4ID",
			"MembershipTemplate5ID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoMemberTypeTemplateID", "LONG", "-1" },
			{ "CreateDate", "DATETIME", "DateTime.Now" },
			{ "ModifyDate", "DATETIME", "DateTime.Now" },
			{ "Name", "TEXT(75)", "string.Empty" },
			{ "Description", "MEMO", "string.Empty" },
			{ "OrderNum", "LONG", "" },
			{ "MemberTypeID", "LONG", "null" },
			{ "MemberTypeTreeHash", "TEXT(75)", "string.Empty" },
			{ "ParentID", "LONG", "null" },
			{ "RootID", "LONG", "null" },
			{ "InitialRankID", "LONG", "null" },
			{ "InitialRoleID", "LONG", "null" },
			{ "InitialEmailFrom", "TEXT(75)", "string.Empty" },
			{ "InitialEmailBody", "MEMO", "string.Empty" },
			{ "AllowGuestPurchase", "BIT", "" },
			{ "AllowPurchase", "BIT", "" },
			{ "AllowRenewal", "BIT", "" },
			{ "AllowAutoRenewal", "BIT", "" },
			{ "AgeYearsMax", "LONG", "" },
			{ "AgeYearsMin", "LONG", "" },
			{ "MemberForMin", "LONG", "" },
			{ "MemberForMax", "LONG", "" },
			{ "RankMinID", "LONG", "null" },
			{ "RankMaxID", "LONG", "null" },
			{ "MembershipTemplate1ID", "LONG", "null" },
			{ "MembershipTemplate2ID", "LONG", "null" },
			{ "MembershipTemplate3ID", "LONG", "null" },
			{ "MembershipTemplate4ID", "LONG", "null" },
			{ "MembershipTemplate5ID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoMemberTypeTemplateManager()
		{
		}

		public DojoMemberTypeTemplateManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoMemberTypeTemplateManager.isInitialized)
			{
				DojoMemberTypeTemplateManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoMemberTypeTemplate into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoMemberTypeTemplate">The DojoMemberTypeTemplate to insert into the database.</param>
		internal static int _insert(DojoMemberTypeTemplate dojoMemberTypeTemplate)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			// Set Create Date to Now
			dojoMemberTypeTemplate.CreateDate = DateTime.Now.ToUniversalTime();

			// Set Modify Date to Now
			dojoMemberTypeTemplate.ModifyDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_MemberTypeTemplates " +
				"(" +
				"CreateDate," +
				"ModifyDate," +
				"Name," +
				"Description," +
				"OrderNum," +
				"MemberTypeID," +
				"MemberTypeTreeHash," +
				"ParentID," +
				"RootID," +
				"InitialRankID," +
				"InitialRoleID," +
				"InitialEmailFrom," +
				"InitialEmailBody," +
				"AllowGuestPurchase," +
				"AllowPurchase," +
				"AllowRenewal," +
				"AllowAutoRenewal," +
				"AgeYearsMax," +
				"AgeYearsMin," +
				"MemberForMin," +
				"MemberForMax," +
				"RankMinID," +
				"RankMaxID," +
				"MembershipTemplate1ID," +
				"MembershipTemplate2ID," +
				"MembershipTemplate3ID," +
				"MembershipTemplate4ID," +
				"MembershipTemplate5ID) VALUES (" +
				"@CreateDate," +
				"@ModifyDate," +
				"@Name," +
				"@Description," +
				"@OrderNum," +
				"@MemberTypeID," +
				"@MemberTypeTreeHash," +
				"@ParentID," +
				"@RootID," +
				"@InitialRankID," +
				"@InitialRoleID," +
				"@InitialEmailFrom," +
				"@InitialEmailBody," +
				"@AllowGuestPurchase," +
				"@AllowPurchase," +
				"@AllowRenewal," +
				"@AllowAutoRenewal," +
				"@AgeYearsMax," +
				"@AgeYearsMin," +
				"@MemberForMin," +
				"@MemberForMax," +
				"@RankMinID," +
				"@RankMaxID," +
				"@MembershipTemplate1ID," +
				"@MembershipTemplate2ID," +
				"@MembershipTemplate3ID," +
				"@MembershipTemplate4ID," +
				"@MembershipTemplate5ID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoMemberTypeTemplate);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoMemberTypeTemplate);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoMemberTypeTemplate in cache.
			if(cacheEnabled) cacheStore(dojoMemberTypeTemplate);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoMemberTypeTemplate dojoMemberTypeTemplate)
		{
			Database database;
			DbCommand dbCommand;

			// Set Modify Date to Now
			dojoMemberTypeTemplate.ModifyDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_MemberTypeTemplates SET CreateDate=@CreateDate," +
				"ModifyDate=@ModifyDate," +
				"Name=@Name," +
				"Description=@Description," +
				"OrderNum=@OrderNum," +
				"MemberTypeID=@MemberTypeID," +
				"MemberTypeTreeHash=@MemberTypeTreeHash," +
				"ParentID=@ParentID," +
				"RootID=@RootID," +
				"InitialRankID=@InitialRankID," +
				"InitialRoleID=@InitialRoleID," +
				"InitialEmailFrom=@InitialEmailFrom," +
				"InitialEmailBody=@InitialEmailBody," +
				"AllowGuestPurchase=@AllowGuestPurchase," +
				"AllowPurchase=@AllowPurchase," +
				"AllowRenewal=@AllowRenewal," +
				"AllowAutoRenewal=@AllowAutoRenewal," +
				"AgeYearsMax=@AgeYearsMax," +
				"AgeYearsMin=@AgeYearsMin," +
				"MemberForMin=@MemberForMin," +
				"MemberForMax=@MemberForMax," +
				"RankMinID=@RankMinID," +
				"RankMaxID=@RankMaxID," +
				"MembershipTemplate1ID=@MembershipTemplate1ID," +
				"MembershipTemplate2ID=@MembershipTemplate2ID," +
				"MembershipTemplate3ID=@MembershipTemplate3ID," +
				"MembershipTemplate4ID=@MembershipTemplate4ID," +
				"MembershipTemplate5ID=@MembershipTemplate5ID WHERE DojoMemberTypeTemplateID=@DojoMemberTypeTemplateID;");

			fillParameters(database, dbCommand, dojoMemberTypeTemplate);
			database.AddInParameter(dbCommand, "DojoMemberTypeTemplateID", DbType.Int32, dojoMemberTypeTemplate.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoMemberTypeTemplate in cache.
			if (cacheEnabled) cacheStore(dojoMemberTypeTemplate);

			return dojoMemberTypeTemplate.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoMemberTypeTemplate dojoMemberTypeTemplate)
		{
			#region _system

			addParameter(database, dbCommand, "@CreateDate", DbType.Date, dojoMemberTypeTemplate.createDate);
			addParameter(database, dbCommand, "@ModifyDate", DbType.Date, dojoMemberTypeTemplate.modifyDate);

			#endregion

			#region General

			addParameter(database, dbCommand, "@Name", DbType.String, dojoMemberTypeTemplate.name);
			addParameter(database, dbCommand, "@Description", DbType.String, dojoMemberTypeTemplate.description);
			addParameter(database, dbCommand, "@OrderNum", DbType.Int32, dojoMemberTypeTemplate.orderNum);
			if(dojoMemberTypeTemplate.memberType == null)
			{
				addParameter(database, dbCommand, "@MemberTypeID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MemberTypeID", DbType.Int32, dojoMemberTypeTemplate.memberType.ID);
			}
			addParameter(database, dbCommand, "@MemberTypeTreeHash", DbType.String, dojoMemberTypeTemplate.memberTypeTreeHash);
			if(dojoMemberTypeTemplate.parent == null)
			{
				addParameter(database, dbCommand, "@ParentID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ParentID", DbType.Int32, dojoMemberTypeTemplate.parent.ID);
			}
			if(dojoMemberTypeTemplate.root == null)
			{
				addParameter(database, dbCommand, "@RootID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@RootID", DbType.Int32, dojoMemberTypeTemplate.root.ID);
			}

			#endregion

			#region Initialization

			if(dojoMemberTypeTemplate.initialRank == null)
			{
				addParameter(database, dbCommand, "@InitialRankID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@InitialRankID", DbType.Int32, dojoMemberTypeTemplate.initialRank.ID);
			}
			if(dojoMemberTypeTemplate.initialRole == null)
			{
				addParameter(database, dbCommand, "@InitialRoleID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@InitialRoleID", DbType.Int32, dojoMemberTypeTemplate.initialRole.ID);
			}
			addParameter(database, dbCommand, "@InitialEmailFrom", DbType.String, dojoMemberTypeTemplate.initialEmailFrom);
			addParameter(database, dbCommand, "@InitialEmailBody", DbType.String, dojoMemberTypeTemplate.initialEmailBody);

			#endregion

			#region Security

			addParameter(database, dbCommand, "@AllowGuestPurchase", DbType.Boolean, dojoMemberTypeTemplate.allowGuestPurchase);
			addParameter(database, dbCommand, "@AllowPurchase", DbType.Boolean, dojoMemberTypeTemplate.allowPurchase);
			addParameter(database, dbCommand, "@AllowRenewal", DbType.Boolean, dojoMemberTypeTemplate.allowRenewal);
			addParameter(database, dbCommand, "@AllowAutoRenewal", DbType.Boolean, dojoMemberTypeTemplate.allowAutoRenewal);

			#endregion

			#region Requirements

			addParameter(database, dbCommand, "@AgeYearsMax", DbType.Int32, dojoMemberTypeTemplate.ageYearsMax);
			addParameter(database, dbCommand, "@AgeYearsMin", DbType.Int32, dojoMemberTypeTemplate.ageYearsMin);
			addParameter(database, dbCommand, "@MemberForMin", DbType.Int32, dojoMemberTypeTemplate.memberForMin);
			addParameter(database, dbCommand, "@MemberForMax", DbType.Int32, dojoMemberTypeTemplate.memberForMax);
			if(dojoMemberTypeTemplate.rankMin == null)
			{
				addParameter(database, dbCommand, "@RankMinID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@RankMinID", DbType.Int32, dojoMemberTypeTemplate.rankMin.ID);
			}
			if(dojoMemberTypeTemplate.rankMax == null)
			{
				addParameter(database, dbCommand, "@RankMaxID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@RankMaxID", DbType.Int32, dojoMemberTypeTemplate.rankMax.ID);
			}

			#endregion

			#region Membership Templates

			if(dojoMemberTypeTemplate.membershipTemplate1 == null)
			{
				addParameter(database, dbCommand, "@MembershipTemplate1ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MembershipTemplate1ID", DbType.Int32, dojoMemberTypeTemplate.membershipTemplate1.ID);
			}
			if(dojoMemberTypeTemplate.membershipTemplate2 == null)
			{
				addParameter(database, dbCommand, "@MembershipTemplate2ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MembershipTemplate2ID", DbType.Int32, dojoMemberTypeTemplate.membershipTemplate2.ID);
			}
			if(dojoMemberTypeTemplate.membershipTemplate3 == null)
			{
				addParameter(database, dbCommand, "@MembershipTemplate3ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MembershipTemplate3ID", DbType.Int32, dojoMemberTypeTemplate.membershipTemplate3.ID);
			}
			if(dojoMemberTypeTemplate.membershipTemplate4 == null)
			{
				addParameter(database, dbCommand, "@MembershipTemplate4ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MembershipTemplate4ID", DbType.Int32, dojoMemberTypeTemplate.membershipTemplate4.ID);
			}
			if(dojoMemberTypeTemplate.membershipTemplate5 == null)
			{
				addParameter(database, dbCommand, "@MembershipTemplate5ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MembershipTemplate5ID", DbType.Int32, dojoMemberTypeTemplate.membershipTemplate5.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoMemberTypeTemplate dojoMemberTypeTemplate)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoMemberTypeTemplate.iD);
				if(cachedObject != null)
				{
					((DojoMemberTypeTemplate)cachedObject).CopyTo(dojoMemberTypeTemplate, true);
					return dojoMemberTypeTemplate.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_MemberTypeTemplates WHERE DojoMemberTypeTemplateID=");
			query.Append(dojoMemberTypeTemplate.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoMemberTypeTemplateID '{0}'.", 
					dojoMemberTypeTemplate.iD)));
			}

			FillFromReader(dojoMemberTypeTemplate, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoMemberTypeTemplate in cache.
			if(cacheEnabled) cacheStore(dojoMemberTypeTemplate);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoMemberTypeTemplateCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoMemberTypeTemplateCollection GetCollection(string whereClause, string sortClause, params DojoMemberTypeTemplateFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoMemberTypeTemplateCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoMemberTypeTemplateFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoMemberTypeTemplateCollection dojoMemberTypeTemplateCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoMemberTypeTemplate.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int memberTypeOffset = -1;
			int parentOffset = -1;
			SortedDictionary<int, DojoMemberTypeTemplate> parentSortedDictionary = new SortedDictionary<int, DojoMemberTypeTemplate>();
			int parentMemberTypeOffset = -1;
			int parentParentOffset = -1;
			SortedDictionary<int, DojoMemberTypeTemplate> parentParentSortedDictionary = new SortedDictionary<int, DojoMemberTypeTemplate>();
			int parentRootOffset = -1;
			int parentInitialRankOffset = -1;
			int parentInitialRoleOffset = -1;
			int parentRankMinOffset = -1;
			int parentRankMaxOffset = -1;
			int parentMembershipTemplate1Offset = -1;
			int parentMembershipTemplate2Offset = -1;
			int parentMembershipTemplate3Offset = -1;
			int parentMembershipTemplate4Offset = -1;
			int parentMembershipTemplate5Offset = -1;
			int rootOffset = -1;
			int rootMemberTypeOffset = -1;
			int rootParentOffset = -1;
			SortedDictionary<int, DojoMemberTypeTemplate> rootParentSortedDictionary = new SortedDictionary<int, DojoMemberTypeTemplate>();
			int rootRootOffset = -1;
			int rootInitialRankOffset = -1;
			int rootInitialRoleOffset = -1;
			int rootRankMinOffset = -1;
			int rootRankMaxOffset = -1;
			int rootMembershipTemplate1Offset = -1;
			int rootMembershipTemplate2Offset = -1;
			int rootMembershipTemplate3Offset = -1;
			int rootMembershipTemplate4Offset = -1;
			int rootMembershipTemplate5Offset = -1;
			int initialRankOffset = -1;
			int initialRankPromotionRankOffset = -1;
			int initialRankItemOffset = -1;
			int initialRoleOffset = -1;
			int rankMinOffset = -1;
			int rankMinPromotionRankOffset = -1;
			int rankMinItemOffset = -1;
			int rankMaxOffset = -1;
			int rankMaxPromotionRankOffset = -1;
			int rankMaxItemOffset = -1;
			int membershipTemplate1Offset = -1;
			int membershipTemplate1OrganizationOffset = -1;
			int membershipTemplate1RootTemplateOffset = -1;
			int membershipTemplate1RankMinOffset = -1;
			int membershipTemplate1RankMaxOffset = -1;
			int membershipTemplate1ItemOffset = -1;
			int membershipTemplate1ItemClassOffset = -1;
			int membershipTemplate2Offset = -1;
			int membershipTemplate2OrganizationOffset = -1;
			int membershipTemplate2RootTemplateOffset = -1;
			int membershipTemplate2RankMinOffset = -1;
			int membershipTemplate2RankMaxOffset = -1;
			int membershipTemplate2ItemOffset = -1;
			int membershipTemplate2ItemClassOffset = -1;
			int membershipTemplate3Offset = -1;
			int membershipTemplate3OrganizationOffset = -1;
			int membershipTemplate3RootTemplateOffset = -1;
			int membershipTemplate3RankMinOffset = -1;
			int membershipTemplate3RankMaxOffset = -1;
			int membershipTemplate3ItemOffset = -1;
			int membershipTemplate3ItemClassOffset = -1;
			int membershipTemplate4Offset = -1;
			int membershipTemplate4OrganizationOffset = -1;
			int membershipTemplate4RootTemplateOffset = -1;
			int membershipTemplate4RankMinOffset = -1;
			int membershipTemplate4RankMaxOffset = -1;
			int membershipTemplate4ItemOffset = -1;
			int membershipTemplate4ItemClassOffset = -1;
			int membershipTemplate5Offset = -1;
			int membershipTemplate5OrganizationOffset = -1;
			int membershipTemplate5RootTemplateOffset = -1;
			int membershipTemplate5RankMinOffset = -1;
			int membershipTemplate5RankMaxOffset = -1;
			int membershipTemplate5ItemOffset = -1;
			int membershipTemplate5ItemClassOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoMemberTypeTemplateFlags.MemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeOffset = innerJoinOffset;
							innerJoinOffset = memberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.Parent:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentOffset = innerJoinOffset;
							innerJoinOffset = parentOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.ParentMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = parentMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.ParentParent:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Parent.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentParentOffset = innerJoinOffset;
							innerJoinOffset = parentParentOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.ParentRoot:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Root.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentRootOffset = innerJoinOffset;
							innerJoinOffset = parentRootOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.ParentInitialRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_InitialRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentInitialRankOffset = innerJoinOffset;
							innerJoinOffset = parentInitialRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.ParentInitialRole:
							for(int i = 0; i <= GreyFoxRoleManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_InitialRole.");
								query.Append(GreyFoxRoleManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentInitialRoleOffset = innerJoinOffset;
							innerJoinOffset = parentInitialRoleOffset + GreyFoxRoleManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.ParentRankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentRankMinOffset = innerJoinOffset;
							innerJoinOffset = parentRankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.ParentRankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentRankMaxOffset = innerJoinOffset;
							innerJoinOffset = parentRankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.ParentMembershipTemplate1:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_MembershipTemplate1.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMembershipTemplate1Offset = innerJoinOffset;
							innerJoinOffset = parentMembershipTemplate1Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.ParentMembershipTemplate2:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_MembershipTemplate2.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMembershipTemplate2Offset = innerJoinOffset;
							innerJoinOffset = parentMembershipTemplate2Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.ParentMembershipTemplate3:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_MembershipTemplate3.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMembershipTemplate3Offset = innerJoinOffset;
							innerJoinOffset = parentMembershipTemplate3Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.ParentMembershipTemplate4:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_MembershipTemplate4.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMembershipTemplate4Offset = innerJoinOffset;
							innerJoinOffset = parentMembershipTemplate4Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.ParentMembershipTemplate5:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_MembershipTemplate5.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMembershipTemplate5Offset = innerJoinOffset;
							innerJoinOffset = parentMembershipTemplate5Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.Root:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootOffset = innerJoinOffset;
							innerJoinOffset = rootOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RootMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = rootMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RootParent:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Parent.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootParentOffset = innerJoinOffset;
							innerJoinOffset = rootParentOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RootRoot:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Root.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootRootOffset = innerJoinOffset;
							innerJoinOffset = rootRootOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RootInitialRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_InitialRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootInitialRankOffset = innerJoinOffset;
							innerJoinOffset = rootInitialRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RootInitialRole:
							for(int i = 0; i <= GreyFoxRoleManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_InitialRole.");
								query.Append(GreyFoxRoleManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootInitialRoleOffset = innerJoinOffset;
							innerJoinOffset = rootInitialRoleOffset + GreyFoxRoleManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RootRankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootRankMinOffset = innerJoinOffset;
							innerJoinOffset = rootRankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RootRankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootRankMaxOffset = innerJoinOffset;
							innerJoinOffset = rootRankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RootMembershipTemplate1:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_MembershipTemplate1.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMembershipTemplate1Offset = innerJoinOffset;
							innerJoinOffset = rootMembershipTemplate1Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RootMembershipTemplate2:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_MembershipTemplate2.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMembershipTemplate2Offset = innerJoinOffset;
							innerJoinOffset = rootMembershipTemplate2Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RootMembershipTemplate3:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_MembershipTemplate3.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMembershipTemplate3Offset = innerJoinOffset;
							innerJoinOffset = rootMembershipTemplate3Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RootMembershipTemplate4:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_MembershipTemplate4.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMembershipTemplate4Offset = innerJoinOffset;
							innerJoinOffset = rootMembershipTemplate4Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RootMembershipTemplate5:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_MembershipTemplate5.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMembershipTemplate5Offset = innerJoinOffset;
							innerJoinOffset = rootMembershipTemplate5Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.InitialRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InitialRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							initialRankOffset = innerJoinOffset;
							innerJoinOffset = initialRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.InitialRankPromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InitialRank_PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							initialRankPromotionRankOffset = innerJoinOffset;
							innerJoinOffset = initialRankPromotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.InitialRankItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InitialRank_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							initialRankItemOffset = innerJoinOffset;
							innerJoinOffset = initialRankItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.InitialRole:
							for(int i = 0; i <= GreyFoxRoleManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InitialRole.");
								query.Append(GreyFoxRoleManager.InnerJoinFields[i]);
								query.Append(",");
							}
							initialRoleOffset = innerJoinOffset;
							innerJoinOffset = initialRoleOffset + GreyFoxRoleManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankMinOffset = innerJoinOffset;
							innerJoinOffset = rankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RankMinPromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RankMin_PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankMinPromotionRankOffset = innerJoinOffset;
							innerJoinOffset = rankMinPromotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RankMinItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RankMin_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankMinItemOffset = innerJoinOffset;
							innerJoinOffset = rankMinItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankMaxOffset = innerJoinOffset;
							innerJoinOffset = rankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RankMaxPromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RankMax_PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankMaxPromotionRankOffset = innerJoinOffset;
							innerJoinOffset = rankMaxPromotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.RankMaxItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RankMax_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankMaxItemOffset = innerJoinOffset;
							innerJoinOffset = rankMaxItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate1.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate1Offset = innerJoinOffset;
							innerJoinOffset = membershipTemplate1Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1Organization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate1_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate1OrganizationOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate1OrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1RootTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate1_RootTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate1RootTemplateOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate1RootTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1RankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate1_RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate1RankMinOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate1RankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1RankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate1_RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate1RankMaxOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate1RankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1Item:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate1_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate1ItemOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate1ItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1ItemClass:
							for(int i = 0; i <= RHClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate1_ItemClass.");
								query.Append(RHClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate1ItemClassOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate1ItemClassOffset + RHClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate2.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate2Offset = innerJoinOffset;
							innerJoinOffset = membershipTemplate2Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2Organization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate2_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate2OrganizationOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate2OrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2RootTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate2_RootTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate2RootTemplateOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate2RootTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2RankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate2_RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate2RankMinOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate2RankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2RankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate2_RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate2RankMaxOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate2RankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2Item:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate2_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate2ItemOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate2ItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2ItemClass:
							for(int i = 0; i <= RHClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate2_ItemClass.");
								query.Append(RHClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate2ItemClassOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate2ItemClassOffset + RHClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate3.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate3Offset = innerJoinOffset;
							innerJoinOffset = membershipTemplate3Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3Organization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate3_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate3OrganizationOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate3OrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3RootTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate3_RootTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate3RootTemplateOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate3RootTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3RankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate3_RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate3RankMinOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate3RankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3RankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate3_RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate3RankMaxOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate3RankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3Item:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate3_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate3ItemOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate3ItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3ItemClass:
							for(int i = 0; i <= RHClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate3_ItemClass.");
								query.Append(RHClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate3ItemClassOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate3ItemClassOffset + RHClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate4.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate4Offset = innerJoinOffset;
							innerJoinOffset = membershipTemplate4Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4Organization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate4_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate4OrganizationOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate4OrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4RootTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate4_RootTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate4RootTemplateOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate4RootTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4RankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate4_RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate4RankMinOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate4RankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4RankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate4_RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate4RankMaxOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate4RankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4Item:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate4_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate4ItemOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate4ItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4ItemClass:
							for(int i = 0; i <= RHClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate4_ItemClass.");
								query.Append(RHClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate4ItemClassOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate4ItemClassOffset + RHClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate5.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate5Offset = innerJoinOffset;
							innerJoinOffset = membershipTemplate5Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5Organization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate5_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate5OrganizationOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate5OrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5RootTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate5_RootTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate5RootTemplateOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate5RootTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5RankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate5_RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate5RankMinOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate5RankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5RankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate5_RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate5RankMaxOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate5RankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5Item:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate5_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate5ItemOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate5ItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5ItemClass:
							for(int i = 0; i <= RHClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MembershipTemplate5_ItemClass.");
								query.Append(RHClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membershipTemplate5ItemClassOffset = innerJoinOffset;
							innerJoinOffset = membershipTemplate5ItemClassOffset + RHClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_MemberTypeTemplates AS DojoMemberTypeTemplate");
			}
			else
			{
				query.Append(" FROM kitTessen_MemberTypeTemplates AS DojoMemberTypeTemplate");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoMemberTypeTemplateFlags.MemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS MemberType ON DojoMemberTypeTemplate.MemberTypeID = MemberType.DojoMemberTypeID)");
							break;
						case DojoMemberTypeTemplateFlags.Parent:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Parent ON DojoMemberTypeTemplate.ParentID = Parent.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.ParentMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Parent_MemberType ON Parent.MemberTypeID = Parent_MemberType.DojoMemberTypeID)");
							break;
						case DojoMemberTypeTemplateFlags.ParentParent:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Parent_Parent ON Parent.ParentID = Parent_Parent.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.ParentRoot:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Parent_Root ON Parent.RootID = Parent_Root.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.ParentInitialRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Parent_InitialRank ON Parent.InitialRankID = Parent_InitialRank.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.ParentInitialRole:
							query.Append(" LEFT JOIN sysGlobal_Roles AS Parent_InitialRole ON Parent.InitialRoleID = Parent_InitialRole.GreyFoxRoleID)");
							break;
						case DojoMemberTypeTemplateFlags.ParentRankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Parent_RankMin ON Parent.RankMinID = Parent_RankMin.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.ParentRankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Parent_RankMax ON Parent.RankMaxID = Parent_RankMax.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.ParentMembershipTemplate1:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Parent_MembershipTemplate1 ON Parent.MembershipTemplate1ID = Parent_MembershipTemplate1.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.ParentMembershipTemplate2:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Parent_MembershipTemplate2 ON Parent.MembershipTemplate2ID = Parent_MembershipTemplate2.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.ParentMembershipTemplate3:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Parent_MembershipTemplate3 ON Parent.MembershipTemplate3ID = Parent_MembershipTemplate3.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.ParentMembershipTemplate4:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Parent_MembershipTemplate4 ON Parent.MembershipTemplate4ID = Parent_MembershipTemplate4.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.ParentMembershipTemplate5:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Parent_MembershipTemplate5 ON Parent.MembershipTemplate5ID = Parent_MembershipTemplate5.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.Root:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Root ON DojoMemberTypeTemplate.RootID = Root.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.RootMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Root_MemberType ON Root.MemberTypeID = Root_MemberType.DojoMemberTypeID)");
							break;
						case DojoMemberTypeTemplateFlags.RootParent:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Root_Parent ON Root.ParentID = Root_Parent.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.RootRoot:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Root_Root ON Root.RootID = Root_Root.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.RootInitialRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Root_InitialRank ON Root.InitialRankID = Root_InitialRank.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.RootInitialRole:
							query.Append(" LEFT JOIN sysGlobal_Roles AS Root_InitialRole ON Root.InitialRoleID = Root_InitialRole.GreyFoxRoleID)");
							break;
						case DojoMemberTypeTemplateFlags.RootRankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Root_RankMin ON Root.RankMinID = Root_RankMin.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.RootRankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Root_RankMax ON Root.RankMaxID = Root_RankMax.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.RootMembershipTemplate1:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Root_MembershipTemplate1 ON Root.MembershipTemplate1ID = Root_MembershipTemplate1.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.RootMembershipTemplate2:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Root_MembershipTemplate2 ON Root.MembershipTemplate2ID = Root_MembershipTemplate2.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.RootMembershipTemplate3:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Root_MembershipTemplate3 ON Root.MembershipTemplate3ID = Root_MembershipTemplate3.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.RootMembershipTemplate4:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Root_MembershipTemplate4 ON Root.MembershipTemplate4ID = Root_MembershipTemplate4.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.RootMembershipTemplate5:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Root_MembershipTemplate5 ON Root.MembershipTemplate5ID = Root_MembershipTemplate5.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.InitialRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS InitialRank ON DojoMemberTypeTemplate.InitialRankID = InitialRank.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.InitialRankPromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS InitialRank_PromotionRank ON InitialRank.PromotionRankID = InitialRank_PromotionRank.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.InitialRankItem:
							query.Append(" LEFT JOIN RH_Items AS InitialRank_Item ON InitialRank.ItemID = InitialRank_Item.RHItemID)");
							break;
						case DojoMemberTypeTemplateFlags.InitialRole:
							query.Append(" LEFT JOIN sysGlobal_Roles AS InitialRole ON DojoMemberTypeTemplate.InitialRoleID = InitialRole.GreyFoxRoleID)");
							break;
						case DojoMemberTypeTemplateFlags.RankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS RankMin ON DojoMemberTypeTemplate.RankMinID = RankMin.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.RankMinPromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS RankMin_PromotionRank ON RankMin.PromotionRankID = RankMin_PromotionRank.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.RankMinItem:
							query.Append(" LEFT JOIN RH_Items AS RankMin_Item ON RankMin.ItemID = RankMin_Item.RHItemID)");
							break;
						case DojoMemberTypeTemplateFlags.RankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS RankMax ON DojoMemberTypeTemplate.RankMaxID = RankMax.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.RankMaxPromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS RankMax_PromotionRank ON RankMax.PromotionRankID = RankMax_PromotionRank.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.RankMaxItem:
							query.Append(" LEFT JOIN RH_Items AS RankMax_Item ON RankMax.ItemID = RankMax_Item.RHItemID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MembershipTemplate1 ON DojoMemberTypeTemplate.MembershipTemplate1ID = MembershipTemplate1.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1Organization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS MembershipTemplate1_Organization ON MembershipTemplate1.OrganizationID = MembershipTemplate1_Organization.DojoOrganizationID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1RootTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MembershipTemplate1_RootTemplate ON MembershipTemplate1.RootTemplateID = MembershipTemplate1_RootTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1RankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MembershipTemplate1_RankMin ON MembershipTemplate1.RankMinID = MembershipTemplate1_RankMin.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1RankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MembershipTemplate1_RankMax ON MembershipTemplate1.RankMaxID = MembershipTemplate1_RankMax.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1Item:
							query.Append(" LEFT JOIN RH_Items AS MembershipTemplate1_Item ON MembershipTemplate1.ItemID = MembershipTemplate1_Item.RHItemID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate1ItemClass:
							query.Append(" LEFT JOIN RH_Classes AS MembershipTemplate1_ItemClass ON MembershipTemplate1.ItemClassID = MembershipTemplate1_ItemClass.RHClassID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MembershipTemplate2 ON DojoMemberTypeTemplate.MembershipTemplate2ID = MembershipTemplate2.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2Organization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS MembershipTemplate2_Organization ON MembershipTemplate2.OrganizationID = MembershipTemplate2_Organization.DojoOrganizationID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2RootTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MembershipTemplate2_RootTemplate ON MembershipTemplate2.RootTemplateID = MembershipTemplate2_RootTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2RankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MembershipTemplate2_RankMin ON MembershipTemplate2.RankMinID = MembershipTemplate2_RankMin.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2RankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MembershipTemplate2_RankMax ON MembershipTemplate2.RankMaxID = MembershipTemplate2_RankMax.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2Item:
							query.Append(" LEFT JOIN RH_Items AS MembershipTemplate2_Item ON MembershipTemplate2.ItemID = MembershipTemplate2_Item.RHItemID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate2ItemClass:
							query.Append(" LEFT JOIN RH_Classes AS MembershipTemplate2_ItemClass ON MembershipTemplate2.ItemClassID = MembershipTemplate2_ItemClass.RHClassID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MembershipTemplate3 ON DojoMemberTypeTemplate.MembershipTemplate3ID = MembershipTemplate3.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3Organization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS MembershipTemplate3_Organization ON MembershipTemplate3.OrganizationID = MembershipTemplate3_Organization.DojoOrganizationID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3RootTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MembershipTemplate3_RootTemplate ON MembershipTemplate3.RootTemplateID = MembershipTemplate3_RootTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3RankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MembershipTemplate3_RankMin ON MembershipTemplate3.RankMinID = MembershipTemplate3_RankMin.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3RankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MembershipTemplate3_RankMax ON MembershipTemplate3.RankMaxID = MembershipTemplate3_RankMax.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3Item:
							query.Append(" LEFT JOIN RH_Items AS MembershipTemplate3_Item ON MembershipTemplate3.ItemID = MembershipTemplate3_Item.RHItemID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate3ItemClass:
							query.Append(" LEFT JOIN RH_Classes AS MembershipTemplate3_ItemClass ON MembershipTemplate3.ItemClassID = MembershipTemplate3_ItemClass.RHClassID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MembershipTemplate4 ON DojoMemberTypeTemplate.MembershipTemplate4ID = MembershipTemplate4.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4Organization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS MembershipTemplate4_Organization ON MembershipTemplate4.OrganizationID = MembershipTemplate4_Organization.DojoOrganizationID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4RootTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MembershipTemplate4_RootTemplate ON MembershipTemplate4.RootTemplateID = MembershipTemplate4_RootTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4RankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MembershipTemplate4_RankMin ON MembershipTemplate4.RankMinID = MembershipTemplate4_RankMin.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4RankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MembershipTemplate4_RankMax ON MembershipTemplate4.RankMaxID = MembershipTemplate4_RankMax.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4Item:
							query.Append(" LEFT JOIN RH_Items AS MembershipTemplate4_Item ON MembershipTemplate4.ItemID = MembershipTemplate4_Item.RHItemID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate4ItemClass:
							query.Append(" LEFT JOIN RH_Classes AS MembershipTemplate4_ItemClass ON MembershipTemplate4.ItemClassID = MembershipTemplate4_ItemClass.RHClassID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MembershipTemplate5 ON DojoMemberTypeTemplate.MembershipTemplate5ID = MembershipTemplate5.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5Organization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS MembershipTemplate5_Organization ON MembershipTemplate5.OrganizationID = MembershipTemplate5_Organization.DojoOrganizationID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5RootTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MembershipTemplate5_RootTemplate ON MembershipTemplate5.RootTemplateID = MembershipTemplate5_RootTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5RankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MembershipTemplate5_RankMin ON MembershipTemplate5.RankMinID = MembershipTemplate5_RankMin.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5RankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MembershipTemplate5_RankMax ON MembershipTemplate5.RankMaxID = MembershipTemplate5_RankMax.DojoRankID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5Item:
							query.Append(" LEFT JOIN RH_Items AS MembershipTemplate5_Item ON MembershipTemplate5.ItemID = MembershipTemplate5_Item.RHItemID)");
							break;
						case DojoMemberTypeTemplateFlags.MembershipTemplate5ItemClass:
							query.Append(" LEFT JOIN RH_Classes AS MembershipTemplate5_ItemClass ON MembershipTemplate5.ItemClassID = MembershipTemplate5_ItemClass.RHClassID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoMemberTypeTemplateCollection = new DojoMemberTypeTemplateCollection();

			while(r.Read())
			{
				DojoMemberTypeTemplate dojoMemberTypeTemplate = ParseFromReader(r, 0, 1);

				// Fill MemberType
				if(memberTypeOffset != -1 && !r.IsDBNull(memberTypeOffset))
					DojoMemberTypeManager.FillFromReader(dojoMemberTypeTemplate.memberType, r, memberTypeOffset, memberTypeOffset+1);

				// Fill Parent
				if(parentOffset != -1 && !r.IsDBNull(parentOffset))
				{
					if(!parentSortedDictionary.TryGetValue(r.GetInt32(parentOffset), out dojoMemberTypeTemplate.parent))
					{
						DojoMemberTypeTemplateManager.FillFromReader(dojoMemberTypeTemplate.parent, r, parentOffset, parentOffset+1);

						// Fill Member Type
						if(parentMemberTypeOffset != -1 && !r.IsDBNull(parentMemberTypeOffset))
							DojoMemberTypeManager.FillFromReader(dojoMemberTypeTemplate.parent.MemberType, r, parentMemberTypeOffset, parentMemberTypeOffset+1);

						// Fill Parent Template Group
						if(parentParentOffset != -1 && !r.IsDBNull(parentParentOffset))
						{
							if(!parentParentSortedDictionary.TryGetValue(r.GetInt32(parentParentOffset), out dojoMemberTypeTemplate.parent.parent))
							{
								DojoMemberTypeTemplateManager.FillFromReader(dojoMemberTypeTemplate.parent.Parent, r, parentParentOffset, parentParentOffset+1);
								parentParentSortedDictionary.Add(dojoMemberTypeTemplate.parent.Parent.ID, dojoMemberTypeTemplate.parent.Parent);
							}
						}

						// Fill 
						if(parentRootOffset != -1 && !r.IsDBNull(parentRootOffset))
							DojoMemberTypeTemplateManager.FillFromReader(dojoMemberTypeTemplate.parent.Root, r, parentRootOffset, parentRootOffset+1);

						// Fill 
						if(parentInitialRankOffset != -1 && !r.IsDBNull(parentInitialRankOffset))
							DojoRankManager.FillFromReader(dojoMemberTypeTemplate.parent.InitialRank, r, parentInitialRankOffset, parentInitialRankOffset+1);

						// Fill 
						if(parentInitialRoleOffset != -1 && !r.IsDBNull(parentInitialRoleOffset))
							GreyFoxRoleManager.FillFromReader(dojoMemberTypeTemplate.parent.InitialRole, r, parentInitialRoleOffset, parentInitialRoleOffset+1);

						// Fill 
						if(parentRankMinOffset != -1 && !r.IsDBNull(parentRankMinOffset))
							DojoRankManager.FillFromReader(dojoMemberTypeTemplate.parent.RankMin, r, parentRankMinOffset, parentRankMinOffset+1);

						// Fill 
						if(parentRankMaxOffset != -1 && !r.IsDBNull(parentRankMaxOffset))
							DojoRankManager.FillFromReader(dojoMemberTypeTemplate.parent.RankMax, r, parentRankMaxOffset, parentRankMaxOffset+1);

						// Fill 
						if(parentMembershipTemplate1Offset != -1 && !r.IsDBNull(parentMembershipTemplate1Offset))
							DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.parent.MembershipTemplate1, r, parentMembershipTemplate1Offset, parentMembershipTemplate1Offset+1);

						// Fill 
						if(parentMembershipTemplate2Offset != -1 && !r.IsDBNull(parentMembershipTemplate2Offset))
							DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.parent.MembershipTemplate2, r, parentMembershipTemplate2Offset, parentMembershipTemplate2Offset+1);

						// Fill 
						if(parentMembershipTemplate3Offset != -1 && !r.IsDBNull(parentMembershipTemplate3Offset))
							DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.parent.MembershipTemplate3, r, parentMembershipTemplate3Offset, parentMembershipTemplate3Offset+1);

						// Fill 
						if(parentMembershipTemplate4Offset != -1 && !r.IsDBNull(parentMembershipTemplate4Offset))
							DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.parent.MembershipTemplate4, r, parentMembershipTemplate4Offset, parentMembershipTemplate4Offset+1);

						// Fill 
						if(parentMembershipTemplate5Offset != -1 && !r.IsDBNull(parentMembershipTemplate5Offset))
							DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.parent.MembershipTemplate5, r, parentMembershipTemplate5Offset, parentMembershipTemplate5Offset+1);

						parentSortedDictionary.Add(dojoMemberTypeTemplate.parent.ID, dojoMemberTypeTemplate.parent);
					}
				}

				// Fill Root
				if(rootOffset != -1 && !r.IsDBNull(rootOffset))
				{
					DojoMemberTypeTemplateManager.FillFromReader(dojoMemberTypeTemplate.root, r, rootOffset, rootOffset+1);

					// Fill Member Type
					if(rootMemberTypeOffset != -1 && !r.IsDBNull(rootMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoMemberTypeTemplate.root.MemberType, r, rootMemberTypeOffset, rootMemberTypeOffset+1);

					// Fill Parent Template Group
					if(rootParentOffset != -1 && !r.IsDBNull(rootParentOffset))
					{
						if(!rootParentSortedDictionary.TryGetValue(r.GetInt32(rootParentOffset), out dojoMemberTypeTemplate.root.parent))
						{
							DojoMemberTypeTemplateManager.FillFromReader(dojoMemberTypeTemplate.root.Parent, r, rootParentOffset, rootParentOffset+1);
							rootParentSortedDictionary.Add(dojoMemberTypeTemplate.root.Parent.ID, dojoMemberTypeTemplate.root.Parent);
						}
					}

					// Fill 
					if(rootRootOffset != -1 && !r.IsDBNull(rootRootOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMemberTypeTemplate.root.Root, r, rootRootOffset, rootRootOffset+1);

					// Fill 
					if(rootInitialRankOffset != -1 && !r.IsDBNull(rootInitialRankOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.root.InitialRank, r, rootInitialRankOffset, rootInitialRankOffset+1);

					// Fill 
					if(rootInitialRoleOffset != -1 && !r.IsDBNull(rootInitialRoleOffset))
						GreyFoxRoleManager.FillFromReader(dojoMemberTypeTemplate.root.InitialRole, r, rootInitialRoleOffset, rootInitialRoleOffset+1);

					// Fill 
					if(rootRankMinOffset != -1 && !r.IsDBNull(rootRankMinOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.root.RankMin, r, rootRankMinOffset, rootRankMinOffset+1);

					// Fill 
					if(rootRankMaxOffset != -1 && !r.IsDBNull(rootRankMaxOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.root.RankMax, r, rootRankMaxOffset, rootRankMaxOffset+1);

					// Fill 
					if(rootMembershipTemplate1Offset != -1 && !r.IsDBNull(rootMembershipTemplate1Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.root.MembershipTemplate1, r, rootMembershipTemplate1Offset, rootMembershipTemplate1Offset+1);

					// Fill 
					if(rootMembershipTemplate2Offset != -1 && !r.IsDBNull(rootMembershipTemplate2Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.root.MembershipTemplate2, r, rootMembershipTemplate2Offset, rootMembershipTemplate2Offset+1);

					// Fill 
					if(rootMembershipTemplate3Offset != -1 && !r.IsDBNull(rootMembershipTemplate3Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.root.MembershipTemplate3, r, rootMembershipTemplate3Offset, rootMembershipTemplate3Offset+1);

					// Fill 
					if(rootMembershipTemplate4Offset != -1 && !r.IsDBNull(rootMembershipTemplate4Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.root.MembershipTemplate4, r, rootMembershipTemplate4Offset, rootMembershipTemplate4Offset+1);

					// Fill 
					if(rootMembershipTemplate5Offset != -1 && !r.IsDBNull(rootMembershipTemplate5Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.root.MembershipTemplate5, r, rootMembershipTemplate5Offset, rootMembershipTemplate5Offset+1);

				}

				// Fill InitialRank
				if(initialRankOffset != -1 && !r.IsDBNull(initialRankOffset))
				{
					DojoRankManager.FillFromReader(dojoMemberTypeTemplate.initialRank, r, initialRankOffset, initialRankOffset+1);

					// Fill 
					if(initialRankPromotionRankOffset != -1 && !r.IsDBNull(initialRankPromotionRankOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.initialRank.PromotionRank, r, initialRankPromotionRankOffset, initialRankPromotionRankOffset+1);

					// Fill 
					if(initialRankItemOffset != -1 && !r.IsDBNull(initialRankItemOffset))
						RHItemManager.FillFromReader(dojoMemberTypeTemplate.initialRank.Item, r, initialRankItemOffset, initialRankItemOffset+1);

				}

				// Fill InitialRole
				if(initialRoleOffset != -1 && !r.IsDBNull(initialRoleOffset))
					GreyFoxRoleManager.FillFromReader(dojoMemberTypeTemplate.initialRole, r, initialRoleOffset, initialRoleOffset+1);

				// Fill RankMin
				if(rankMinOffset != -1 && !r.IsDBNull(rankMinOffset))
				{
					DojoRankManager.FillFromReader(dojoMemberTypeTemplate.rankMin, r, rankMinOffset, rankMinOffset+1);

					// Fill 
					if(rankMinPromotionRankOffset != -1 && !r.IsDBNull(rankMinPromotionRankOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.rankMin.PromotionRank, r, rankMinPromotionRankOffset, rankMinPromotionRankOffset+1);

					// Fill 
					if(rankMinItemOffset != -1 && !r.IsDBNull(rankMinItemOffset))
						RHItemManager.FillFromReader(dojoMemberTypeTemplate.rankMin.Item, r, rankMinItemOffset, rankMinItemOffset+1);

				}

				// Fill RankMax
				if(rankMaxOffset != -1 && !r.IsDBNull(rankMaxOffset))
				{
					DojoRankManager.FillFromReader(dojoMemberTypeTemplate.rankMax, r, rankMaxOffset, rankMaxOffset+1);

					// Fill 
					if(rankMaxPromotionRankOffset != -1 && !r.IsDBNull(rankMaxPromotionRankOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.rankMax.PromotionRank, r, rankMaxPromotionRankOffset, rankMaxPromotionRankOffset+1);

					// Fill 
					if(rankMaxItemOffset != -1 && !r.IsDBNull(rankMaxItemOffset))
						RHItemManager.FillFromReader(dojoMemberTypeTemplate.rankMax.Item, r, rankMaxItemOffset, rankMaxItemOffset+1);

				}

				// Fill MembershipTemplate1
				if(membershipTemplate1Offset != -1 && !r.IsDBNull(membershipTemplate1Offset))
				{
					DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate1, r, membershipTemplate1Offset, membershipTemplate1Offset+1);

					// Fill 
					if(membershipTemplate1OrganizationOffset != -1 && !r.IsDBNull(membershipTemplate1OrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate1.Organization, r, membershipTemplate1OrganizationOffset, membershipTemplate1OrganizationOffset+1);

					// Fill 
					if(membershipTemplate1RootTemplateOffset != -1 && !r.IsDBNull(membershipTemplate1RootTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate1.RootTemplate, r, membershipTemplate1RootTemplateOffset, membershipTemplate1RootTemplateOffset+1);

					// Fill 
					if(membershipTemplate1RankMinOffset != -1 && !r.IsDBNull(membershipTemplate1RankMinOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate1.RankMin, r, membershipTemplate1RankMinOffset, membershipTemplate1RankMinOffset+1);

					// Fill 
					if(membershipTemplate1RankMaxOffset != -1 && !r.IsDBNull(membershipTemplate1RankMaxOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate1.RankMax, r, membershipTemplate1RankMaxOffset, membershipTemplate1RankMaxOffset+1);

					// Fill 
					if(membershipTemplate1ItemOffset != -1 && !r.IsDBNull(membershipTemplate1ItemOffset))
						RHItemManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate1.Item, r, membershipTemplate1ItemOffset, membershipTemplate1ItemOffset+1);

					// Fill 
					if(membershipTemplate1ItemClassOffset != -1 && !r.IsDBNull(membershipTemplate1ItemClassOffset))
						RHClassManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate1.ItemClass, r, membershipTemplate1ItemClassOffset, membershipTemplate1ItemClassOffset+1);

				}

				// Fill MembershipTemplate2
				if(membershipTemplate2Offset != -1 && !r.IsDBNull(membershipTemplate2Offset))
				{
					DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate2, r, membershipTemplate2Offset, membershipTemplate2Offset+1);

					// Fill 
					if(membershipTemplate2OrganizationOffset != -1 && !r.IsDBNull(membershipTemplate2OrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate2.Organization, r, membershipTemplate2OrganizationOffset, membershipTemplate2OrganizationOffset+1);

					// Fill 
					if(membershipTemplate2RootTemplateOffset != -1 && !r.IsDBNull(membershipTemplate2RootTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate2.RootTemplate, r, membershipTemplate2RootTemplateOffset, membershipTemplate2RootTemplateOffset+1);

					// Fill 
					if(membershipTemplate2RankMinOffset != -1 && !r.IsDBNull(membershipTemplate2RankMinOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate2.RankMin, r, membershipTemplate2RankMinOffset, membershipTemplate2RankMinOffset+1);

					// Fill 
					if(membershipTemplate2RankMaxOffset != -1 && !r.IsDBNull(membershipTemplate2RankMaxOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate2.RankMax, r, membershipTemplate2RankMaxOffset, membershipTemplate2RankMaxOffset+1);

					// Fill 
					if(membershipTemplate2ItemOffset != -1 && !r.IsDBNull(membershipTemplate2ItemOffset))
						RHItemManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate2.Item, r, membershipTemplate2ItemOffset, membershipTemplate2ItemOffset+1);

					// Fill 
					if(membershipTemplate2ItemClassOffset != -1 && !r.IsDBNull(membershipTemplate2ItemClassOffset))
						RHClassManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate2.ItemClass, r, membershipTemplate2ItemClassOffset, membershipTemplate2ItemClassOffset+1);

				}

				// Fill MembershipTemplate3
				if(membershipTemplate3Offset != -1 && !r.IsDBNull(membershipTemplate3Offset))
				{
					DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate3, r, membershipTemplate3Offset, membershipTemplate3Offset+1);

					// Fill 
					if(membershipTemplate3OrganizationOffset != -1 && !r.IsDBNull(membershipTemplate3OrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate3.Organization, r, membershipTemplate3OrganizationOffset, membershipTemplate3OrganizationOffset+1);

					// Fill 
					if(membershipTemplate3RootTemplateOffset != -1 && !r.IsDBNull(membershipTemplate3RootTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate3.RootTemplate, r, membershipTemplate3RootTemplateOffset, membershipTemplate3RootTemplateOffset+1);

					// Fill 
					if(membershipTemplate3RankMinOffset != -1 && !r.IsDBNull(membershipTemplate3RankMinOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate3.RankMin, r, membershipTemplate3RankMinOffset, membershipTemplate3RankMinOffset+1);

					// Fill 
					if(membershipTemplate3RankMaxOffset != -1 && !r.IsDBNull(membershipTemplate3RankMaxOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate3.RankMax, r, membershipTemplate3RankMaxOffset, membershipTemplate3RankMaxOffset+1);

					// Fill 
					if(membershipTemplate3ItemOffset != -1 && !r.IsDBNull(membershipTemplate3ItemOffset))
						RHItemManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate3.Item, r, membershipTemplate3ItemOffset, membershipTemplate3ItemOffset+1);

					// Fill 
					if(membershipTemplate3ItemClassOffset != -1 && !r.IsDBNull(membershipTemplate3ItemClassOffset))
						RHClassManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate3.ItemClass, r, membershipTemplate3ItemClassOffset, membershipTemplate3ItemClassOffset+1);

				}

				// Fill MembershipTemplate4
				if(membershipTemplate4Offset != -1 && !r.IsDBNull(membershipTemplate4Offset))
				{
					DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate4, r, membershipTemplate4Offset, membershipTemplate4Offset+1);

					// Fill 
					if(membershipTemplate4OrganizationOffset != -1 && !r.IsDBNull(membershipTemplate4OrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate4.Organization, r, membershipTemplate4OrganizationOffset, membershipTemplate4OrganizationOffset+1);

					// Fill 
					if(membershipTemplate4RootTemplateOffset != -1 && !r.IsDBNull(membershipTemplate4RootTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate4.RootTemplate, r, membershipTemplate4RootTemplateOffset, membershipTemplate4RootTemplateOffset+1);

					// Fill 
					if(membershipTemplate4RankMinOffset != -1 && !r.IsDBNull(membershipTemplate4RankMinOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate4.RankMin, r, membershipTemplate4RankMinOffset, membershipTemplate4RankMinOffset+1);

					// Fill 
					if(membershipTemplate4RankMaxOffset != -1 && !r.IsDBNull(membershipTemplate4RankMaxOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate4.RankMax, r, membershipTemplate4RankMaxOffset, membershipTemplate4RankMaxOffset+1);

					// Fill 
					if(membershipTemplate4ItemOffset != -1 && !r.IsDBNull(membershipTemplate4ItemOffset))
						RHItemManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate4.Item, r, membershipTemplate4ItemOffset, membershipTemplate4ItemOffset+1);

					// Fill 
					if(membershipTemplate4ItemClassOffset != -1 && !r.IsDBNull(membershipTemplate4ItemClassOffset))
						RHClassManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate4.ItemClass, r, membershipTemplate4ItemClassOffset, membershipTemplate4ItemClassOffset+1);

				}

				// Fill MembershipTemplate5
				if(membershipTemplate5Offset != -1 && !r.IsDBNull(membershipTemplate5Offset))
				{
					DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate5, r, membershipTemplate5Offset, membershipTemplate5Offset+1);

					// Fill 
					if(membershipTemplate5OrganizationOffset != -1 && !r.IsDBNull(membershipTemplate5OrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate5.Organization, r, membershipTemplate5OrganizationOffset, membershipTemplate5OrganizationOffset+1);

					// Fill 
					if(membershipTemplate5RootTemplateOffset != -1 && !r.IsDBNull(membershipTemplate5RootTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate5.RootTemplate, r, membershipTemplate5RootTemplateOffset, membershipTemplate5RootTemplateOffset+1);

					// Fill 
					if(membershipTemplate5RankMinOffset != -1 && !r.IsDBNull(membershipTemplate5RankMinOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate5.RankMin, r, membershipTemplate5RankMinOffset, membershipTemplate5RankMinOffset+1);

					// Fill 
					if(membershipTemplate5RankMaxOffset != -1 && !r.IsDBNull(membershipTemplate5RankMaxOffset))
						DojoRankManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate5.RankMax, r, membershipTemplate5RankMaxOffset, membershipTemplate5RankMaxOffset+1);

					// Fill 
					if(membershipTemplate5ItemOffset != -1 && !r.IsDBNull(membershipTemplate5ItemOffset))
						RHItemManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate5.Item, r, membershipTemplate5ItemOffset, membershipTemplate5ItemOffset+1);

					// Fill 
					if(membershipTemplate5ItemClassOffset != -1 && !r.IsDBNull(membershipTemplate5ItemClassOffset))
						RHClassManager.FillFromReader(dojoMemberTypeTemplate.membershipTemplate5.ItemClass, r, membershipTemplate5ItemClassOffset, membershipTemplate5ItemClassOffset+1);

				}

				dojoMemberTypeTemplateCollection.Add(dojoMemberTypeTemplate);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoMemberTypeTemplateCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoMemberTypeTemplate ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoMemberTypeTemplate dojoMemberTypeTemplate = new DojoMemberTypeTemplate();
			FillFromReader(dojoMemberTypeTemplate, r, idOffset, dataOffset);
			return dojoMemberTypeTemplate;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoMemberTypeTemplate dojoMemberTypeTemplate, IDataReader r, int idOffset, int dataOffset)
		{
			dojoMemberTypeTemplate.iD = r.GetInt32(idOffset);
			dojoMemberTypeTemplate.isSynced = true;
			dojoMemberTypeTemplate.isPlaceHolder = false;

			dojoMemberTypeTemplate.createDate = r.GetDateTime(0+dataOffset);
			dojoMemberTypeTemplate.modifyDate = r.GetDateTime(1+dataOffset);
			dojoMemberTypeTemplate.name = r.GetString(2+dataOffset);
			dojoMemberTypeTemplate.description = r.GetString(3+dataOffset);
			dojoMemberTypeTemplate.orderNum = r.GetInt32(4+dataOffset);
			if(!r.IsDBNull(5+dataOffset) && r.GetInt32(5+dataOffset) > 0)
			{
				dojoMemberTypeTemplate.memberType = DojoMemberType.NewPlaceHolder(r.GetInt32(5+dataOffset));
			}
			dojoMemberTypeTemplate.memberTypeTreeHash = r.GetString(6+dataOffset);
			if(!r.IsDBNull(7+dataOffset) && r.GetInt32(7+dataOffset) > 0)
			{
				dojoMemberTypeTemplate.parent = DojoMemberTypeTemplate.NewPlaceHolder(r.GetInt32(7+dataOffset));
			}
			if(!r.IsDBNull(8+dataOffset) && r.GetInt32(8+dataOffset) > 0)
			{
				dojoMemberTypeTemplate.root = DojoMemberTypeTemplate.NewPlaceHolder(r.GetInt32(8+dataOffset));
			}
			if(!r.IsDBNull(9+dataOffset) && r.GetInt32(9+dataOffset) > 0)
			{
				dojoMemberTypeTemplate.initialRank = DojoRank.NewPlaceHolder(r.GetInt32(9+dataOffset));
			}
			if(!r.IsDBNull(10+dataOffset) && r.GetInt32(10+dataOffset) > 0)
			{
				dojoMemberTypeTemplate.initialRole = GreyFoxRole.NewPlaceHolder(r.GetInt32(10+dataOffset));
			}
			dojoMemberTypeTemplate.initialEmailFrom = r.GetString(11+dataOffset);
			dojoMemberTypeTemplate.initialEmailBody = r.GetString(12+dataOffset);
			dojoMemberTypeTemplate.allowGuestPurchase = r.GetBoolean(13+dataOffset);
			dojoMemberTypeTemplate.allowPurchase = r.GetBoolean(14+dataOffset);
			dojoMemberTypeTemplate.allowRenewal = r.GetBoolean(15+dataOffset);
			dojoMemberTypeTemplate.allowAutoRenewal = r.GetBoolean(16+dataOffset);
			dojoMemberTypeTemplate.ageYearsMax = r.GetInt32(17+dataOffset);
			dojoMemberTypeTemplate.ageYearsMin = r.GetInt32(18+dataOffset);
			dojoMemberTypeTemplate.memberForMin = r.GetInt32(19+dataOffset);
			dojoMemberTypeTemplate.memberForMax = r.GetInt32(20+dataOffset);
			if(!r.IsDBNull(21+dataOffset) && r.GetInt32(21+dataOffset) > 0)
			{
				dojoMemberTypeTemplate.rankMin = DojoRank.NewPlaceHolder(r.GetInt32(21+dataOffset));
			}
			if(!r.IsDBNull(22+dataOffset) && r.GetInt32(22+dataOffset) > 0)
			{
				dojoMemberTypeTemplate.rankMax = DojoRank.NewPlaceHolder(r.GetInt32(22+dataOffset));
			}
			if(!r.IsDBNull(23+dataOffset) && r.GetInt32(23+dataOffset) > 0)
			{
				dojoMemberTypeTemplate.membershipTemplate1 = DojoMembershipTemplate.NewPlaceHolder(r.GetInt32(23+dataOffset));
			}
			if(!r.IsDBNull(24+dataOffset) && r.GetInt32(24+dataOffset) > 0)
			{
				dojoMemberTypeTemplate.membershipTemplate2 = DojoMembershipTemplate.NewPlaceHolder(r.GetInt32(24+dataOffset));
			}
			if(!r.IsDBNull(25+dataOffset) && r.GetInt32(25+dataOffset) > 0)
			{
				dojoMemberTypeTemplate.membershipTemplate3 = DojoMembershipTemplate.NewPlaceHolder(r.GetInt32(25+dataOffset));
			}
			if(!r.IsDBNull(26+dataOffset) && r.GetInt32(26+dataOffset) > 0)
			{
				dojoMemberTypeTemplate.membershipTemplate4 = DojoMembershipTemplate.NewPlaceHolder(r.GetInt32(26+dataOffset));
			}
			if(!r.IsDBNull(27+dataOffset) && r.GetInt32(27+dataOffset) > 0)
			{
				dojoMemberTypeTemplate.membershipTemplate5 = DojoMembershipTemplate.NewPlaceHolder(r.GetInt32(27+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_MemberTypeTemplates WHERE DojoMemberTypeTemplateID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_MemberTypeTemplates ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_MemberTypeTemplates_MemberType FOREIGN KEY (MemberTypeID) REFERENCES kitTessen_MemberTypes (DojoMemberTypeID),");
			query.Append(" CONSTRAINT FK_kitTessen_MemberTypeTemplates_Parent FOREIGN KEY (ParentID) REFERENCES kitTessen_MemberTypeTemplates (DojoMemberTypeTemplateID),");
			query.Append(" CONSTRAINT FK_kitTessen_MemberTypeTemplates_Root FOREIGN KEY (RootID) REFERENCES kitTessen_MemberTypeTemplates (DojoMemberTypeTemplateID),");
			query.Append(" CONSTRAINT FK_kitTessen_MemberTypeTemplates_InitialRank FOREIGN KEY (InitialRankID) REFERENCES kitTessen_Ranks (DojoRankID),");
			query.Append(" CONSTRAINT FK_kitTessen_MemberTypeTemplates_InitialRole FOREIGN KEY (InitialRoleID) REFERENCES sysGlobal_Roles (GreyFoxRoleID),");
			query.Append(" CONSTRAINT FK_kitTessen_MemberTypeTemplates_RankMin FOREIGN KEY (RankMinID) REFERENCES kitTessen_Ranks (DojoRankID),");
			query.Append(" CONSTRAINT FK_kitTessen_MemberTypeTemplates_RankMax FOREIGN KEY (RankMaxID) REFERENCES kitTessen_Ranks (DojoRankID),");
			query.Append(" CONSTRAINT FK_kitTessen_MemberTypeTemplates_MembershipTemplate1 FOREIGN KEY (MembershipTemplate1ID) REFERENCES kitTessen_MembershipTemplates (DojoMembershipTemplateID),");
			query.Append(" CONSTRAINT FK_kitTessen_MemberTypeTemplates_MembershipTemplate2 FOREIGN KEY (MembershipTemplate2ID) REFERENCES kitTessen_MembershipTemplates (DojoMembershipTemplateID),");
			query.Append(" CONSTRAINT FK_kitTessen_MemberTypeTemplates_MembershipTemplate3 FOREIGN KEY (MembershipTemplate3ID) REFERENCES kitTessen_MembershipTemplates (DojoMembershipTemplateID),");
			query.Append(" CONSTRAINT FK_kitTessen_MemberTypeTemplates_MembershipTemplate4 FOREIGN KEY (MembershipTemplate4ID) REFERENCES kitTessen_MembershipTemplates (DojoMembershipTemplateID),");
			query.Append(" CONSTRAINT FK_kitTessen_MemberTypeTemplates_MembershipTemplate5 FOREIGN KEY (MembershipTemplate5ID) REFERENCES kitTessen_MembershipTemplates (DojoMembershipTemplateID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_MemberTypeTemplates ");
				query.Append(" (DojoMemberTypeTemplateID COUNTER(1,1) CONSTRAINT PK_kitTessen_MemberTypeTemplates PRIMARY KEY, " +
					"CreateDate DATETIME," +
					"ModifyDate DATETIME," +
					"Name TEXT(75)," +
					"Description MEMO," +
					"OrderNum LONG," +
					"MemberTypeID LONG," +
					"MemberTypeTreeHash TEXT(75)," +
					"ParentID LONG," +
					"RootID LONG," +
					"InitialRankID LONG," +
					"InitialRoleID LONG," +
					"InitialEmailFrom TEXT(75)," +
					"InitialEmailBody MEMO," +
					"AllowGuestPurchase BIT," +
					"AllowPurchase BIT," +
					"AllowRenewal BIT," +
					"AllowAutoRenewal BIT," +
					"AgeYearsMax LONG," +
					"AgeYearsMin LONG," +
					"MemberForMin LONG," +
					"MemberForMax LONG," +
					"RankMinID LONG," +
					"RankMaxID LONG," +
					"MembershipTemplate1ID LONG," +
					"MembershipTemplate2ID LONG," +
					"MembershipTemplate3ID LONG," +
					"MembershipTemplate4ID LONG," +
					"MembershipTemplate5ID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_MemberTypeTemplates ");
				query.Append(" (DojoMemberTypeTemplateID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_MemberTypeTemplates PRIMARY KEY, " +
					"CreateDate DATETIME," +
					"ModifyDate DATETIME," +
					"Name NVARCHAR(75)," +
					"Description NTEXT," +
					"OrderNum INT," +
					"MemberTypeID INT," +
					"MemberTypeTreeHash NVARCHAR(75)," +
					"ParentID INT," +
					"RootID INT," +
					"InitialRankID INT," +
					"InitialRoleID INT," +
					"InitialEmailFrom NVARCHAR(75)," +
					"InitialEmailBody NTEXT," +
					"AllowGuestPurchase BIT," +
					"AllowPurchase BIT," +
					"AllowRenewal BIT," +
					"AllowAutoRenewal BIT," +
					"AgeYearsMax INT," +
					"AgeYearsMin INT," +
					"MemberForMin INT," +
					"MemberForMax INT," +
					"RankMinID INT," +
					"RankMaxID INT," +
					"MembershipTemplate1ID INT," +
					"MembershipTemplate2ID INT," +
					"MembershipTemplate3ID INT," +
					"MembershipTemplate4ID INT," +
					"MembershipTemplate5ID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoMemberTypeTemplate dojoMemberTypeTemplate)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_MemberTypeTemplates_" + dojoMemberTypeTemplate.iD.ToString(), dojoMemberTypeTemplate);
		}

		private static DojoMemberTypeTemplate cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_MemberTypeTemplates_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoMemberTypeTemplate)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_MemberTypeTemplates_" + id.ToString());
		}

		#endregion

	}
}

