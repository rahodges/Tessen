/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.Rappahanock;
using Amns.GreyFox.People;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoSeminarRegistrationOptionFlags : int { ParentOption,
				ParentOptionItem,
				ParentRegistration,
				ParentRegistrationParentSeminar,
				ParentRegistrationContact,
				ParentRegistrationInvoiceLine,
				ParentRegistrationSalesOrderLine,
				ParentRegistrationCustomer};

	#endregion

	/// <summary>
	/// Datamanager for DojoSeminarRegistrationOption objects.
	/// </summary>
	public class DojoSeminarRegistrationOptionManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_SeminarRegistrationOptions";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoSeminarRegistrationOptionID",
			"Quantity",
			"TotalFee",
			"CostPerItem",
			"ParentOptionID",
			"ParentRegistrationID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoSeminarRegistrationOptionID", "LONG", "-1" },
			{ "Quantity", "CURRENCY", "" },
			{ "TotalFee", "CURRENCY", "" },
			{ "CostPerItem", "CURRENCY", "" },
			{ "ParentOptionID", "LONG", "null" },
			{ "ParentRegistrationID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoSeminarRegistrationOptionManager()
		{
		}

		public DojoSeminarRegistrationOptionManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoSeminarRegistrationOptionManager.isInitialized)
			{
				DojoSeminarRegistrationOptionManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoSeminarRegistrationOption into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoSeminarRegistrationOption">The DojoSeminarRegistrationOption to insert into the database.</param>
		internal static int _insert(DojoSeminarRegistrationOption dojoSeminarRegistrationOption)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_SeminarRegistrationOptions " +
				"(" +
				"Quantity," +
				"TotalFee," +
				"CostPerItem," +
				"ParentOptionID," +
				"ParentRegistrationID) VALUES (" +
				"@Quantity," +
				"@TotalFee," +
				"@CostPerItem," +
				"@ParentOptionID," +
				"@ParentRegistrationID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoSeminarRegistrationOption);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoSeminarRegistrationOption);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoSeminarRegistrationOption in cache.
			if(cacheEnabled) cacheStore(dojoSeminarRegistrationOption);
			// ************************* WARNING **************************** 
			// Insert operations must invalidate the cached collections.
			// Invalidation MUST invalidate any foreign cached collections that 
			// with children objects this manager provides or else the foreign 
			// caches retain invalidated and potentially corrupt data! 
			// NOTE:
			// NitroCast only allows collection caching on objects that do not 
			// have any children objects to minimize potential corruption. 
			invalidateCachedCollections();
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoSeminarRegistrationOption dojoSeminarRegistrationOption)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_SeminarRegistrationOptions SET Quantity=@Quantity," +
				"TotalFee=@TotalFee," +
				"CostPerItem=@CostPerItem," +
				"ParentOptionID=@ParentOptionID," +
				"ParentRegistrationID=@ParentRegistrationID WHERE DojoSeminarRegistrationOptionID=@DojoSeminarRegistrationOptionID;");

			fillParameters(database, dbCommand, dojoSeminarRegistrationOption);
			database.AddInParameter(dbCommand, "DojoSeminarRegistrationOptionID", DbType.Int32, dojoSeminarRegistrationOption.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoSeminarRegistrationOption in cache.
			if (cacheEnabled) cacheStore(dojoSeminarRegistrationOption);
			// ************************* WARNING **************************** 
			// Update operations must invalidate the cached collections.
			// Invalidation MUST invalidate any foreign cached collections that 
			// with children objects this manager provides or else the foreign 
			// caches retain invalidated and potentially corrupt data! 
			// NOTE:
			// NitroCast only allows collection caching on objects that do not 
			// have any children objects to minimize potential corruption. 
			// ************************* WARNING **************************** 

			invalidateCachedCollections();

			return dojoSeminarRegistrationOption.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoSeminarRegistrationOption dojoSeminarRegistrationOption)
		{
			#region Default

			addParameter(database, dbCommand, "@Quantity", DbType.Currency, dojoSeminarRegistrationOption.quantity);
			addParameter(database, dbCommand, "@TotalFee", DbType.Currency, dojoSeminarRegistrationOption.totalFee);
			addParameter(database, dbCommand, "@CostPerItem", DbType.Currency, dojoSeminarRegistrationOption.costPerItem);
			if(dojoSeminarRegistrationOption.parentOption == null)
			{
				addParameter(database, dbCommand, "@ParentOptionID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ParentOptionID", DbType.Int32, dojoSeminarRegistrationOption.parentOption.ID);
			}
			if(dojoSeminarRegistrationOption.parentRegistration == null)
			{
				addParameter(database, dbCommand, "@ParentRegistrationID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ParentRegistrationID", DbType.Int32, dojoSeminarRegistrationOption.parentRegistration.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoSeminarRegistrationOption dojoSeminarRegistrationOption)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoSeminarRegistrationOption.iD);
				if(cachedObject != null)
				{
					((DojoSeminarRegistrationOption)cachedObject).CopyTo(dojoSeminarRegistrationOption, true);
					return dojoSeminarRegistrationOption.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_SeminarRegistrationOptions WHERE DojoSeminarRegistrationOptionID=");
			query.Append(dojoSeminarRegistrationOption.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoSeminarRegistrationOptionID '{0}'.", 
					dojoSeminarRegistrationOption.iD)));
			}

			FillFromReader(dojoSeminarRegistrationOption, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoSeminarRegistrationOption in cache.
			if(cacheEnabled) cacheStore(dojoSeminarRegistrationOption);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoSeminarRegistrationOptionCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoSeminarRegistrationOptionCollection GetCollection(string whereClause, string sortClause, params DojoSeminarRegistrationOptionFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoSeminarRegistrationOptionCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoSeminarRegistrationOptionFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoSeminarRegistrationOptionCollection dojoSeminarRegistrationOptionCollection;
			int hashcode;

			// Cache Handling

			hashcode = 0;

			if(cacheEnabled)
			{
				hashcode = topCount.GetHashCode() + 
					whereClause.GetHashCode() +
					sortClause.GetHashCode() +
					tableName.GetHashCode();

				DojoSeminarRegistrationOptionCollection collection = cacheFindCollection(hashcode);
				if(collection != null)
				{
					return collection;
				}
			}

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoSeminarRegistrationOption.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int parentOptionOffset = -1;
			int parentOptionItemOffset = -1;
			int parentRegistrationOffset = -1;
			int parentRegistrationParentSeminarOffset = -1;
			int parentRegistrationContactOffset = -1;
			int parentRegistrationInvoiceLineOffset = -1;
			int parentRegistrationSalesOrderLineOffset = -1;
			int parentRegistrationCustomerOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoSeminarRegistrationOptionFlags.ParentOption:
							for(int i = 0; i <= DojoSeminarOptionManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ParentOption.");
								query.Append(DojoSeminarOptionManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentOptionOffset = innerJoinOffset;
							innerJoinOffset = parentOptionOffset + DojoSeminarOptionManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationOptionFlags.ParentOptionItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ParentOption_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentOptionItemOffset = innerJoinOffset;
							innerJoinOffset = parentOptionItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationOptionFlags.ParentRegistration:
							for(int i = 0; i <= DojoSeminarRegistrationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ParentRegistration.");
								query.Append(DojoSeminarRegistrationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentRegistrationOffset = innerJoinOffset;
							innerJoinOffset = parentRegistrationOffset + DojoSeminarRegistrationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationOptionFlags.ParentRegistrationParentSeminar:
							for(int i = 0; i <= DojoSeminarManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ParentRegistration_ParentSeminar.");
								query.Append(DojoSeminarManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentRegistrationParentSeminarOffset = innerJoinOffset;
							innerJoinOffset = parentRegistrationParentSeminarOffset + DojoSeminarManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationOptionFlags.ParentRegistrationContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ParentRegistration_Contact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentRegistrationContactOffset = innerJoinOffset;
							innerJoinOffset = parentRegistrationContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationOptionFlags.ParentRegistrationInvoiceLine:
							for(int i = 0; i <= RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ParentRegistration_InvoiceLine.");
								query.Append(RHInvoiceLineManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentRegistrationInvoiceLineOffset = innerJoinOffset;
							innerJoinOffset = parentRegistrationInvoiceLineOffset + RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationOptionFlags.ParentRegistrationSalesOrderLine:
							for(int i = 0; i <= RHSalesOrderLineManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ParentRegistration_SalesOrderLine.");
								query.Append(RHSalesOrderLineManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentRegistrationSalesOrderLineOffset = innerJoinOffset;
							innerJoinOffset = parentRegistrationSalesOrderLineOffset + RHSalesOrderLineManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationOptionFlags.ParentRegistrationCustomer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ParentRegistration_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentRegistrationCustomerOffset = innerJoinOffset;
							innerJoinOffset = parentRegistrationCustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_SeminarRegistrationOptions AS DojoSeminarRegistrationOption");
			}
			else
			{
				query.Append(" FROM kitTessen_SeminarRegistrationOptions AS DojoSeminarRegistrationOption");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoSeminarRegistrationOptionFlags.ParentOption:
							query.Append(" LEFT JOIN kitTessen_SeminarOptions AS ParentOption ON DojoSeminarRegistrationOption.ParentOptionID = ParentOption.DojoSeminarOptionID)");
							break;
						case DojoSeminarRegistrationOptionFlags.ParentOptionItem:
							query.Append(" LEFT JOIN RH_Items AS ParentOption_Item ON ParentOption.ItemID = ParentOption_Item.RHItemID)");
							break;
						case DojoSeminarRegistrationOptionFlags.ParentRegistration:
							query.Append(" LEFT JOIN kitTessen_SeminarRegistrations AS ParentRegistration ON DojoSeminarRegistrationOption.ParentRegistrationID = ParentRegistration.DojoSeminarRegistrationID)");
							break;
						case DojoSeminarRegistrationOptionFlags.ParentRegistrationParentSeminar:
							query.Append(" LEFT JOIN kitTessen_Seminars AS ParentRegistration_ParentSeminar ON ParentRegistration.ParentSeminarID = ParentRegistration_ParentSeminar.DojoSeminarID)");
							break;
						case DojoSeminarRegistrationOptionFlags.ParentRegistrationContact:
							query.Append(" LEFT JOIN kitTessen_SeminarRegistrations_Contacts AS ParentRegistration_Contact ON ParentRegistration.ContactID = ParentRegistration_Contact.GreyFoxContactID)");
							break;
						case DojoSeminarRegistrationOptionFlags.ParentRegistrationInvoiceLine:
							query.Append(" LEFT JOIN RH_InvoiceLines AS ParentRegistration_InvoiceLine ON ParentRegistration.InvoiceLineID = ParentRegistration_InvoiceLine.RHInvoiceLineID)");
							break;
						case DojoSeminarRegistrationOptionFlags.ParentRegistrationSalesOrderLine:
							query.Append(" LEFT JOIN RH_SalesOrderLines AS ParentRegistration_SalesOrderLine ON ParentRegistration.SalesOrderLineID = ParentRegistration_SalesOrderLine.RHSalesOrderLineID)");
							break;
						case DojoSeminarRegistrationOptionFlags.ParentRegistrationCustomer:
							query.Append(" LEFT JOIN RH_Customers AS ParentRegistration_Customer ON ParentRegistration.CustomerID = ParentRegistration_Customer.RHCustomerID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoSeminarRegistrationOptionCollection = new DojoSeminarRegistrationOptionCollection();

			while(r.Read())
			{
				DojoSeminarRegistrationOption dojoSeminarRegistrationOption = ParseFromReader(r, 0, 1);

				// Fill ParentOption
				if(parentOptionOffset != -1 && !r.IsDBNull(parentOptionOffset))
				{
					DojoSeminarOptionManager.FillFromReader(dojoSeminarRegistrationOption.parentOption, r, parentOptionOffset, parentOptionOffset+1);

					// Fill 
					if(parentOptionItemOffset != -1 && !r.IsDBNull(parentOptionItemOffset))
						RHItemManager.FillFromReader(dojoSeminarRegistrationOption.parentOption.Item, r, parentOptionItemOffset, parentOptionItemOffset+1);

				}

				// Fill ParentRegistration
				if(parentRegistrationOffset != -1 && !r.IsDBNull(parentRegistrationOffset))
				{
					DojoSeminarRegistrationManager.FillFromReader(dojoSeminarRegistrationOption.parentRegistration, r, parentRegistrationOffset, parentRegistrationOffset+1);

					// Fill 
					if(parentRegistrationParentSeminarOffset != -1 && !r.IsDBNull(parentRegistrationParentSeminarOffset))
						DojoSeminarManager.FillFromReader(dojoSeminarRegistrationOption.parentRegistration.ParentSeminar, r, parentRegistrationParentSeminarOffset, parentRegistrationParentSeminarOffset+1);

					// Fill 
					if(parentRegistrationContactOffset != -1 && !r.IsDBNull(parentRegistrationContactOffset))
						GreyFoxContactManager.FillFromReader(dojoSeminarRegistrationOption.parentRegistration.Contact, "kitTessen_SeminarRegistrations_Contacts", r, parentRegistrationContactOffset, parentRegistrationContactOffset+1);

					// Fill Invoice Line
					if(parentRegistrationInvoiceLineOffset != -1 && !r.IsDBNull(parentRegistrationInvoiceLineOffset))
						RHInvoiceLineManager.FillFromReader(dojoSeminarRegistrationOption.parentRegistration.InvoiceLine, r, parentRegistrationInvoiceLineOffset, parentRegistrationInvoiceLineOffset+1);

					// Fill Sales Order Line
					if(parentRegistrationSalesOrderLineOffset != -1 && !r.IsDBNull(parentRegistrationSalesOrderLineOffset))
						RHSalesOrderLineManager.FillFromReader(dojoSeminarRegistrationOption.parentRegistration.SalesOrderLine, r, parentRegistrationSalesOrderLineOffset, parentRegistrationSalesOrderLineOffset+1);

					// Fill Registrant
					if(parentRegistrationCustomerOffset != -1 && !r.IsDBNull(parentRegistrationCustomerOffset))
						RHCustomerManager.FillFromReader(dojoSeminarRegistrationOption.parentRegistration.Customer, r, parentRegistrationCustomerOffset, parentRegistrationCustomerOffset+1);

				}

				dojoSeminarRegistrationOptionCollection.Add(dojoSeminarRegistrationOption);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			if(cacheEnabled)
			{
				cacheStoreCollection(hashcode, dojoSeminarRegistrationOptionCollection);
			}

			return dojoSeminarRegistrationOptionCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoSeminarRegistrationOption ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoSeminarRegistrationOption dojoSeminarRegistrationOption = new DojoSeminarRegistrationOption();
			FillFromReader(dojoSeminarRegistrationOption, r, idOffset, dataOffset);
			return dojoSeminarRegistrationOption;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoSeminarRegistrationOption dojoSeminarRegistrationOption, IDataReader r, int idOffset, int dataOffset)
		{
			dojoSeminarRegistrationOption.iD = r.GetInt32(idOffset);
			dojoSeminarRegistrationOption.isSynced = true;
			dojoSeminarRegistrationOption.isPlaceHolder = false;

			dojoSeminarRegistrationOption.quantity = r.GetDecimal(0+dataOffset);
			dojoSeminarRegistrationOption.totalFee = r.GetDecimal(1+dataOffset);
			dojoSeminarRegistrationOption.costPerItem = r.GetDecimal(2+dataOffset);
			if(!r.IsDBNull(3+dataOffset) && r.GetInt32(3+dataOffset) > 0)
			{
				dojoSeminarRegistrationOption.parentOption = DojoSeminarOption.NewPlaceHolder(r.GetInt32(3+dataOffset));
			}
			if(!r.IsDBNull(4+dataOffset) && r.GetInt32(4+dataOffset) > 0)
			{
				dojoSeminarRegistrationOption.parentRegistration = DojoSeminarRegistration.NewPlaceHolder(r.GetInt32(4+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_SeminarRegistrationOptions WHERE DojoSeminarRegistrationOptionID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
			// ************************* WARNING **************************** 
			// Insert operations must invalidate the cached collections.
			// Invalidation MUST invalidate any foreign cached collections that 
			// with children objects this manager provides or else the foreign 
			// caches retain invalidated and potentially corrupt data! 
			// NOTE:
			// NitroCast only allows collection caching on objects that do not 
			// have any children objects to minimize potential corruption. 
			invalidateCachedCollections();
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_SeminarRegistrationOptions ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_SeminarRegistrationOptions_ParentOption FOREIGN KEY (ParentOptionID) REFERENCES kitTessen_SeminarOptions (DojoSeminarOptionID),");
			query.Append(" CONSTRAINT FK_kitTessen_SeminarRegistrationOptions_ParentRegistration FOREIGN KEY (ParentRegistrationID) REFERENCES kitTessen_SeminarRegistrations (DojoSeminarRegistrationID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_SeminarRegistrationOptions ");
				query.Append(" (DojoSeminarRegistrationOptionID COUNTER(1,1) CONSTRAINT PK_kitTessen_SeminarRegistrationOptions PRIMARY KEY, " +
					"Quantity CURRENCY," +
					"TotalFee CURRENCY," +
					"CostPerItem CURRENCY," +
					"ParentOptionID LONG," +
					"ParentRegistrationID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_SeminarRegistrationOptions ");
				query.Append(" (DojoSeminarRegistrationOptionID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_SeminarRegistrationOptions PRIMARY KEY, " +
					"Quantity MONEY," +
					"TotalFee MONEY," +
					"CostPerItem MONEY," +
					"ParentOptionID INT," +
					"ParentRegistrationID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoSeminarRegistrationOption dojoSeminarRegistrationOption)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_SeminarRegistrationOptions_" + dojoSeminarRegistrationOption.iD.ToString(), dojoSeminarRegistrationOption);
		}

		private static DojoSeminarRegistrationOption cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_SeminarRegistrationOptions_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoSeminarRegistrationOption)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_SeminarRegistrationOptions_" + id.ToString());
		}

		private void cacheStoreCollection(int hashCode, DojoSeminarRegistrationOptionCollection dojoSeminarRegistrationOptionCollection)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add(tableName + "_Collection_" + hashCode.ToString(), dojoSeminarRegistrationOptionCollection);
		}

		private DojoSeminarRegistrationOptionCollection cacheFindCollection(int hashCode)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData(tableName + "_Collection_" + hashCode.ToString());
			if(cachedObject == null)
				return null;
			return (DojoSeminarRegistrationOptionCollection)cachedObject;
		}

		private void cacheRemoveCollection(int hashCode)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove(tableName + "_Collection_" + hashCode.ToString());
		}

		private static void invalidateCachedCollections()
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Flush();
		}

		#endregion

		//--- Begin Custom Code ---
																																																																																																																																																																																																																																																																																																																																																																																																												
		public static void ClearOptions(DojoSeminarRegistration registration)
		{
			StringBuilder s = new StringBuilder();
			s.Append(registration.ID);
			s.Append(';');

            Database database = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = database.GetSqlStringCommand("DELETE FROM kitTessen_SeminarRegistrationOptions WHERE ParentRegistrationID=" +
                registration.ID.ToString());
            database.ExecuteNonQuery(dbCommand);
		}

		//--- End Custom Code ---
	}
}

