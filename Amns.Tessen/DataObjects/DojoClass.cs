/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using Amns.GreyFox.People;

namespace Amns.Tessen
{
	/// <summary>
	/// Summary of MyClass
	/// </summary>
	public class DojoClass : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal string name;
		internal DojoMember instructor;
		internal DojoSeminar parentSeminar;
		internal DojoClassDefinition parentDefinition;
		internal GreyFoxContact location;
		internal DojoAccessControlGroup accessControlGroup;
		internal int occupancyMax;
		internal int occupancyTarget;
		internal int occupancyCurrent;
		internal DateTime occupancyCheckDate;
		internal DateTime signinStart;
		internal DateTime signinEnd;
		internal DateTime classStart;
		internal DateTime classEnd;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoClass Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoClass as a Placeholder. Placeholders only contain 
		/// a DojoClass ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Name
		{
			get
			{
				EnsurePreLoad();
				return name;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= name == value;
				name = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Instructor
		{
			get
			{
				EnsurePreLoad();
				return instructor;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(instructor == null)
					{
						return;
					}
					else
					{
						instructor = value;
						isSynced = false;
					}
				}
				else
				{
					if(instructor != null && value.ID == instructor.ID)
					{
						return; 
					}
					else
					{
						instructor = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoSeminar ParentSeminar
		{
			get
			{
				EnsurePreLoad();
				return parentSeminar;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(parentSeminar == null)
					{
						return;
					}
					else
					{
						parentSeminar = value;
						isSynced = false;
					}
				}
				else
				{
					if(parentSeminar != null && value.ID == parentSeminar.ID)
					{
						return; 
					}
					else
					{
						parentSeminar = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoClassDefinition ParentDefinition
		{
			get
			{
				EnsurePreLoad();
				return parentDefinition;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(parentDefinition == null)
					{
						return;
					}
					else
					{
						parentDefinition = value;
						isSynced = false;
					}
				}
				else
				{
					if(parentDefinition != null && value.ID == parentDefinition.ID)
					{
						return; 
					}
					else
					{
						parentDefinition = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public GreyFoxContact Location
		{
			get
			{
				EnsurePreLoad();
				return location;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(location == null)
					{
						return;
					}
					else
					{
						location = value;
						isSynced = false;
					}
				}
				else
				{
					if(value.TableName != "kitTessen_Locations") throw(new Exception("Cannot set Location. Table names mismatched."));
					if(location != null && value.ID == location.ID)
					{
						return; 
					}
					else
					{
						location = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoAccessControlGroup AccessControlGroup
		{
			get
			{
				EnsurePreLoad();
				return accessControlGroup;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(accessControlGroup == null)
					{
						return;
					}
					else
					{
						accessControlGroup = value;
						isSynced = false;
					}
				}
				else
				{
					if(accessControlGroup != null && value.ID == accessControlGroup.ID)
					{
						return; 
					}
					else
					{
						accessControlGroup = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public int OccupancyMax
		{
			get
			{
				EnsurePreLoad();
				return occupancyMax;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= occupancyMax == value;
				occupancyMax = value;
			}
		}

		/// <summary>
		/// </summary>
		public int OccupancyTarget
		{
			get
			{
				EnsurePreLoad();
				return occupancyTarget;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= occupancyTarget == value;
				occupancyTarget = value;
			}
		}

		/// <summary>
		/// </summary>
		public int OccupancyCurrent
		{
			get
			{
				EnsurePreLoad();
				return occupancyCurrent;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= occupancyCurrent == value;
				occupancyCurrent = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime OccupancyCheckDate
		{
			get
			{
				EnsurePreLoad();
				return occupancyCheckDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= occupancyCheckDate == value;
				occupancyCheckDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime SigninStart
		{
			get
			{
				EnsurePreLoad();
				return signinStart;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= signinStart == value;
				signinStart = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime SigninEnd
		{
			get
			{
				EnsurePreLoad();
				return signinEnd;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= signinEnd == value;
				signinEnd = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime ClassStart
		{
			get
			{
				EnsurePreLoad();
				return classStart;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= classStart == value;
				classStart = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime ClassEnd
		{
			get
			{
				EnsurePreLoad();
				return classEnd;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= classEnd == value;
				classEnd = value;
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoClass.
		/// </summary>
		public DojoClass()
		{
		}

		public DojoClass(int id)
		{
			this.iD = id;
			isSynced = DojoClassManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoClassManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoClass object state to the database.
		/// </summary>
		public int Save()
		{
			if(instructor != null)
				instructor.Save();
			if(parentSeminar != null)
				parentSeminar.Save();
			if(parentDefinition != null)
				parentDefinition.Save();
			if(location != null)
				location.Save();

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoClassManager._insert(this);
			else
				DojoClassManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoClassManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoClass object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoClass object reflecting the replicated DojoClass object.</returns>
		public DojoClass Duplicate()
		{
			DojoClass clonedDojoClass = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoClass.iD = DojoClassManager._insert(clonedDojoClass);
			clonedDojoClass.isSynced = true;
			return clonedDojoClass;
		}

		/// <summary>
		/// Overwrites and existing DojoClass object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoClassManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoClass object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoClass object reflecting the replicated DojoClass object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoClass object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoClass object reflecting the replicated DojoClass object.</returns>
		public DojoClass Clone()
		{
			DojoClass clonedDojoClass = new DojoClass();
			clonedDojoClass.iD = iD;
			clonedDojoClass.isSynced = isSynced;
			clonedDojoClass.name = name;
			clonedDojoClass.occupancyMax = occupancyMax;
			clonedDojoClass.occupancyTarget = occupancyTarget;
			clonedDojoClass.occupancyCurrent = occupancyCurrent;
			clonedDojoClass.occupancyCheckDate = occupancyCheckDate;
			clonedDojoClass.signinStart = signinStart;
			clonedDojoClass.signinEnd = signinEnd;
			clonedDojoClass.classStart = classStart;
			clonedDojoClass.classEnd = classEnd;


			if(instructor != null)
				clonedDojoClass.instructor = instructor;

			if(parentSeminar != null)
				clonedDojoClass.parentSeminar = parentSeminar;

			if(parentDefinition != null)
				clonedDojoClass.parentDefinition = parentDefinition;

			if(location != null)
				clonedDojoClass.location = location;

			if(accessControlGroup != null)
				clonedDojoClass.accessControlGroup = accessControlGroup;

			return clonedDojoClass;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoClass.
		/// </summary>
		/// <returns> A new DojoClass object reflecting the cloned DojoClass object.</returns>
		public DojoClass Copy()
		{
			DojoClass dojoClass = new DojoClass();
			CopyTo(dojoClass);
			return dojoClass;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoClass.
		/// </summary>
		/// <returns> A new DojoClass object reflecting the cloned DojoClass object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoClass from its children.</param>
		public DojoClass Copy(bool isolation)
		{
			DojoClass dojoClass = new DojoClass();
			CopyTo(dojoClass, isolation);
			return dojoClass;
		}

		/// <summary>
		/// Deep copies the current DojoClass to another instance of DojoClass.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoClass">The DojoClass to copy to.</param>
		public void CopyTo(DojoClass dojoClass)
		{
			CopyTo(dojoClass, false);
		}

		/// <summary>
		/// Deep copies the current DojoClass to another instance of DojoClass.
		/// </summary>
		/// <param name="DojoClass">The DojoClass to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoClass from its children.</param>
		public void CopyTo(DojoClass dojoClass, bool isolation)
		{
			dojoClass.iD = iD;
			dojoClass.isPlaceHolder = isPlaceHolder;
			dojoClass.isSynced = isSynced;
			dojoClass.name = name;
			if(instructor != null)
			{
				if(isolation)
				{
					dojoClass.instructor = instructor.NewPlaceHolder();
				}
				else
				{
					dojoClass.instructor = instructor.Copy(false);
				}
			}
			if(parentSeminar != null)
			{
				if(isolation)
				{
					dojoClass.parentSeminar = parentSeminar.NewPlaceHolder();
				}
				else
				{
					dojoClass.parentSeminar = parentSeminar.Copy(false);
				}
			}
			if(parentDefinition != null)
			{
				if(isolation)
				{
					dojoClass.parentDefinition = parentDefinition.NewPlaceHolder();
				}
				else
				{
					dojoClass.parentDefinition = parentDefinition.Copy(false);
				}
			}
			if(location != null)
			{
				if(isolation)
				{
					dojoClass.location = location.NewPlaceHolder();
				}
				else
				{
					dojoClass.location = location.Copy(false);
				}
			}
			if(accessControlGroup != null)
			{
				if(isolation)
				{
					dojoClass.accessControlGroup = accessControlGroup.NewPlaceHolder();
				}
				else
				{
					dojoClass.accessControlGroup = accessControlGroup.Copy(false);
				}
			}
			dojoClass.occupancyMax = occupancyMax;
			dojoClass.occupancyTarget = occupancyTarget;
			dojoClass.occupancyCurrent = occupancyCurrent;
			dojoClass.occupancyCheckDate = occupancyCheckDate;
			dojoClass.signinStart = signinStart;
			dojoClass.signinEnd = signinEnd;
			dojoClass.classStart = classStart;
			dojoClass.classEnd = classEnd;
		}

		public DojoClass NewPlaceHolder()
		{
			DojoClass dojoClass = new DojoClass();
			dojoClass.iD = iD;
			dojoClass.isPlaceHolder = true;
			dojoClass.isSynced = true;
			return dojoClass;
		}

		public static DojoClass NewPlaceHolder(int iD)
		{
			DojoClass dojoClass = new DojoClass();
			dojoClass.iD = iD;
			dojoClass.isPlaceHolder = true;
			dojoClass.isSynced = true;
			return dojoClass;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoClass dojoClass = (DojoClass) obj;
			return this.iD - dojoClass.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoClass dojoClass)
		{
			return this.iD - dojoClass.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---
																																																																																																																																																																																																																																																																																																																																																																																																															
		public TimeSpan Duration
		{
			get
			{
				if(isPlaceHolder)
					EnsurePreLoad();
				return classEnd.Subtract(classStart);
			}
		}

		//--- End Custom Code ---
	}
}
