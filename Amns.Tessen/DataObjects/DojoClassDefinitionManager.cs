/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.People;
using Amns.GreyFox.Security;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoClassDefinitionFlags : int { AccessControlGroup,
				AccessControlGroupAllowedMemberType1,
				AccessControlGroupAllowedMemberType2,
				AccessControlGroupAllowedMemberType3,
				AccessControlGroupAllowedMemberType4,
				AccessControlGroupAllowedMemberType5,
				AccessControlGroupDeniedMemberType1,
				AccessControlGroupDeniedMemberType2,
				AccessControlGroupDeniedMemberType3,
				AccessControlGroupDeniedMemberType4,
				AccessControlGroupDeniedMemberType5,
				Instructor,
				InstructorPrivateContact,
				InstructorEmergencyContact,
				InstructorPublicContact,
				InstructorParent,
				InstructorRoot,
				InstructorMemberType,
				InstructorMemberTypeTemplate,
				InstructorMembership1,
				InstructorMembership2,
				InstructorMembership3,
				InstructorMembership4,
				InstructorMembership5,
				InstructorInstructor1,
				InstructorInstructor2,
				InstructorInstructor3,
				InstructorPromotionFlags,
				InstructorRank,
				InstructorUserAccount,
				InstructorCustomer,
				Location};

	#endregion

	/// <summary>
	/// Datamanager for DojoClassDefinition objects.
	/// </summary>
	public class DojoClassDefinitionManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_ClassDefinitions";
		public static readonly string LocationTable = "kitTessen_Locations";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoClassDefinitionID",
			"Name",
			"Description",
			"IsDisabled",
			"OccupancyAvg",
			"OccupancyAvgDate",
			"AccessControlGroupID",
			"RecurrenceCount",
			"RecurrenceEnd",
			"RecurrenceSpan",
			"RecurrenceType",
			"NextSigninStart",
			"NextSigninEnd",
			"NextClassStart",
			"NextClassEnd",
			"InstructorID",
			"LocationID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoClassDefinitionID", "LONG", "-1" },
			{ "Name", "TEXT(75)", "" },
			{ "Description", "MEMO", "" },
			{ "IsDisabled", "BIT", "" },
			{ "OccupancyAvg", "LONG", "" },
			{ "OccupancyAvgDate", "DATETIME", "" },
			{ "AccessControlGroupID", "LONG", "null" },
			{ "RecurrenceCount", "LONG", "" },
			{ "RecurrenceEnd", "DATETIME", "" },
			{ "RecurrenceSpan", "DOUBLE", "" },
			{ "RecurrenceType", "BYTE", "0" },
			{ "NextSigninStart", "DATETIME", "" },
			{ "NextSigninEnd", "DATETIME", "" },
			{ "NextClassStart", "DATETIME", "" },
			{ "NextClassEnd", "DATETIME", "" },
			{ "InstructorID", "LONG", "null" },
			{ "LocationID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoClassDefinitionManager()
		{
		}

		public DojoClassDefinitionManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoClassDefinitionManager.isInitialized)
			{
				DojoClassDefinitionManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoClassDefinition into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoClassDefinition">The DojoClassDefinition to insert into the database.</param>
		internal static int _insert(DojoClassDefinition dojoClassDefinition)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_ClassDefinitions " +
				"(" +
				"Name," +
				"Description," +
				"IsDisabled," +
				"OccupancyAvg," +
				"OccupancyAvgDate," +
				"AccessControlGroupID," +
				"RecurrenceCount," +
				"RecurrenceEnd," +
				"RecurrenceSpan," +
				"RecurrenceType," +
				"NextSigninStart," +
				"NextSigninEnd," +
				"NextClassStart," +
				"NextClassEnd," +
				"InstructorID," +
				"LocationID) VALUES (" +
				"@Name," +
				"@Description," +
				"@IsDisabled," +
				"@OccupancyAvg," +
				"@OccupancyAvgDate," +
				"@AccessControlGroupID," +
				"@RecurrenceCount," +
				"@RecurrenceEnd," +
				"@RecurrenceSpan," +
				"@RecurrenceType," +
				"@NextSigninStart," +
				"@NextSigninEnd," +
				"@NextClassStart," +
				"@NextClassEnd," +
				"@InstructorID," +
				"@LocationID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoClassDefinition);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoClassDefinition);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoClassDefinition in cache.
			if(cacheEnabled) cacheStore(dojoClassDefinition);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoClassDefinition dojoClassDefinition)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_ClassDefinitions SET Name=@Name," +
				"Description=@Description," +
				"IsDisabled=@IsDisabled," +
				"OccupancyAvg=@OccupancyAvg," +
				"OccupancyAvgDate=@OccupancyAvgDate," +
				"AccessControlGroupID=@AccessControlGroupID," +
				"RecurrenceCount=@RecurrenceCount," +
				"RecurrenceEnd=@RecurrenceEnd," +
				"RecurrenceSpan=@RecurrenceSpan," +
				"RecurrenceType=@RecurrenceType," +
				"NextSigninStart=@NextSigninStart," +
				"NextSigninEnd=@NextSigninEnd," +
				"NextClassStart=@NextClassStart," +
				"NextClassEnd=@NextClassEnd," +
				"InstructorID=@InstructorID," +
				"LocationID=@LocationID WHERE DojoClassDefinitionID=@DojoClassDefinitionID;");

			fillParameters(database, dbCommand, dojoClassDefinition);
			database.AddInParameter(dbCommand, "DojoClassDefinitionID", DbType.Int32, dojoClassDefinition.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoClassDefinition in cache.
			if (cacheEnabled) cacheStore(dojoClassDefinition);

			return dojoClassDefinition.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoClassDefinition dojoClassDefinition)
		{
			#region Default

			addParameter(database, dbCommand, "@Name", DbType.String, dojoClassDefinition.name);
			addParameter(database, dbCommand, "@Description", DbType.String, dojoClassDefinition.description);
			addParameter(database, dbCommand, "@IsDisabled", DbType.Boolean, dojoClassDefinition.isDisabled);
			addParameter(database, dbCommand, "@OccupancyAvg", DbType.Int32, dojoClassDefinition.occupancyAvg);
			addParameter(database, dbCommand, "@OccupancyAvgDate", DbType.Date, dojoClassDefinition.occupancyAvgDate);

			#endregion

			#region Access Control

			if(dojoClassDefinition.accessControlGroup == null)
			{
				addParameter(database, dbCommand, "@AccessControlGroupID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@AccessControlGroupID", DbType.Int32, dojoClassDefinition.accessControlGroup.ID);
			}

			#endregion

			#region Recurrency

			addParameter(database, dbCommand, "@RecurrenceCount", DbType.Int32, dojoClassDefinition.recurrenceCount);
			addParameter(database, dbCommand, "@RecurrenceEnd", DbType.Date, dojoClassDefinition.recurrenceEnd);
			addParameter(database, dbCommand, "@RecurrenceSpan", DbType.Double, dojoClassDefinition.recurrenceSpan.Ticks);
			addParameter(database, dbCommand, "@RecurrenceType", DbType.Byte, (Byte)dojoClassDefinition.recurrenceType);

			#endregion

			#region Next Class

			addParameter(database, dbCommand, "@NextSigninStart", DbType.Date, dojoClassDefinition.nextSigninStart);
			addParameter(database, dbCommand, "@NextSigninEnd", DbType.Date, dojoClassDefinition.nextSigninEnd);
			addParameter(database, dbCommand, "@NextClassStart", DbType.Date, dojoClassDefinition.nextClassStart);
			addParameter(database, dbCommand, "@NextClassEnd", DbType.Date, dojoClassDefinition.nextClassEnd);
			if(dojoClassDefinition.instructor == null)
			{
				addParameter(database, dbCommand, "@InstructorID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@InstructorID", DbType.Int32, dojoClassDefinition.instructor.ID);
			}
			if(dojoClassDefinition.location == null)
			{
				addParameter(database, dbCommand, "@LocationID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@LocationID", DbType.Int32, dojoClassDefinition.location.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoClassDefinition dojoClassDefinition)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoClassDefinition.iD);
				if(cachedObject != null)
				{
					((DojoClassDefinition)cachedObject).CopyTo(dojoClassDefinition, true);
					return dojoClassDefinition.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_ClassDefinitions WHERE DojoClassDefinitionID=");
			query.Append(dojoClassDefinition.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoClassDefinitionID '{0}'.", 
					dojoClassDefinition.iD)));
			}

			FillFromReader(dojoClassDefinition, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoClassDefinition in cache.
			if(cacheEnabled) cacheStore(dojoClassDefinition);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoClassDefinitionCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoClassDefinitionCollection GetCollection(string whereClause, string sortClause, params DojoClassDefinitionFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoClassDefinitionCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoClassDefinitionFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoClassDefinitionCollection dojoClassDefinitionCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoClassDefinition.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int accessControlGroupOffset = -1;
			int accessControlGroupAllowedMemberType1Offset = -1;
			int accessControlGroupAllowedMemberType2Offset = -1;
			int accessControlGroupAllowedMemberType3Offset = -1;
			int accessControlGroupAllowedMemberType4Offset = -1;
			int accessControlGroupAllowedMemberType5Offset = -1;
			int accessControlGroupDeniedMemberType1Offset = -1;
			int accessControlGroupDeniedMemberType2Offset = -1;
			int accessControlGroupDeniedMemberType3Offset = -1;
			int accessControlGroupDeniedMemberType4Offset = -1;
			int accessControlGroupDeniedMemberType5Offset = -1;
			int instructorOffset = -1;
			int instructorPrivateContactOffset = -1;
			int instructorEmergencyContactOffset = -1;
			int instructorPublicContactOffset = -1;
			int instructorParentOffset = -1;
			int instructorRootOffset = -1;
			int instructorMemberTypeOffset = -1;
			int instructorMemberTypeTemplateOffset = -1;
			int instructorMembership1Offset = -1;
			int instructorMembership2Offset = -1;
			int instructorMembership3Offset = -1;
			int instructorMembership4Offset = -1;
			int instructorMembership5Offset = -1;
			int instructorInstructor1Offset = -1;
			int instructorInstructor2Offset = -1;
			int instructorInstructor3Offset = -1;
			int instructorRankOffset = -1;
			int instructorUserAccountOffset = -1;
			int instructorCustomerOffset = -1;
			int locationOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoClassDefinitionFlags.AccessControlGroup:
							for(int i = 0; i <= DojoAccessControlGroupManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AccessControlGroup.");
								query.Append(DojoAccessControlGroupManager.InnerJoinFields[i]);
								query.Append(",");
							}
							accessControlGroupOffset = innerJoinOffset;
							innerJoinOffset = accessControlGroupOffset + DojoAccessControlGroupManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.AccessControlGroupAllowedMemberType1:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AccessControlGroup_AllowedMemberType1.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							accessControlGroupAllowedMemberType1Offset = innerJoinOffset;
							innerJoinOffset = accessControlGroupAllowedMemberType1Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.AccessControlGroupAllowedMemberType2:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AccessControlGroup_AllowedMemberType2.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							accessControlGroupAllowedMemberType2Offset = innerJoinOffset;
							innerJoinOffset = accessControlGroupAllowedMemberType2Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.AccessControlGroupAllowedMemberType3:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AccessControlGroup_AllowedMemberType3.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							accessControlGroupAllowedMemberType3Offset = innerJoinOffset;
							innerJoinOffset = accessControlGroupAllowedMemberType3Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.AccessControlGroupAllowedMemberType4:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AccessControlGroup_AllowedMemberType4.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							accessControlGroupAllowedMemberType4Offset = innerJoinOffset;
							innerJoinOffset = accessControlGroupAllowedMemberType4Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.AccessControlGroupAllowedMemberType5:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AccessControlGroup_AllowedMemberType5.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							accessControlGroupAllowedMemberType5Offset = innerJoinOffset;
							innerJoinOffset = accessControlGroupAllowedMemberType5Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.AccessControlGroupDeniedMemberType1:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AccessControlGroup_DeniedMemberType1.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							accessControlGroupDeniedMemberType1Offset = innerJoinOffset;
							innerJoinOffset = accessControlGroupDeniedMemberType1Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.AccessControlGroupDeniedMemberType2:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AccessControlGroup_DeniedMemberType2.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							accessControlGroupDeniedMemberType2Offset = innerJoinOffset;
							innerJoinOffset = accessControlGroupDeniedMemberType2Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.AccessControlGroupDeniedMemberType3:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AccessControlGroup_DeniedMemberType3.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							accessControlGroupDeniedMemberType3Offset = innerJoinOffset;
							innerJoinOffset = accessControlGroupDeniedMemberType3Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.AccessControlGroupDeniedMemberType4:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AccessControlGroup_DeniedMemberType4.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							accessControlGroupDeniedMemberType4Offset = innerJoinOffset;
							innerJoinOffset = accessControlGroupDeniedMemberType4Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.AccessControlGroupDeniedMemberType5:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AccessControlGroup_DeniedMemberType5.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							accessControlGroupDeniedMemberType5Offset = innerJoinOffset;
							innerJoinOffset = accessControlGroupDeniedMemberType5Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.Instructor:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorOffset = innerJoinOffset;
							innerJoinOffset = instructorOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = instructorPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorEmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorEmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = instructorEmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorPublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorPublicContactOffset = innerJoinOffset;
							innerJoinOffset = instructorPublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorParent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorParentOffset = innerJoinOffset;
							innerJoinOffset = instructorParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorRoot:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorRootOffset = innerJoinOffset;
							innerJoinOffset = instructorRootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = instructorMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = instructorMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorMembership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorMembership1Offset = innerJoinOffset;
							innerJoinOffset = instructorMembership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorMembership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorMembership2Offset = innerJoinOffset;
							innerJoinOffset = instructorMembership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorMembership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorMembership3Offset = innerJoinOffset;
							innerJoinOffset = instructorMembership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorMembership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorMembership4Offset = innerJoinOffset;
							innerJoinOffset = instructorMembership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorMembership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorMembership5Offset = innerJoinOffset;
							innerJoinOffset = instructorMembership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorInstructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorInstructor1Offset = innerJoinOffset;
							innerJoinOffset = instructorInstructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorInstructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorInstructor2Offset = innerJoinOffset;
							innerJoinOffset = instructorInstructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorInstructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorInstructor3Offset = innerJoinOffset;
							innerJoinOffset = instructorInstructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorRankOffset = innerJoinOffset;
							innerJoinOffset = instructorRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorUserAccountOffset = innerJoinOffset;
							innerJoinOffset = instructorUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.InstructorCustomer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructorCustomerOffset = innerJoinOffset;
							innerJoinOffset = instructorCustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoClassDefinitionFlags.Location:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Location.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							locationOffset = innerJoinOffset;
							innerJoinOffset = locationOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_ClassDefinitions AS DojoClassDefinition");
			}
			else
			{
				query.Append(" FROM kitTessen_ClassDefinitions AS DojoClassDefinition");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoClassDefinitionFlags.AccessControlGroup:
							query.Append(" LEFT JOIN kitTessen_AccessControlGroups AS AccessControlGroup ON DojoClassDefinition.AccessControlGroupID = AccessControlGroup.DojoAccessControlGroupID)");
							break;
						case DojoClassDefinitionFlags.AccessControlGroupAllowedMemberType1:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AccessControlGroup_AllowedMemberType1 ON AccessControlGroup.AllowedMemberType1ID = AccessControlGroup_AllowedMemberType1.DojoAttendanceEntryID)");
							break;
						case DojoClassDefinitionFlags.AccessControlGroupAllowedMemberType2:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AccessControlGroup_AllowedMemberType2 ON AccessControlGroup.AllowedMemberType2ID = AccessControlGroup_AllowedMemberType2.DojoAttendanceEntryID)");
							break;
						case DojoClassDefinitionFlags.AccessControlGroupAllowedMemberType3:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AccessControlGroup_AllowedMemberType3 ON AccessControlGroup.AllowedMemberType3ID = AccessControlGroup_AllowedMemberType3.DojoAttendanceEntryID)");
							break;
						case DojoClassDefinitionFlags.AccessControlGroupAllowedMemberType4:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AccessControlGroup_AllowedMemberType4 ON AccessControlGroup.AllowedMemberType4ID = AccessControlGroup_AllowedMemberType4.DojoAttendanceEntryID)");
							break;
						case DojoClassDefinitionFlags.AccessControlGroupAllowedMemberType5:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AccessControlGroup_AllowedMemberType5 ON AccessControlGroup.AllowedMemberType5ID = AccessControlGroup_AllowedMemberType5.DojoAttendanceEntryID)");
							break;
						case DojoClassDefinitionFlags.AccessControlGroupDeniedMemberType1:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AccessControlGroup_DeniedMemberType1 ON AccessControlGroup.DeniedMemberType1ID = AccessControlGroup_DeniedMemberType1.DojoAttendanceEntryID)");
							break;
						case DojoClassDefinitionFlags.AccessControlGroupDeniedMemberType2:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AccessControlGroup_DeniedMemberType2 ON AccessControlGroup.DeniedMemberType2ID = AccessControlGroup_DeniedMemberType2.DojoAttendanceEntryID)");
							break;
						case DojoClassDefinitionFlags.AccessControlGroupDeniedMemberType3:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AccessControlGroup_DeniedMemberType3 ON AccessControlGroup.DeniedMemberType3ID = AccessControlGroup_DeniedMemberType3.DojoAttendanceEntryID)");
							break;
						case DojoClassDefinitionFlags.AccessControlGroupDeniedMemberType4:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AccessControlGroup_DeniedMemberType4 ON AccessControlGroup.DeniedMemberType4ID = AccessControlGroup_DeniedMemberType4.DojoAttendanceEntryID)");
							break;
						case DojoClassDefinitionFlags.AccessControlGroupDeniedMemberType5:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AccessControlGroup_DeniedMemberType5 ON AccessControlGroup.DeniedMemberType5ID = AccessControlGroup_DeniedMemberType5.DojoAttendanceEntryID)");
							break;
						case DojoClassDefinitionFlags.Instructor:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor ON DojoClassDefinition.InstructorID = Instructor.DojoMemberID)");
							break;
						case DojoClassDefinitionFlags.InstructorPrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Instructor_PrivateContact ON Instructor.PrivateContactID = Instructor_PrivateContact.GreyFoxContactID)");
							break;
						case DojoClassDefinitionFlags.InstructorEmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Instructor_EmergencyContact ON Instructor.EmergencyContactID = Instructor_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoClassDefinitionFlags.InstructorPublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Instructor_PublicContact ON Instructor.PublicContactID = Instructor_PublicContact.GreyFoxContactID)");
							break;
						case DojoClassDefinitionFlags.InstructorParent:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor_Parent ON Instructor.ParentID = Instructor_Parent.DojoMemberID)");
							break;
						case DojoClassDefinitionFlags.InstructorRoot:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor_Root ON Instructor.RootID = Instructor_Root.DojoMemberID)");
							break;
						case DojoClassDefinitionFlags.InstructorMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Instructor_MemberType ON Instructor.MemberTypeID = Instructor_MemberType.DojoMemberTypeID)");
							break;
						case DojoClassDefinitionFlags.InstructorMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Instructor_MemberTypeTemplate ON Instructor.MemberTypeTemplateID = Instructor_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoClassDefinitionFlags.InstructorMembership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor_Membership1 ON Instructor.Membership1ID = Instructor_Membership1.DojoMembershipID)");
							break;
						case DojoClassDefinitionFlags.InstructorMembership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor_Membership2 ON Instructor.Membership2ID = Instructor_Membership2.DojoMembershipID)");
							break;
						case DojoClassDefinitionFlags.InstructorMembership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor_Membership3 ON Instructor.Membership3ID = Instructor_Membership3.DojoMembershipID)");
							break;
						case DojoClassDefinitionFlags.InstructorMembership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor_Membership4 ON Instructor.Membership4ID = Instructor_Membership4.DojoMembershipID)");
							break;
						case DojoClassDefinitionFlags.InstructorMembership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor_Membership5 ON Instructor.Membership5ID = Instructor_Membership5.DojoMembershipID)");
							break;
						case DojoClassDefinitionFlags.InstructorInstructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor_Instructor1 ON Instructor.Instructor1ID = Instructor_Instructor1.DojoMemberID)");
							break;
						case DojoClassDefinitionFlags.InstructorInstructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor_Instructor2 ON Instructor.Instructor2ID = Instructor_Instructor2.DojoMemberID)");
							break;
						case DojoClassDefinitionFlags.InstructorInstructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor_Instructor3 ON Instructor.Instructor3ID = Instructor_Instructor3.DojoMemberID)");
							break;
						case DojoClassDefinitionFlags.InstructorRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Instructor_Rank ON Instructor.RankID = Instructor_Rank.DojoRankID)");
							break;
						case DojoClassDefinitionFlags.InstructorUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Instructor_UserAccount ON Instructor.UserAccountID = Instructor_UserAccount.GreyFoxUserID)");
							break;
						case DojoClassDefinitionFlags.InstructorCustomer:
							query.Append(" LEFT JOIN RH_Customers AS Instructor_Customer ON Instructor.CustomerID = Instructor_Customer.RHCustomerID)");
							break;
						case DojoClassDefinitionFlags.Location:
							query.Append(" LEFT JOIN kitTessen_Locations AS Location ON DojoClassDefinition.LocationID = Location.GreyFoxContactID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoClassDefinitionCollection = new DojoClassDefinitionCollection();

			while(r.Read())
			{
				DojoClassDefinition dojoClassDefinition = ParseFromReader(r, 0, 1);

				// Fill AccessControlGroup
				if(accessControlGroupOffset != -1 && !r.IsDBNull(accessControlGroupOffset))
				{
					DojoAccessControlGroupManager.FillFromReader(dojoClassDefinition.accessControlGroup, r, accessControlGroupOffset, accessControlGroupOffset+1);

					// Fill 
					if(accessControlGroupAllowedMemberType1Offset != -1 && !r.IsDBNull(accessControlGroupAllowedMemberType1Offset))
						DojoAttendanceEntryManager.FillFromReader(dojoClassDefinition.accessControlGroup.AllowedMemberType1, r, accessControlGroupAllowedMemberType1Offset, accessControlGroupAllowedMemberType1Offset+1);

					// Fill 
					if(accessControlGroupAllowedMemberType2Offset != -1 && !r.IsDBNull(accessControlGroupAllowedMemberType2Offset))
						DojoAttendanceEntryManager.FillFromReader(dojoClassDefinition.accessControlGroup.AllowedMemberType2, r, accessControlGroupAllowedMemberType2Offset, accessControlGroupAllowedMemberType2Offset+1);

					// Fill 
					if(accessControlGroupAllowedMemberType3Offset != -1 && !r.IsDBNull(accessControlGroupAllowedMemberType3Offset))
						DojoAttendanceEntryManager.FillFromReader(dojoClassDefinition.accessControlGroup.AllowedMemberType3, r, accessControlGroupAllowedMemberType3Offset, accessControlGroupAllowedMemberType3Offset+1);

					// Fill 
					if(accessControlGroupAllowedMemberType4Offset != -1 && !r.IsDBNull(accessControlGroupAllowedMemberType4Offset))
						DojoAttendanceEntryManager.FillFromReader(dojoClassDefinition.accessControlGroup.AllowedMemberType4, r, accessControlGroupAllowedMemberType4Offset, accessControlGroupAllowedMemberType4Offset+1);

					// Fill 
					if(accessControlGroupAllowedMemberType5Offset != -1 && !r.IsDBNull(accessControlGroupAllowedMemberType5Offset))
						DojoAttendanceEntryManager.FillFromReader(dojoClassDefinition.accessControlGroup.AllowedMemberType5, r, accessControlGroupAllowedMemberType5Offset, accessControlGroupAllowedMemberType5Offset+1);

					// Fill 
					if(accessControlGroupDeniedMemberType1Offset != -1 && !r.IsDBNull(accessControlGroupDeniedMemberType1Offset))
						DojoAttendanceEntryManager.FillFromReader(dojoClassDefinition.accessControlGroup.DeniedMemberType1, r, accessControlGroupDeniedMemberType1Offset, accessControlGroupDeniedMemberType1Offset+1);

					// Fill 
					if(accessControlGroupDeniedMemberType2Offset != -1 && !r.IsDBNull(accessControlGroupDeniedMemberType2Offset))
						DojoAttendanceEntryManager.FillFromReader(dojoClassDefinition.accessControlGroup.DeniedMemberType2, r, accessControlGroupDeniedMemberType2Offset, accessControlGroupDeniedMemberType2Offset+1);

					// Fill 
					if(accessControlGroupDeniedMemberType3Offset != -1 && !r.IsDBNull(accessControlGroupDeniedMemberType3Offset))
						DojoAttendanceEntryManager.FillFromReader(dojoClassDefinition.accessControlGroup.DeniedMemberType3, r, accessControlGroupDeniedMemberType3Offset, accessControlGroupDeniedMemberType3Offset+1);

					// Fill 
					if(accessControlGroupDeniedMemberType4Offset != -1 && !r.IsDBNull(accessControlGroupDeniedMemberType4Offset))
						DojoAttendanceEntryManager.FillFromReader(dojoClassDefinition.accessControlGroup.DeniedMemberType4, r, accessControlGroupDeniedMemberType4Offset, accessControlGroupDeniedMemberType4Offset+1);

					// Fill 
					if(accessControlGroupDeniedMemberType5Offset != -1 && !r.IsDBNull(accessControlGroupDeniedMemberType5Offset))
						DojoAttendanceEntryManager.FillFromReader(dojoClassDefinition.accessControlGroup.DeniedMemberType5, r, accessControlGroupDeniedMemberType5Offset, accessControlGroupDeniedMemberType5Offset+1);

				}

				// Fill Instructor
				if(instructorOffset != -1 && !r.IsDBNull(instructorOffset))
				{
					DojoMemberManager.FillFromReader(dojoClassDefinition.instructor, r, instructorOffset, instructorOffset+1);

					// Fill 
					if(instructorPrivateContactOffset != -1 && !r.IsDBNull(instructorPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoClassDefinition.instructor.PrivateContact, "kitTessen_Members_PrivateContacts", r, instructorPrivateContactOffset, instructorPrivateContactOffset+1);

					// Fill 
					if(instructorEmergencyContactOffset != -1 && !r.IsDBNull(instructorEmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoClassDefinition.instructor.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, instructorEmergencyContactOffset, instructorEmergencyContactOffset+1);

					// Fill 
					if(instructorPublicContactOffset != -1 && !r.IsDBNull(instructorPublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoClassDefinition.instructor.PublicContact, "kitTessen_Members_PublicContacts", r, instructorPublicContactOffset, instructorPublicContactOffset+1);

					// Fill 
					if(instructorParentOffset != -1 && !r.IsDBNull(instructorParentOffset))
						DojoMemberManager.FillFromReader(dojoClassDefinition.instructor.Parent, r, instructorParentOffset, instructorParentOffset+1);

					// Fill 
					if(instructorRootOffset != -1 && !r.IsDBNull(instructorRootOffset))
						DojoMemberManager.FillFromReader(dojoClassDefinition.instructor.Root, r, instructorRootOffset, instructorRootOffset+1);

					// Fill 
					if(instructorMemberTypeOffset != -1 && !r.IsDBNull(instructorMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoClassDefinition.instructor.MemberType, r, instructorMemberTypeOffset, instructorMemberTypeOffset+1);

					// Fill 
					if(instructorMemberTypeTemplateOffset != -1 && !r.IsDBNull(instructorMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoClassDefinition.instructor.MemberTypeTemplate, r, instructorMemberTypeTemplateOffset, instructorMemberTypeTemplateOffset+1);

					// Fill 
					if(instructorMembership1Offset != -1 && !r.IsDBNull(instructorMembership1Offset))
						DojoMembershipManager.FillFromReader(dojoClassDefinition.instructor.Membership1, r, instructorMembership1Offset, instructorMembership1Offset+1);

					// Fill 
					if(instructorMembership2Offset != -1 && !r.IsDBNull(instructorMembership2Offset))
						DojoMembershipManager.FillFromReader(dojoClassDefinition.instructor.Membership2, r, instructorMembership2Offset, instructorMembership2Offset+1);

					// Fill 
					if(instructorMembership3Offset != -1 && !r.IsDBNull(instructorMembership3Offset))
						DojoMembershipManager.FillFromReader(dojoClassDefinition.instructor.Membership3, r, instructorMembership3Offset, instructorMembership3Offset+1);

					// Fill 
					if(instructorMembership4Offset != -1 && !r.IsDBNull(instructorMembership4Offset))
						DojoMembershipManager.FillFromReader(dojoClassDefinition.instructor.Membership4, r, instructorMembership4Offset, instructorMembership4Offset+1);

					// Fill 
					if(instructorMembership5Offset != -1 && !r.IsDBNull(instructorMembership5Offset))
						DojoMembershipManager.FillFromReader(dojoClassDefinition.instructor.Membership5, r, instructorMembership5Offset, instructorMembership5Offset+1);

					// Fill 
					if(instructorInstructor1Offset != -1 && !r.IsDBNull(instructorInstructor1Offset))
						DojoMemberManager.FillFromReader(dojoClassDefinition.instructor.Instructor1, r, instructorInstructor1Offset, instructorInstructor1Offset+1);

					// Fill 
					if(instructorInstructor2Offset != -1 && !r.IsDBNull(instructorInstructor2Offset))
						DojoMemberManager.FillFromReader(dojoClassDefinition.instructor.Instructor2, r, instructorInstructor2Offset, instructorInstructor2Offset+1);

					// Fill 
					if(instructorInstructor3Offset != -1 && !r.IsDBNull(instructorInstructor3Offset))
						DojoMemberManager.FillFromReader(dojoClassDefinition.instructor.Instructor3, r, instructorInstructor3Offset, instructorInstructor3Offset+1);

					// Fill 
					if(instructorRankOffset != -1 && !r.IsDBNull(instructorRankOffset))
						DojoRankManager.FillFromReader(dojoClassDefinition.instructor.Rank, r, instructorRankOffset, instructorRankOffset+1);

					// Fill 
					if(instructorUserAccountOffset != -1 && !r.IsDBNull(instructorUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoClassDefinition.instructor.UserAccount, r, instructorUserAccountOffset, instructorUserAccountOffset+1);

					// Fill 
					if(instructorCustomerOffset != -1 && !r.IsDBNull(instructorCustomerOffset))
						RHCustomerManager.FillFromReader(dojoClassDefinition.instructor.Customer, r, instructorCustomerOffset, instructorCustomerOffset+1);

				}

				// Fill Location
				if(locationOffset != -1 && !r.IsDBNull(locationOffset))
					GreyFoxContactManager.FillFromReader(dojoClassDefinition.location, "kitTessen_Locations", r, locationOffset, locationOffset+1);

				dojoClassDefinitionCollection.Add(dojoClassDefinition);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoClassDefinitionCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoClassDefinition ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoClassDefinition dojoClassDefinition = new DojoClassDefinition();
			FillFromReader(dojoClassDefinition, r, idOffset, dataOffset);
			return dojoClassDefinition;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoClassDefinition dojoClassDefinition, IDataReader r, int idOffset, int dataOffset)
		{
			dojoClassDefinition.iD = r.GetInt32(idOffset);
			dojoClassDefinition.isSynced = true;
			dojoClassDefinition.isPlaceHolder = false;

			dojoClassDefinition.name = r.GetString(0+dataOffset);
			if(!r.IsDBNull(1+dataOffset)) 
				dojoClassDefinition.description = r.GetString(1+dataOffset);
			else
				dojoClassDefinition.description = null;
			dojoClassDefinition.isDisabled = r.GetBoolean(2+dataOffset);
			if(!r.IsDBNull(3+dataOffset)) 
				dojoClassDefinition.occupancyAvg = r.GetInt32(3+dataOffset);
			if(!r.IsDBNull(4+dataOffset)) 
				dojoClassDefinition.occupancyAvgDate = r.GetDateTime(4+dataOffset);
			else
				dojoClassDefinition.occupancyAvgDate = DateTime.MinValue;
			if(!r.IsDBNull(5+dataOffset) && r.GetInt32(5+dataOffset) > 0)
			{
				dojoClassDefinition.accessControlGroup = DojoAccessControlGroup.NewPlaceHolder(r.GetInt32(5+dataOffset));
			}
			dojoClassDefinition.recurrenceCount = r.GetInt32(6+dataOffset);
			dojoClassDefinition.recurrenceEnd = r.GetDateTime(7+dataOffset);
			dojoClassDefinition.recurrenceSpan = TimeSpan.FromTicks((long) r.GetDouble(8+dataOffset));
			dojoClassDefinition.recurrenceType = (DojoRecurrenceType)r.GetByte(9+dataOffset);
			dojoClassDefinition.nextSigninStart = r.GetDateTime(10+dataOffset);
			dojoClassDefinition.nextSigninEnd = r.GetDateTime(11+dataOffset);
			dojoClassDefinition.nextClassStart = r.GetDateTime(12+dataOffset);
			dojoClassDefinition.nextClassEnd = r.GetDateTime(13+dataOffset);
			if(!r.IsDBNull(14+dataOffset) && r.GetInt32(14+dataOffset) > 0)
			{
				dojoClassDefinition.instructor = DojoMember.NewPlaceHolder(r.GetInt32(14+dataOffset));
			}
			if(!r.IsDBNull(15+dataOffset) && r.GetInt32(15+dataOffset) > 0)
			{
				dojoClassDefinition.location = GreyFoxContact.NewPlaceHolder("kitTessen_Locations", r.GetInt32(15+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_ClassDefinitions WHERE DojoClassDefinitionID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			GreyFoxContactManager locationManager = 
				new GreyFoxContactManager("kitTessen_Locations");
			msg.Append(locationManager.VerifyTable(repair));

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_ClassDefinitions ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_ClassDefinitions_AccessControlGroup FOREIGN KEY (AccessControlGroupID) REFERENCES kitTessen_AccessControlGroups (DojoAccessControlGroupID),");
			query.Append(" CONSTRAINT FK_kitTessen_ClassDefinitions_Instructor FOREIGN KEY (InstructorID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_ClassDefinitions_Location FOREIGN KEY (LocationID) REFERENCES kitTessen_Locations (GreyFoxContactID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_ClassDefinitions ");
				query.Append(" (DojoClassDefinitionID COUNTER(1,1) CONSTRAINT PK_kitTessen_ClassDefinitions PRIMARY KEY, " +
					"Name TEXT(75)," +
					"Description MEMO," +
					"IsDisabled BIT," +
					"OccupancyAvg LONG," +
					"OccupancyAvgDate DATETIME," +
					"AccessControlGroupID LONG," +
					"RecurrenceCount LONG," +
					"RecurrenceEnd DATETIME," +
					"RecurrenceSpan DOUBLE," +
					"RecurrenceType BYTE," +
					"NextSigninStart DATETIME," +
					"NextSigninEnd DATETIME," +
					"NextClassStart DATETIME," +
					"NextClassEnd DATETIME," +
					"InstructorID LONG," +
					"LocationID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_ClassDefinitions ");
				query.Append(" (DojoClassDefinitionID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_ClassDefinitions PRIMARY KEY, " +
					"Name NVARCHAR(75)," +
					"Description NTEXT," +
					"IsDisabled BIT," +
					"OccupancyAvg INT," +
					"OccupancyAvgDate DATETIME," +
					"AccessControlGroupID INT," +
					"RecurrenceCount INT," +
					"RecurrenceEnd DATETIME," +
					"RecurrenceSpan FLOAT," +
					"RecurrenceType TINYINT," +
					"NextSigninStart DATETIME," +
					"NextSigninEnd DATETIME," +
					"NextClassStart DATETIME," +
					"NextClassEnd DATETIME," +
					"InstructorID INT," +
					"LocationID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			//
			// Create object level table for Location.
			//
			GreyFoxContactManager locationManager = new GreyFoxContactManager("kitTessen_Locations");
			locationManager.CreateTable();

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoClassDefinition dojoClassDefinition)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_ClassDefinitions_" + dojoClassDefinition.iD.ToString(), dojoClassDefinition);
		}

		private static DojoClassDefinition cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_ClassDefinitions_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoClassDefinition)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_ClassDefinitions_" + id.ToString());
		}

		#endregion

		//--- Begin Custom Code ---

		static readonly object definitionLock = new object();

		/// <summary>
		/// Runs class definitions and places newly scheduled classes into the class table.
		/// </summary>
		/// <param name="dateGuide">The datetime to compare classes to. All dates are compared by converting
		/// them to UTC to compensate for time differences between webserver and dojo location.</param>
		public void RunDefinitions(DateTime dateGuide)
		{
			//
			// Lock the method to only allow it to be executed by only one thread at a time.
			//			
			lock(definitionLock)
			{
			
				DojoClassDefinitionCollection definitions = GetCollection(string.Empty, string.Empty, null);

				// Find start date in definitions
				DateTime startDate = DateTime.MaxValue;
				DateTime endDate = DateTime.MaxValue;
				foreach(DojoClassDefinition c in definitions)
				{
					if(c.NextClassStart < startDate)
						startDate = c.NextClassStart;
					if(c.NextClassEnd < endDate)
						endDate = c.NextClassEnd;
				}

				// Load classes in the definition range to skip classes.
				DojoClassManager classManager = new DojoClassManager();
				DojoClassCollection classes = classManager.GetCollection("ClassStart>#" +
					startDate.ToString() + "# AND ClassEnd>#" + endDate.ToString() + "#", string.Empty, null);

				//
				// Scan class definitions for definitions to add to class log. Be sure to continue rolling
				// the definition (rescan definitions) if it should be rolled again. Also, append the classes
				// in order.
				//

				bool skipClass = false;
			
				foreach(DojoClassDefinition c in definitions)
				{
					if(c.isDisabled)
						continue;

					//				if(c.recurrenceEnd != DateTime.MinValue)
					//					if(c.nextSigninStart >= c.recurrenceEnd)
					//						continue;

					if(c.recurrenceCount == 0)
						continue;

					while(c.nextSigninStart.ToUniversalTime() <= dateGuide.ToUniversalTime())
					{
						DojoClass newClass = c.ToDojoClass();

						// Skip classes that already exist at the definition's location at the time the
						// definition has specified.
						
						skipClass = false;						
						foreach(DojoClass cs in classes)
						{
							if(cs.Location != null)
								skipClass = (cs.Location.ID == c.location.ID) & 
									(cs.ClassStart >= c.NextClassStart) &
									(cs.ClassEnd <= c.NextClassEnd);
							else
								skipClass = (cs.ClassStart >= c.NextClassStart) &
									(cs.ClassEnd <= c.NextClassEnd);
						}

						if(!skipClass)
							newClass.Save();

						//
						// Roll definition times to next scheduled class.
						// Adjust counters accordingly.
						//
						c.RollDefinition();
						if(c.recurrenceCount > 0)
							c.recurrenceCount--;
						c.Save();
					}
				}
			}
		}

		public int GetClassDefinitionCountByInstructor(int instructorID)
		{

            Database database = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = database.GetSqlStringCommand("SELECT COUNT(*) " +
                "FROM kitTessen_ClassDefinitions WHERE InstructorID=@InstructorID;");
            database.AddInParameter(dbCommand, "@InstructorID", DbType.Int32, instructorID);
            int count = (int)database.ExecuteScalar(dbCommand);
            return count;
		}

		//--- End Custom Code ---
	}
}

