/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.People;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoOrganizationFlags : int { Location,
				AdministrativeContact,
				DefaultMemberType};

	#endregion

	/// <summary>
	/// Datamanager for DojoOrganization objects.
	/// </summary>
	public class DojoOrganizationManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_Organizations";
		public static readonly string LocationTable = "kitTessen_Locations";
		public static readonly string ClassLocationsTable = "kitTessen_Locations";
		public static readonly string AdministrativeContactTable = "sysGlobal_Contacts";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoOrganizationID",
			"Name",
			"Description",
			"LocationID",
			"AdministrativeContactID",
			"WebServiceUrl",
			"RefreshTime",
			"IsPrimary",
			"DefaultMemberTypeID",
			"PromotionFlagEnabled"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoOrganizationID", "LONG", "-1" },
			{ "Name", "TEXT(75)", "" },
			{ "Description", "MEMO", "" },
			{ "LocationID", "LONG", "null" },
			{ "AdministrativeContactID", "LONG", "null" },
			{ "WebServiceUrl", "TEXT(255)", "" },
			{ "RefreshTime", "DOUBLE", "" },
			{ "IsPrimary", "BIT", "" },
			{ "DefaultMemberTypeID", "LONG", "null" },
			{ "PromotionFlagEnabled", "BIT", "" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoOrganizationManager()
		{
		}

		public DojoOrganizationManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoOrganizationManager.isInitialized)
			{
				DojoOrganizationManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoOrganization into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoOrganization">The DojoOrganization to insert into the database.</param>
		internal static int _insert(DojoOrganization dojoOrganization)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_Organizations " +
				"(" +
				"Name," +
				"Description," +
				"LocationID," +
				"AdministrativeContactID," +
				"WebServiceUrl," +
				"RefreshTime," +
				"IsPrimary," +
				"DefaultMemberTypeID," +
				"PromotionFlagEnabled) VALUES (" +
				"@Name," +
				"@Description," +
				"@LocationID," +
				"@AdministrativeContactID," +
				"@WebServiceUrl," +
				"@RefreshTime," +
				"@IsPrimary," +
				"@DefaultMemberTypeID," +
				"@PromotionFlagEnabled);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoOrganization);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoOrganization);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}

			// Save child relationships for ClassLocations.
			if(dojoOrganization.classLocations != null)
			{
				dbCommand = database.GetSqlStringCommand("INSERT INTO kitTessen_OrganizationsChildren_ClassLocations " +
					"(DojoOrganizationID, GreyFoxContactID)" + 
					" VALUES (@DojoOrganizationID, @GreyFoxContactID);");
				addParameter(database, dbCommand, "@DojoOrganizationID", DbType.Int32);
				addParameter(database, dbCommand, "@GreyFoxContactID", DbType.Int32);
				foreach(GreyFoxContact item in dojoOrganization.classLocations)
				{
					dbCommand.Parameters["@DojoOrganizationID"].Value = id;
					dbCommand.Parameters["@GreyFoxContactID"].Value = item.ID;
					database.ExecuteNonQuery(dbCommand);
				}
			}
			// Store dojoOrganization in cache.
			if(cacheEnabled) cacheStore(dojoOrganization);
			// ************************* WARNING **************************** 
			// Insert operations must invalidate the cached collections.
			// Invalidation MUST invalidate any foreign cached collections that 
			// with children objects this manager provides or else the foreign 
			// caches retain invalidated and potentially corrupt data! 
			// NOTE:
			// NitroCast only allows collection caching on objects that do not 
			// have any children objects to minimize potential corruption. 
			invalidateCachedCollections();
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoOrganization dojoOrganization)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_Organizations SET Name=@Name," +
				"Description=@Description," +
				"LocationID=@LocationID," +
				"AdministrativeContactID=@AdministrativeContactID," +
				"WebServiceUrl=@WebServiceUrl," +
				"RefreshTime=@RefreshTime," +
				"IsPrimary=@IsPrimary," +
				"DefaultMemberTypeID=@DefaultMemberTypeID," +
				"PromotionFlagEnabled=@PromotionFlagEnabled WHERE DojoOrganizationID=@DojoOrganizationID;");

			fillParameters(database, dbCommand, dojoOrganization);
			database.AddInParameter(dbCommand, "DojoOrganizationID", DbType.Int32, dojoOrganization.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			if(dojoOrganization.classLocations != null)
			{

				// Delete child relationships for ClassLocations.
				dbCommand = database.GetSqlStringCommand("DELETE  FROM kitTessen_OrganizationsChildren_ClassLocations WHERE DojoOrganizationID=@DojoOrganizationID;");
				database.AddInParameter(dbCommand, "@DojoOrganizationID", DbType.Int32, dojoOrganization.iD);
				database.ExecuteNonQuery(dbCommand);

				// Save child relationships for ClassLocations.
				dbCommand = database.GetSqlStringCommand("INSERT INTO kitTessen_OrganizationsChildren_ClassLocations (DojoOrganizationID, GreyFoxContactID) VALUES (@DojoOrganizationID, @GreyFoxContactID);");
				database.AddInParameter(dbCommand, "@DojoOrganizationID", DbType.Int32, dojoOrganization.iD);
				database.AddInParameter(dbCommand, "@GreyFoxContactID", DbType.Int32);
				foreach(GreyFoxContact greyFoxContact in dojoOrganization.classLocations)
				{
					dbCommand.Parameters["@GreyFoxContactID"].Value = greyFoxContact.ID;
					database.ExecuteNonQuery(dbCommand);
				}
			}

			// Store dojoOrganization in cache.
			if (cacheEnabled) cacheStore(dojoOrganization);
			// ************************* WARNING **************************** 
			// Update operations must invalidate the cached collections.
			// Invalidation MUST invalidate any foreign cached collections that 
			// with children objects this manager provides or else the foreign 
			// caches retain invalidated and potentially corrupt data! 
			// NOTE:
			// NitroCast only allows collection caching on objects that do not 
			// have any children objects to minimize potential corruption. 
			// ************************* WARNING **************************** 

			invalidateCachedCollections();

			return dojoOrganization.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoOrganization dojoOrganization)
		{
			#region Default

			addParameter(database, dbCommand, "@Name", DbType.String, dojoOrganization.name);
			addParameter(database, dbCommand, "@Description", DbType.String, dojoOrganization.description);
			if(dojoOrganization.location == null)
			{
				addParameter(database, dbCommand, "@LocationID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@LocationID", DbType.Int32, dojoOrganization.location.ID);
			}
			if(dojoOrganization.administrativeContact == null)
			{
				addParameter(database, dbCommand, "@AdministrativeContactID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@AdministrativeContactID", DbType.Int32, dojoOrganization.administrativeContact.ID);
			}

			#endregion

			#region Web Services

			addParameter(database, dbCommand, "@WebServiceUrl", DbType.String, dojoOrganization.webServiceUrl);
			addParameter(database, dbCommand, "@RefreshTime", DbType.Double, dojoOrganization.refreshTime.Ticks);

			#endregion

			#region System

			addParameter(database, dbCommand, "@IsPrimary", DbType.Boolean, dojoOrganization.isPrimary);

			#endregion

			#region Membership

			if(dojoOrganization.defaultMemberType == null)
			{
				addParameter(database, dbCommand, "@DefaultMemberTypeID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@DefaultMemberTypeID", DbType.Int32, dojoOrganization.defaultMemberType.ID);
			}
			addParameter(database, dbCommand, "@PromotionFlagEnabled", DbType.Boolean, dojoOrganization.promotionFlagEnabled);

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoOrganization dojoOrganization)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoOrganization.iD);
				if(cachedObject != null)
				{
					((DojoOrganization)cachedObject).CopyTo(dojoOrganization, true);
					return dojoOrganization.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_Organizations WHERE DojoOrganizationID=");
			query.Append(dojoOrganization.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoOrganizationID '{0}'.", 
					dojoOrganization.iD)));
			}

			FillFromReader(dojoOrganization, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoOrganization in cache.
			if(cacheEnabled) cacheStore(dojoOrganization);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoOrganizationCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoOrganizationCollection GetCollection(string whereClause, string sortClause, params DojoOrganizationFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoOrganizationCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoOrganizationFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoOrganizationCollection dojoOrganizationCollection;
			int hashcode;

			// Cache Handling

			hashcode = 0;

			if(cacheEnabled)
			{
				hashcode = topCount.GetHashCode() + 
					whereClause.GetHashCode() +
					sortClause.GetHashCode() +
					tableName.GetHashCode();

				DojoOrganizationCollection collection = cacheFindCollection(hashcode);
				if(collection != null)
				{
					return collection;
				}
			}

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoOrganization.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int locationOffset = -1;
			int administrativeContactOffset = -1;
			int defaultMemberTypeOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoOrganizationFlags.Location:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Location.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							locationOffset = innerJoinOffset;
							innerJoinOffset = locationOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoOrganizationFlags.AdministrativeContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AdministrativeContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							administrativeContactOffset = innerJoinOffset;
							innerJoinOffset = administrativeContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoOrganizationFlags.DefaultMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DefaultMemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							defaultMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = defaultMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_Organizations AS DojoOrganization");
			}
			else
			{
				query.Append(" FROM kitTessen_Organizations AS DojoOrganization");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoOrganizationFlags.Location:
							query.Append(" LEFT JOIN kitTessen_Locations AS Location ON DojoOrganization.LocationID = Location.GreyFoxContactID)");
							break;
						case DojoOrganizationFlags.AdministrativeContact:
							query.Append(" LEFT JOIN sysGlobal_Contacts AS AdministrativeContact ON DojoOrganization.AdministrativeContactID = AdministrativeContact.GreyFoxContactID)");
							break;
						case DojoOrganizationFlags.DefaultMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS DefaultMemberType ON DojoOrganization.DefaultMemberTypeID = DefaultMemberType.DojoMemberTypeID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoOrganizationCollection = new DojoOrganizationCollection();

			while(r.Read())
			{
				DojoOrganization dojoOrganization = ParseFromReader(r, 0, 1);

				// Fill Location
				if(locationOffset != -1 && !r.IsDBNull(locationOffset))
					GreyFoxContactManager.FillFromReader(dojoOrganization.location, "kitTessen_Locations", r, locationOffset, locationOffset+1);

				// Fill AdministrativeContact
				if(administrativeContactOffset != -1 && !r.IsDBNull(administrativeContactOffset))
					GreyFoxContactManager.FillFromReader(dojoOrganization.administrativeContact, "sysGlobal_Contacts", r, administrativeContactOffset, administrativeContactOffset+1);

				// Fill DefaultMemberType
				if(defaultMemberTypeOffset != -1 && !r.IsDBNull(defaultMemberTypeOffset))
					DojoMemberTypeManager.FillFromReader(dojoOrganization.defaultMemberType, r, defaultMemberTypeOffset, defaultMemberTypeOffset+1);

				dojoOrganizationCollection.Add(dojoOrganization);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			if(cacheEnabled)
			{
				cacheStoreCollection(hashcode, dojoOrganizationCollection);
			}

			return dojoOrganizationCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoOrganization ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoOrganization dojoOrganization = new DojoOrganization();
			FillFromReader(dojoOrganization, r, idOffset, dataOffset);
			return dojoOrganization;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoOrganization dojoOrganization, IDataReader r, int idOffset, int dataOffset)
		{
			dojoOrganization.iD = r.GetInt32(idOffset);
			dojoOrganization.isSynced = true;
			dojoOrganization.isPlaceHolder = false;

			dojoOrganization.name = r.GetString(0+dataOffset);
			dojoOrganization.description = r.GetString(1+dataOffset);
			if(!r.IsDBNull(2+dataOffset) && r.GetInt32(2+dataOffset) > 0)
			{
				dojoOrganization.location = GreyFoxContact.NewPlaceHolder("kitTessen_Locations", r.GetInt32(2+dataOffset));
			}
			if(!r.IsDBNull(3+dataOffset) && r.GetInt32(3+dataOffset) > 0)
			{
				dojoOrganization.administrativeContact = GreyFoxContact.NewPlaceHolder("sysGlobal_Contacts", r.GetInt32(3+dataOffset));
			}
			dojoOrganization.webServiceUrl = r.GetString(4+dataOffset);
			dojoOrganization.refreshTime = TimeSpan.FromTicks((long) r.GetDouble(5+dataOffset));
			dojoOrganization.isPrimary = r.GetBoolean(6+dataOffset);
			if(!r.IsDBNull(7+dataOffset) && r.GetInt32(7+dataOffset) > 0)
			{
				dojoOrganization.defaultMemberType = DojoMemberType.NewPlaceHolder(r.GetInt32(7+dataOffset));
			}
			dojoOrganization.promotionFlagEnabled = r.GetBoolean(8+dataOffset);
		}

		#endregion

		#region Default NitroCast Fill Methods

		public static void FillClassLocations(DojoOrganization dojoOrganization)
		{
			StringBuilder s;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			s = new StringBuilder("SELECT GreyFoxContactID FROM kitTessen_OrganizationsChildren_ClassLocations ");
			s.Append("WHERE DojoOrganizationID=");
			s.Append(dojoOrganization.iD);
			s.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(s.ToString());
			r = database.ExecuteReader(dbCommand);

			GreyFoxContactCollection classLocations;
			if(dojoOrganization.classLocations != null)
			{
				classLocations = dojoOrganization.classLocations;
				classLocations.Clear();
			}
			else
			{
				classLocations = new GreyFoxContactCollection();
				dojoOrganization.classLocations = classLocations;
			}

			while(r.Read())
				classLocations.Add(GreyFoxContact.NewPlaceHolder("kitTessen_Locations", r.GetInt32(0)));

			dojoOrganization.ClassLocations = classLocations;
			// Store DojoOrganization in cache.
			if(cacheEnabled) cacheStore(dojoOrganization);
		}

		public static void FillClassLocations(DojoOrganizationCollection dojoOrganizationCollection)
		{
			StringBuilder s;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			if(dojoOrganizationCollection.Count > 0)
			{
				s = new StringBuilder("SELECT DojoOrganizationID, GreyFoxContactID FROM kitTessen_OrganizationsChildren_ClassLocations ORDER BY DojoOrganizationID; ");

				// Clone and sort collection by ID first to fill children in one pass
				DojoOrganizationCollection clonedCollection = dojoOrganizationCollection.Clone();
				clonedCollection.Sort();

				database = DatabaseFactory.CreateDatabase();
				dbCommand = database.GetSqlStringCommand(s.ToString());
				r = database.ExecuteReader(dbCommand);

				bool more = r.Read();

				foreach(DojoOrganization dojoOrganization in clonedCollection)
				{
					GreyFoxContactCollection classLocations;
					if(dojoOrganization.classLocations != null)
					{
						classLocations = dojoOrganization.classLocations;
						classLocations.Clear();
					}
					else
					{
						classLocations = new GreyFoxContactCollection();
						dojoOrganization.classLocations = classLocations;
					}

					while(more)
					{
						if(r.GetInt32(0) < dojoOrganization.iD)
						{
							more = r.Read();
						}
						else if(r.GetInt32(0) == dojoOrganization.iD)
						{
							classLocations.Add(GreyFoxContact.NewPlaceHolder("kitTessen_Locations", r.GetInt32(1)));
							more = r.Read();
						}
						else
						{
							break;
						}
					}

					// No need to continue if there are no more records
					if(!more) break;
				}

			}
		}

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_Organizations WHERE DojoOrganizationID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);


			// Delete child relationships for ClassLocations.
			query.Length = 0;
			query.Append("DELETE FROM kitTessen_OrganizationsChildren_ClassLocations WHERE ");
			query.Append("DojoOrganizationID=");
			query.Append(id);
			query.Append(";");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
			cacheRemove(id);
			// ************************* WARNING **************************** 
			// Insert operations must invalidate the cached collections.
			// Invalidation MUST invalidate any foreign cached collections that 
			// with children objects this manager provides or else the foreign 
			// caches retain invalidated and potentially corrupt data! 
			// NOTE:
			// NitroCast only allows collection caching on objects that do not 
			// have any children objects to minimize potential corruption. 
			invalidateCachedCollections();
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			GreyFoxContactManager locationManager = 
				new GreyFoxContactManager("kitTessen_Locations");
			msg.Append(locationManager.VerifyTable(repair));

			GreyFoxContactManager classLocationsManager = 
				new GreyFoxContactManager("kitTessen_Locations");
			msg.Append(classLocationsManager.VerifyTable(repair));

			GreyFoxContactManager administrativeContactManager = 
				new GreyFoxContactManager("sysGlobal_Contacts");
			msg.Append(administrativeContactManager.VerifyTable(repair));

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_Organizations ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_Organizations_Location FOREIGN KEY (LocationID) REFERENCES kitTessen_Locations (GreyFoxContactID),");
			query.Append(" CONSTRAINT FK_kitTessen_Organizations_AdministrativeContact FOREIGN KEY (AdministrativeContactID) REFERENCES sysGlobal_Contacts (GreyFoxContactID),");
			query.Append(" CONSTRAINT FK_kitTessen_Organizations_DefaultMemberType FOREIGN KEY (DefaultMemberTypeID) REFERENCES kitTessen_MemberTypes (DojoMemberTypeID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			query.Length = 0;
			query.Append("ALTER TABLE kitTessen_OrganizationsChildren_ClassLocations ADD");
			query.Append(" CONSTRAINT FK_kitTessen_Organizations_kitTessen_OrganizationsChildren_ClassLocations FOREIGN KEY (DojoOrganizationID) REFERENCES kitTessen_Organizations (DojoOrganizationID) ON DELETE CASCADE, ");
			query.Append(" CONSTRAINT FK_kitTessen_OrganizationsChildren_ClassLocations_kitTessen_Locations FOREIGN KEY (GreyFoxContactID) REFERENCES kitTessen_Locations (GreyFoxContactID) ON DELETE CASCADE;");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_Organizations ");
				query.Append(" (DojoOrganizationID COUNTER(1,1) CONSTRAINT PK_kitTessen_Organizations PRIMARY KEY, " +
					"Name TEXT(75)," +
					"Description MEMO," +
					"LocationID LONG," +
					"AdministrativeContactID LONG," +
					"WebServiceUrl TEXT(255)," +
					"RefreshTime DOUBLE," +
					"IsPrimary BIT," +
					"DefaultMemberTypeID LONG," +
					"PromotionFlagEnabled BIT);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_Organizations ");
				query.Append(" (DojoOrganizationID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_Organizations PRIMARY KEY, " +
					"Name NVARCHAR(75)," +
					"Description NTEXT," +
					"LocationID INT," +
					"AdministrativeContactID INT," +
					"WebServiceUrl NVARCHAR(255)," +
					"RefreshTime FLOAT," +
					"IsPrimary BIT," +
					"DefaultMemberTypeID INT," +
					"PromotionFlagEnabled BIT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			//
			// Create object level table for Location.
			//
			GreyFoxContactManager locationManager = new GreyFoxContactManager("kitTessen_Locations");
			locationManager.CreateTable();

			//
			// Create object level table for ClassLocations.
			//
			GreyFoxContactManager classLocationsManager = new GreyFoxContactManager("kitTessen_Locations");
			classLocationsManager.CreateTable();

			//
			// Create children table for ClassLocations.
			//
			query.Length = 0;
			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				query.Append("CREATE TABLE kitTessen_OrganizationsChildren_ClassLocations ");
				query.Append("(DojoOrganizationID LONG, GreyFoxContactID LONG);");
				dbCommand = database.GetSqlStringCommand(query.ToString());
				database.ExecuteNonQuery(dbCommand);

			}
			else
			{
				query.Append("CREATE TABLE kitTessen_OrganizationsChildren_ClassLocations ");
				query.Append("(DojoOrganizationID INT, GreyFoxContactID INT);");
				dbCommand = database.GetSqlStringCommand(query.ToString());
				database.ExecuteNonQuery(dbCommand);

			}
			//
			// Create object level table for AdministrativeContact.
			//
			GreyFoxContactManager administrativeContactManager = new GreyFoxContactManager("sysGlobal_Contacts");
			administrativeContactManager.CreateTable();

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoOrganization dojoOrganization)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_Organizations_" + dojoOrganization.iD.ToString(), dojoOrganization);
		}

		private static DojoOrganization cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_Organizations_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoOrganization)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_Organizations_" + id.ToString());
		}

		private void cacheStoreCollection(int hashCode, DojoOrganizationCollection dojoOrganizationCollection)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add(tableName + "_Collection_" + hashCode.ToString(), dojoOrganizationCollection);
		}

		private DojoOrganizationCollection cacheFindCollection(int hashCode)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData(tableName + "_Collection_" + hashCode.ToString());
			if(cachedObject == null)
				return null;
			return (DojoOrganizationCollection)cachedObject;
		}

		private void cacheRemoveCollection(int hashCode)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove(tableName + "_Collection_" + hashCode.ToString());
		}

		private static void invalidateCachedCollections()
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Flush();
		}

		#endregion

	}
}

