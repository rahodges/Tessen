/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.People;
using Amns.GreyFox.Security;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoBulkAttendanceEntryFlags : int { Member,
				MemberPrivateContact,
				MemberEmergencyContact,
				MemberPublicContact,
				MemberParent,
				MemberRoot,
				MemberMemberType,
				MemberMemberTypeTemplate,
				MemberMembership1,
				MemberMembership2,
				MemberMembership3,
				MemberMembership4,
				MemberMembership5,
				MemberInstructor1,
				MemberInstructor2,
				MemberInstructor3,
				MemberPromotionFlags,
				MemberRank,
				MemberUserAccount,
				MemberCustomer,
				Rank,
				RankPromotionRank,
				RankItem};

	#endregion

	/// <summary>
	/// Datamanager for DojoBulkAttendanceEntry objects.
	/// </summary>
	public class DojoBulkAttendanceEntryManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_BulkAttendance";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoBulkAttendanceEntryID",
			"StartDate",
			"EndDate",
			"Duration",
			"MemberID",
			"RankID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoBulkAttendanceEntryID", "LONG", "-1" },
			{ "StartDate", "DATETIME", "" },
			{ "EndDate", "DATETIME", "" },
			{ "Duration", "DOUBLE", "" },
			{ "MemberID", "LONG", "null" },
			{ "RankID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoBulkAttendanceEntryManager()
		{
		}

		public DojoBulkAttendanceEntryManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoBulkAttendanceEntryManager.isInitialized)
			{
				DojoBulkAttendanceEntryManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoBulkAttendanceEntry into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoBulkAttendanceEntry">The DojoBulkAttendanceEntry to insert into the database.</param>
		internal static int _insert(DojoBulkAttendanceEntry dojoBulkAttendanceEntry)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_BulkAttendance " +
				"(" +
				"StartDate," +
				"EndDate," +
				"Duration," +
				"MemberID," +
				"RankID) VALUES (" +
				"@StartDate," +
				"@EndDate," +
				"@Duration," +
				"@MemberID," +
				"@RankID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoBulkAttendanceEntry);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoBulkAttendanceEntry);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoBulkAttendanceEntry dojoBulkAttendanceEntry)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_BulkAttendance SET StartDate=@StartDate," +
				"EndDate=@EndDate," +
				"Duration=@Duration," +
				"MemberID=@MemberID," +
				"RankID=@RankID WHERE DojoBulkAttendanceEntryID=@DojoBulkAttendanceEntryID;");

			fillParameters(database, dbCommand, dojoBulkAttendanceEntry);
			database.AddInParameter(dbCommand, "DojoBulkAttendanceEntryID", DbType.Int32, dojoBulkAttendanceEntry.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			return dojoBulkAttendanceEntry.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoBulkAttendanceEntry dojoBulkAttendanceEntry)
		{
			#region Default

			addParameter(database, dbCommand, "@StartDate", DbType.Date, dojoBulkAttendanceEntry.startDate);
			addParameter(database, dbCommand, "@EndDate", DbType.Date, dojoBulkAttendanceEntry.endDate);
			addParameter(database, dbCommand, "@Duration", DbType.Double, dojoBulkAttendanceEntry.duration.Ticks);
			if(dojoBulkAttendanceEntry.member == null)
			{
				addParameter(database, dbCommand, "@MemberID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MemberID", DbType.Int32, dojoBulkAttendanceEntry.member.ID);
			}
			if(dojoBulkAttendanceEntry.rank == null)
			{
				addParameter(database, dbCommand, "@RankID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@RankID", DbType.Int32, dojoBulkAttendanceEntry.rank.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoBulkAttendanceEntry dojoBulkAttendanceEntry)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_BulkAttendance WHERE DojoBulkAttendanceEntryID=");
			query.Append(dojoBulkAttendanceEntry.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoBulkAttendanceEntryID '{0}'.", 
					dojoBulkAttendanceEntry.iD)));
			}

			FillFromReader(dojoBulkAttendanceEntry, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoBulkAttendanceEntryCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoBulkAttendanceEntryCollection GetCollection(string whereClause, string sortClause, params DojoBulkAttendanceEntryFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoBulkAttendanceEntryCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoBulkAttendanceEntryFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoBulkAttendanceEntryCollection dojoBulkAttendanceEntryCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoBulkAttendanceEntry.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int memberOffset = -1;
			int memberPrivateContactOffset = -1;
			int memberEmergencyContactOffset = -1;
			int memberPublicContactOffset = -1;
			int memberParentOffset = -1;
			int memberRootOffset = -1;
			int memberMemberTypeOffset = -1;
			int memberMemberTypeTemplateOffset = -1;
			int memberMembership1Offset = -1;
			int memberMembership2Offset = -1;
			int memberMembership3Offset = -1;
			int memberMembership4Offset = -1;
			int memberMembership5Offset = -1;
			int memberInstructor1Offset = -1;
			int memberInstructor2Offset = -1;
			int memberInstructor3Offset = -1;
			int memberRankOffset = -1;
			int memberUserAccountOffset = -1;
			int memberCustomerOffset = -1;
			int rankOffset = -1;
			int rankPromotionRankOffset = -1;
			int rankItemOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoBulkAttendanceEntryFlags.Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberOffset = innerJoinOffset;
							innerJoinOffset = memberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = memberPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberEmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberEmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = memberEmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberPublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberPublicContactOffset = innerJoinOffset;
							innerJoinOffset = memberPublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberParent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberParentOffset = innerJoinOffset;
							innerJoinOffset = memberParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberRoot:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberRootOffset = innerJoinOffset;
							innerJoinOffset = memberRootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = memberMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = memberMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberMembership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership1Offset = innerJoinOffset;
							innerJoinOffset = memberMembership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberMembership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership2Offset = innerJoinOffset;
							innerJoinOffset = memberMembership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberMembership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership3Offset = innerJoinOffset;
							innerJoinOffset = memberMembership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberMembership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership4Offset = innerJoinOffset;
							innerJoinOffset = memberMembership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberMembership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership5Offset = innerJoinOffset;
							innerJoinOffset = memberMembership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberInstructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor1Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberInstructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor2Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberInstructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor3Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberRankOffset = innerJoinOffset;
							innerJoinOffset = memberRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberUserAccountOffset = innerJoinOffset;
							innerJoinOffset = memberUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.MemberCustomer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberCustomerOffset = innerJoinOffset;
							innerJoinOffset = memberCustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankOffset = innerJoinOffset;
							innerJoinOffset = rankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.RankPromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Rank_PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankPromotionRankOffset = innerJoinOffset;
							innerJoinOffset = rankPromotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoBulkAttendanceEntryFlags.RankItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Rank_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankItemOffset = innerJoinOffset;
							innerJoinOffset = rankItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_BulkAttendance AS DojoBulkAttendanceEntry");
			}
			else
			{
				query.Append(" FROM kitTessen_BulkAttendance AS DojoBulkAttendanceEntry");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoBulkAttendanceEntryFlags.Member:
							query.Append(" LEFT JOIN kitTessen_Members AS Member ON DojoBulkAttendanceEntry.MemberID = Member.DojoMemberID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberPrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Member_PrivateContact ON Member.PrivateContactID = Member_PrivateContact.GreyFoxContactID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberEmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Member_EmergencyContact ON Member.EmergencyContactID = Member_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberPublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Member_PublicContact ON Member.PublicContactID = Member_PublicContact.GreyFoxContactID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberParent:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Parent ON Member.ParentID = Member_Parent.DojoMemberID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberRoot:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Root ON Member.RootID = Member_Root.DojoMemberID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Member_MemberType ON Member.MemberTypeID = Member_MemberType.DojoMemberTypeID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Member_MemberTypeTemplate ON Member.MemberTypeTemplateID = Member_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberMembership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership1 ON Member.Membership1ID = Member_Membership1.DojoMembershipID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberMembership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership2 ON Member.Membership2ID = Member_Membership2.DojoMembershipID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberMembership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership3 ON Member.Membership3ID = Member_Membership3.DojoMembershipID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberMembership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership4 ON Member.Membership4ID = Member_Membership4.DojoMembershipID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberMembership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership5 ON Member.Membership5ID = Member_Membership5.DojoMembershipID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberInstructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor1 ON Member.Instructor1ID = Member_Instructor1.DojoMemberID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberInstructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor2 ON Member.Instructor2ID = Member_Instructor2.DojoMemberID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberInstructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor3 ON Member.Instructor3ID = Member_Instructor3.DojoMemberID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Member_Rank ON Member.RankID = Member_Rank.DojoRankID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Member_UserAccount ON Member.UserAccountID = Member_UserAccount.GreyFoxUserID)");
							break;
						case DojoBulkAttendanceEntryFlags.MemberCustomer:
							query.Append(" LEFT JOIN RH_Customers AS Member_Customer ON Member.CustomerID = Member_Customer.RHCustomerID)");
							break;
						case DojoBulkAttendanceEntryFlags.Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Rank ON DojoBulkAttendanceEntry.RankID = Rank.DojoRankID)");
							break;
						case DojoBulkAttendanceEntryFlags.RankPromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Rank_PromotionRank ON Rank.PromotionRankID = Rank_PromotionRank.DojoRankID)");
							break;
						case DojoBulkAttendanceEntryFlags.RankItem:
							query.Append(" LEFT JOIN RH_Items AS Rank_Item ON Rank.ItemID = Rank_Item.RHItemID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoBulkAttendanceEntryCollection = new DojoBulkAttendanceEntryCollection();

			while(r.Read())
			{
				DojoBulkAttendanceEntry dojoBulkAttendanceEntry = ParseFromReader(r, 0, 1);

				// Fill Member
				if(memberOffset != -1 && !r.IsDBNull(memberOffset))
				{
					DojoMemberManager.FillFromReader(dojoBulkAttendanceEntry.member, r, memberOffset, memberOffset+1);

					// Fill 
					if(memberPrivateContactOffset != -1 && !r.IsDBNull(memberPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoBulkAttendanceEntry.member.PrivateContact, "kitTessen_Members_PrivateContacts", r, memberPrivateContactOffset, memberPrivateContactOffset+1);

					// Fill 
					if(memberEmergencyContactOffset != -1 && !r.IsDBNull(memberEmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoBulkAttendanceEntry.member.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, memberEmergencyContactOffset, memberEmergencyContactOffset+1);

					// Fill 
					if(memberPublicContactOffset != -1 && !r.IsDBNull(memberPublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoBulkAttendanceEntry.member.PublicContact, "kitTessen_Members_PublicContacts", r, memberPublicContactOffset, memberPublicContactOffset+1);

					// Fill 
					if(memberParentOffset != -1 && !r.IsDBNull(memberParentOffset))
						DojoMemberManager.FillFromReader(dojoBulkAttendanceEntry.member.Parent, r, memberParentOffset, memberParentOffset+1);

					// Fill 
					if(memberRootOffset != -1 && !r.IsDBNull(memberRootOffset))
						DojoMemberManager.FillFromReader(dojoBulkAttendanceEntry.member.Root, r, memberRootOffset, memberRootOffset+1);

					// Fill 
					if(memberMemberTypeOffset != -1 && !r.IsDBNull(memberMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoBulkAttendanceEntry.member.MemberType, r, memberMemberTypeOffset, memberMemberTypeOffset+1);

					// Fill 
					if(memberMemberTypeTemplateOffset != -1 && !r.IsDBNull(memberMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoBulkAttendanceEntry.member.MemberTypeTemplate, r, memberMemberTypeTemplateOffset, memberMemberTypeTemplateOffset+1);

					// Fill 
					if(memberMembership1Offset != -1 && !r.IsDBNull(memberMembership1Offset))
						DojoMembershipManager.FillFromReader(dojoBulkAttendanceEntry.member.Membership1, r, memberMembership1Offset, memberMembership1Offset+1);

					// Fill 
					if(memberMembership2Offset != -1 && !r.IsDBNull(memberMembership2Offset))
						DojoMembershipManager.FillFromReader(dojoBulkAttendanceEntry.member.Membership2, r, memberMembership2Offset, memberMembership2Offset+1);

					// Fill 
					if(memberMembership3Offset != -1 && !r.IsDBNull(memberMembership3Offset))
						DojoMembershipManager.FillFromReader(dojoBulkAttendanceEntry.member.Membership3, r, memberMembership3Offset, memberMembership3Offset+1);

					// Fill 
					if(memberMembership4Offset != -1 && !r.IsDBNull(memberMembership4Offset))
						DojoMembershipManager.FillFromReader(dojoBulkAttendanceEntry.member.Membership4, r, memberMembership4Offset, memberMembership4Offset+1);

					// Fill 
					if(memberMembership5Offset != -1 && !r.IsDBNull(memberMembership5Offset))
						DojoMembershipManager.FillFromReader(dojoBulkAttendanceEntry.member.Membership5, r, memberMembership5Offset, memberMembership5Offset+1);

					// Fill 
					if(memberInstructor1Offset != -1 && !r.IsDBNull(memberInstructor1Offset))
						DojoMemberManager.FillFromReader(dojoBulkAttendanceEntry.member.Instructor1, r, memberInstructor1Offset, memberInstructor1Offset+1);

					// Fill 
					if(memberInstructor2Offset != -1 && !r.IsDBNull(memberInstructor2Offset))
						DojoMemberManager.FillFromReader(dojoBulkAttendanceEntry.member.Instructor2, r, memberInstructor2Offset, memberInstructor2Offset+1);

					// Fill 
					if(memberInstructor3Offset != -1 && !r.IsDBNull(memberInstructor3Offset))
						DojoMemberManager.FillFromReader(dojoBulkAttendanceEntry.member.Instructor3, r, memberInstructor3Offset, memberInstructor3Offset+1);

					// Fill 
					if(memberRankOffset != -1 && !r.IsDBNull(memberRankOffset))
						DojoRankManager.FillFromReader(dojoBulkAttendanceEntry.member.Rank, r, memberRankOffset, memberRankOffset+1);

					// Fill 
					if(memberUserAccountOffset != -1 && !r.IsDBNull(memberUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoBulkAttendanceEntry.member.UserAccount, r, memberUserAccountOffset, memberUserAccountOffset+1);

					// Fill 
					if(memberCustomerOffset != -1 && !r.IsDBNull(memberCustomerOffset))
						RHCustomerManager.FillFromReader(dojoBulkAttendanceEntry.member.Customer, r, memberCustomerOffset, memberCustomerOffset+1);

				}

				// Fill Rank
				if(rankOffset != -1 && !r.IsDBNull(rankOffset))
				{
					DojoRankManager.FillFromReader(dojoBulkAttendanceEntry.rank, r, rankOffset, rankOffset+1);

					// Fill 
					if(rankPromotionRankOffset != -1 && !r.IsDBNull(rankPromotionRankOffset))
						DojoRankManager.FillFromReader(dojoBulkAttendanceEntry.rank.PromotionRank, r, rankPromotionRankOffset, rankPromotionRankOffset+1);

					// Fill 
					if(rankItemOffset != -1 && !r.IsDBNull(rankItemOffset))
						RHItemManager.FillFromReader(dojoBulkAttendanceEntry.rank.Item, r, rankItemOffset, rankItemOffset+1);

				}

				dojoBulkAttendanceEntryCollection.Add(dojoBulkAttendanceEntry);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoBulkAttendanceEntryCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoBulkAttendanceEntry ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoBulkAttendanceEntry dojoBulkAttendanceEntry = new DojoBulkAttendanceEntry();
			FillFromReader(dojoBulkAttendanceEntry, r, idOffset, dataOffset);
			return dojoBulkAttendanceEntry;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoBulkAttendanceEntry dojoBulkAttendanceEntry, IDataReader r, int idOffset, int dataOffset)
		{
			dojoBulkAttendanceEntry.iD = r.GetInt32(idOffset);
			dojoBulkAttendanceEntry.isSynced = true;
			dojoBulkAttendanceEntry.isPlaceHolder = false;

			dojoBulkAttendanceEntry.startDate = r.GetDateTime(0+dataOffset);
			dojoBulkAttendanceEntry.endDate = r.GetDateTime(1+dataOffset);
			dojoBulkAttendanceEntry.duration = TimeSpan.FromTicks((long) r.GetDouble(2+dataOffset));
			if(!r.IsDBNull(3+dataOffset) && r.GetInt32(3+dataOffset) > 0)
			{
				dojoBulkAttendanceEntry.member = DojoMember.NewPlaceHolder(r.GetInt32(3+dataOffset));
			}
			if(!r.IsDBNull(4+dataOffset) && r.GetInt32(4+dataOffset) > 0)
			{
				dojoBulkAttendanceEntry.rank = DojoRank.NewPlaceHolder(r.GetInt32(4+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_BulkAttendance WHERE DojoBulkAttendanceEntryID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_BulkAttendance ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_BulkAttendance_Member FOREIGN KEY (MemberID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_BulkAttendance_Rank FOREIGN KEY (RankID) REFERENCES kitTessen_Ranks (DojoRankID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_BulkAttendance ");
				query.Append(" (DojoBulkAttendanceEntryID COUNTER(1,1) CONSTRAINT PK_kitTessen_BulkAttendance PRIMARY KEY, " +
					"StartDate DATETIME," +
					"EndDate DATETIME," +
					"Duration DOUBLE," +
					"MemberID LONG," +
					"RankID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_BulkAttendance ");
				query.Append(" (DojoBulkAttendanceEntryID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_BulkAttendance PRIMARY KEY, " +
					"StartDate DATETIME," +
					"EndDate DATETIME," +
					"Duration FLOAT," +
					"MemberID INT," +
					"RankID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		//--- Begin Custom Code ---
        
        public int ClassCountByMember(int memberID)
        {
            Database database = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = database.GetSqlStringCommand("SELECT COUNT(*) " +
                "FROM kitTessen_BulkAttendance WHERE MemberID=@MemberID;");
            database.AddInParameter(dbCommand, "@MemberID", DbType.Int32, memberID);
            int count = (int)database.ExecuteScalar(dbCommand);
            return count;
        }

		//--- End Custom Code ---
	}
}

