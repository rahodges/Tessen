/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;

namespace Amns.Tessen
{
	/// <summary>
	/// An Access Control Group

	/// </summary>
	public class DojoAccessControlGroup : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal DateTime createDate;
		internal DateTime modifyDate;
		internal string name;
		internal string description;
		internal int orderNum;
		internal DojoAttendanceEntry allowedMemberType1;
		internal DojoAttendanceEntry allowedMemberType2;
		internal DojoAttendanceEntry allowedMemberType3;
		internal DojoAttendanceEntry allowedMemberType4;
		internal DojoAttendanceEntry allowedMemberType5;
		internal DojoAttendanceEntry deniedMemberType1;
		internal DojoAttendanceEntry deniedMemberType2;
		internal DojoAttendanceEntry deniedMemberType3;
		internal DojoAttendanceEntry deniedMemberType4;
		internal DojoAttendanceEntry deniedMemberType5;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoAccessControlGroup Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoAccessControlGroup as a Placeholder. Placeholders only contain 
		/// a DojoAccessControlGroup ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime CreateDate
		{
			get
			{
				EnsurePreLoad();
				return createDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= createDate == value;
				createDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime ModifyDate
		{
			get
			{
				EnsurePreLoad();
				return modifyDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= modifyDate == value;
				modifyDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Name
		{
			get
			{
				EnsurePreLoad();
				return name;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= name == value;
				name = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Description
		{
			get
			{
				EnsurePreLoad();
				return description;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= description == value;
				description = value;
			}
		}

		/// <summary>
		/// </summary>
		public int OrderNum
		{
			get
			{
				EnsurePreLoad();
				return orderNum;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= orderNum == value;
				orderNum = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoAttendanceEntry AllowedMemberType1
		{
			get
			{
				EnsurePreLoad();
				return allowedMemberType1;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(allowedMemberType1 == null)
					{
						return;
					}
					else
					{
						allowedMemberType1 = value;
						isSynced = false;
					}
				}
				else
				{
					if(allowedMemberType1 != null && value.ID == allowedMemberType1.ID)
					{
						return; 
					}
					else
					{
						allowedMemberType1 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoAttendanceEntry AllowedMemberType2
		{
			get
			{
				EnsurePreLoad();
				return allowedMemberType2;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(allowedMemberType2 == null)
					{
						return;
					}
					else
					{
						allowedMemberType2 = value;
						isSynced = false;
					}
				}
				else
				{
					if(allowedMemberType2 != null && value.ID == allowedMemberType2.ID)
					{
						return; 
					}
					else
					{
						allowedMemberType2 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoAttendanceEntry AllowedMemberType3
		{
			get
			{
				EnsurePreLoad();
				return allowedMemberType3;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(allowedMemberType3 == null)
					{
						return;
					}
					else
					{
						allowedMemberType3 = value;
						isSynced = false;
					}
				}
				else
				{
					if(allowedMemberType3 != null && value.ID == allowedMemberType3.ID)
					{
						return; 
					}
					else
					{
						allowedMemberType3 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoAttendanceEntry AllowedMemberType4
		{
			get
			{
				EnsurePreLoad();
				return allowedMemberType4;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(allowedMemberType4 == null)
					{
						return;
					}
					else
					{
						allowedMemberType4 = value;
						isSynced = false;
					}
				}
				else
				{
					if(allowedMemberType4 != null && value.ID == allowedMemberType4.ID)
					{
						return; 
					}
					else
					{
						allowedMemberType4 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoAttendanceEntry AllowedMemberType5
		{
			get
			{
				EnsurePreLoad();
				return allowedMemberType5;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(allowedMemberType5 == null)
					{
						return;
					}
					else
					{
						allowedMemberType5 = value;
						isSynced = false;
					}
				}
				else
				{
					if(allowedMemberType5 != null && value.ID == allowedMemberType5.ID)
					{
						return; 
					}
					else
					{
						allowedMemberType5 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoAttendanceEntry DeniedMemberType1
		{
			get
			{
				EnsurePreLoad();
				return deniedMemberType1;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(deniedMemberType1 == null)
					{
						return;
					}
					else
					{
						deniedMemberType1 = value;
						isSynced = false;
					}
				}
				else
				{
					if(deniedMemberType1 != null && value.ID == deniedMemberType1.ID)
					{
						return; 
					}
					else
					{
						deniedMemberType1 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoAttendanceEntry DeniedMemberType2
		{
			get
			{
				EnsurePreLoad();
				return deniedMemberType2;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(deniedMemberType2 == null)
					{
						return;
					}
					else
					{
						deniedMemberType2 = value;
						isSynced = false;
					}
				}
				else
				{
					if(deniedMemberType2 != null && value.ID == deniedMemberType2.ID)
					{
						return; 
					}
					else
					{
						deniedMemberType2 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoAttendanceEntry DeniedMemberType3
		{
			get
			{
				EnsurePreLoad();
				return deniedMemberType3;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(deniedMemberType3 == null)
					{
						return;
					}
					else
					{
						deniedMemberType3 = value;
						isSynced = false;
					}
				}
				else
				{
					if(deniedMemberType3 != null && value.ID == deniedMemberType3.ID)
					{
						return; 
					}
					else
					{
						deniedMemberType3 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoAttendanceEntry DeniedMemberType4
		{
			get
			{
				EnsurePreLoad();
				return deniedMemberType4;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(deniedMemberType4 == null)
					{
						return;
					}
					else
					{
						deniedMemberType4 = value;
						isSynced = false;
					}
				}
				else
				{
					if(deniedMemberType4 != null && value.ID == deniedMemberType4.ID)
					{
						return; 
					}
					else
					{
						deniedMemberType4 = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoAttendanceEntry DeniedMemberType5
		{
			get
			{
				EnsurePreLoad();
				return deniedMemberType5;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(deniedMemberType5 == null)
					{
						return;
					}
					else
					{
						deniedMemberType5 = value;
						isSynced = false;
					}
				}
				else
				{
					if(deniedMemberType5 != null && value.ID == deniedMemberType5.ID)
					{
						return; 
					}
					else
					{
						deniedMemberType5 = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoAccessControlGroup.
		/// </summary>
		public DojoAccessControlGroup()
		{
			createDate = DateTime.Now;
			modifyDate = DateTime.Now;
		}

		public DojoAccessControlGroup(int id)
		{
			this.iD = id;
			isSynced = DojoAccessControlGroupManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoAccessControlGroupManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoAccessControlGroup object state to the database.
		/// </summary>
		public int Save()
		{

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoAccessControlGroupManager._insert(this);
			else
				DojoAccessControlGroupManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoAccessControlGroupManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoAccessControlGroup object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoAccessControlGroup object reflecting the replicated DojoAccessControlGroup object.</returns>
		public DojoAccessControlGroup Duplicate()
		{
			DojoAccessControlGroup clonedDojoAccessControlGroup = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoAccessControlGroup.iD = DojoAccessControlGroupManager._insert(clonedDojoAccessControlGroup);
			clonedDojoAccessControlGroup.isSynced = true;
			return clonedDojoAccessControlGroup;
		}

		/// <summary>
		/// Overwrites and existing DojoAccessControlGroup object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoAccessControlGroupManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoAccessControlGroup object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoAccessControlGroup object reflecting the replicated DojoAccessControlGroup object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoAccessControlGroup object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoAccessControlGroup object reflecting the replicated DojoAccessControlGroup object.</returns>
		public DojoAccessControlGroup Clone()
		{
			DojoAccessControlGroup clonedDojoAccessControlGroup = new DojoAccessControlGroup();
			clonedDojoAccessControlGroup.iD = iD;
			clonedDojoAccessControlGroup.isSynced = isSynced;
			clonedDojoAccessControlGroup.createDate = createDate;
			clonedDojoAccessControlGroup.modifyDate = modifyDate;
			clonedDojoAccessControlGroup.name = name;
			clonedDojoAccessControlGroup.description = description;
			clonedDojoAccessControlGroup.orderNum = orderNum;


			if(allowedMemberType1 != null)
				clonedDojoAccessControlGroup.allowedMemberType1 = allowedMemberType1;

			if(allowedMemberType2 != null)
				clonedDojoAccessControlGroup.allowedMemberType2 = allowedMemberType2;

			if(allowedMemberType3 != null)
				clonedDojoAccessControlGroup.allowedMemberType3 = allowedMemberType3;

			if(allowedMemberType4 != null)
				clonedDojoAccessControlGroup.allowedMemberType4 = allowedMemberType4;

			if(allowedMemberType5 != null)
				clonedDojoAccessControlGroup.allowedMemberType5 = allowedMemberType5;

			if(deniedMemberType1 != null)
				clonedDojoAccessControlGroup.deniedMemberType1 = deniedMemberType1;

			if(deniedMemberType2 != null)
				clonedDojoAccessControlGroup.deniedMemberType2 = deniedMemberType2;

			if(deniedMemberType3 != null)
				clonedDojoAccessControlGroup.deniedMemberType3 = deniedMemberType3;

			if(deniedMemberType4 != null)
				clonedDojoAccessControlGroup.deniedMemberType4 = deniedMemberType4;

			if(deniedMemberType5 != null)
				clonedDojoAccessControlGroup.deniedMemberType5 = deniedMemberType5;

			return clonedDojoAccessControlGroup;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoAccessControlGroup.
		/// </summary>
		/// <returns> A new DojoAccessControlGroup object reflecting the cloned DojoAccessControlGroup object.</returns>
		public DojoAccessControlGroup Copy()
		{
			DojoAccessControlGroup dojoAccessControlGroup = new DojoAccessControlGroup();
			CopyTo(dojoAccessControlGroup);
			return dojoAccessControlGroup;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoAccessControlGroup.
		/// </summary>
		/// <returns> A new DojoAccessControlGroup object reflecting the cloned DojoAccessControlGroup object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoAccessControlGroup from its children.</param>
		public DojoAccessControlGroup Copy(bool isolation)
		{
			DojoAccessControlGroup dojoAccessControlGroup = new DojoAccessControlGroup();
			CopyTo(dojoAccessControlGroup, isolation);
			return dojoAccessControlGroup;
		}

		/// <summary>
		/// Deep copies the current DojoAccessControlGroup to another instance of DojoAccessControlGroup.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoAccessControlGroup">The DojoAccessControlGroup to copy to.</param>
		public void CopyTo(DojoAccessControlGroup dojoAccessControlGroup)
		{
			CopyTo(dojoAccessControlGroup, false);
		}

		/// <summary>
		/// Deep copies the current DojoAccessControlGroup to another instance of DojoAccessControlGroup.
		/// </summary>
		/// <param name="DojoAccessControlGroup">The DojoAccessControlGroup to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoAccessControlGroup from its children.</param>
		public void CopyTo(DojoAccessControlGroup dojoAccessControlGroup, bool isolation)
		{
			dojoAccessControlGroup.iD = iD;
			dojoAccessControlGroup.isPlaceHolder = isPlaceHolder;
			dojoAccessControlGroup.isSynced = isSynced;
			dojoAccessControlGroup.createDate = createDate;
			dojoAccessControlGroup.modifyDate = modifyDate;
			dojoAccessControlGroup.name = name;
			dojoAccessControlGroup.description = description;
			dojoAccessControlGroup.orderNum = orderNum;
			if(allowedMemberType1 != null)
			{
				if(isolation)
				{
					dojoAccessControlGroup.allowedMemberType1 = allowedMemberType1.NewPlaceHolder();
				}
				else
				{
					dojoAccessControlGroup.allowedMemberType1 = allowedMemberType1.Copy(false);
				}
			}
			if(allowedMemberType2 != null)
			{
				if(isolation)
				{
					dojoAccessControlGroup.allowedMemberType2 = allowedMemberType2.NewPlaceHolder();
				}
				else
				{
					dojoAccessControlGroup.allowedMemberType2 = allowedMemberType2.Copy(false);
				}
			}
			if(allowedMemberType3 != null)
			{
				if(isolation)
				{
					dojoAccessControlGroup.allowedMemberType3 = allowedMemberType3.NewPlaceHolder();
				}
				else
				{
					dojoAccessControlGroup.allowedMemberType3 = allowedMemberType3.Copy(false);
				}
			}
			if(allowedMemberType4 != null)
			{
				if(isolation)
				{
					dojoAccessControlGroup.allowedMemberType4 = allowedMemberType4.NewPlaceHolder();
				}
				else
				{
					dojoAccessControlGroup.allowedMemberType4 = allowedMemberType4.Copy(false);
				}
			}
			if(allowedMemberType5 != null)
			{
				if(isolation)
				{
					dojoAccessControlGroup.allowedMemberType5 = allowedMemberType5.NewPlaceHolder();
				}
				else
				{
					dojoAccessControlGroup.allowedMemberType5 = allowedMemberType5.Copy(false);
				}
			}
			if(deniedMemberType1 != null)
			{
				if(isolation)
				{
					dojoAccessControlGroup.deniedMemberType1 = deniedMemberType1.NewPlaceHolder();
				}
				else
				{
					dojoAccessControlGroup.deniedMemberType1 = deniedMemberType1.Copy(false);
				}
			}
			if(deniedMemberType2 != null)
			{
				if(isolation)
				{
					dojoAccessControlGroup.deniedMemberType2 = deniedMemberType2.NewPlaceHolder();
				}
				else
				{
					dojoAccessControlGroup.deniedMemberType2 = deniedMemberType2.Copy(false);
				}
			}
			if(deniedMemberType3 != null)
			{
				if(isolation)
				{
					dojoAccessControlGroup.deniedMemberType3 = deniedMemberType3.NewPlaceHolder();
				}
				else
				{
					dojoAccessControlGroup.deniedMemberType3 = deniedMemberType3.Copy(false);
				}
			}
			if(deniedMemberType4 != null)
			{
				if(isolation)
				{
					dojoAccessControlGroup.deniedMemberType4 = deniedMemberType4.NewPlaceHolder();
				}
				else
				{
					dojoAccessControlGroup.deniedMemberType4 = deniedMemberType4.Copy(false);
				}
			}
			if(deniedMemberType5 != null)
			{
				if(isolation)
				{
					dojoAccessControlGroup.deniedMemberType5 = deniedMemberType5.NewPlaceHolder();
				}
				else
				{
					dojoAccessControlGroup.deniedMemberType5 = deniedMemberType5.Copy(false);
				}
			}
		}

		public DojoAccessControlGroup NewPlaceHolder()
		{
			DojoAccessControlGroup dojoAccessControlGroup = new DojoAccessControlGroup();
			dojoAccessControlGroup.iD = iD;
			dojoAccessControlGroup.isPlaceHolder = true;
			dojoAccessControlGroup.isSynced = true;
			return dojoAccessControlGroup;
		}

		public static DojoAccessControlGroup NewPlaceHolder(int iD)
		{
			DojoAccessControlGroup dojoAccessControlGroup = new DojoAccessControlGroup();
			dojoAccessControlGroup.iD = iD;
			dojoAccessControlGroup.isPlaceHolder = true;
			dojoAccessControlGroup.isSynced = true;
			return dojoAccessControlGroup;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoAccessControlGroup dojoAccessControlGroup = (DojoAccessControlGroup) obj;
			return this.iD - dojoAccessControlGroup.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoAccessControlGroup dojoAccessControlGroup)
		{
			return this.iD - dojoAccessControlGroup.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

	}
}
