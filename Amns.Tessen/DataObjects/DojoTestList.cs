/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;

namespace Amns.Tessen
{
	/// <summary>
	/// A list for canidates of a dojo test.
	/// </summary>
	public class DojoTestList : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal DateTime createDate;
		internal DateTime modifyDate;
		internal DojoTest test;
		internal DojoTestListStatus status;
		internal DojoMember editor;
		internal string editorComments;
		internal bool field1;
		internal DojoMemberCollection candidates;
		internal DateTime candidatesCompileDate;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoTestList Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoTestList as a Placeholder. Placeholders only contain 
		/// a DojoTestList ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime CreateDate
		{
			get
			{
				EnsurePreLoad();
				return createDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= createDate == value;
				createDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime ModifyDate
		{
			get
			{
				EnsurePreLoad();
				return modifyDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= modifyDate == value;
				modifyDate = value;
			}
		}

		/// <summary>
		/// The test associated with this test list.
		/// </summary>
		public DojoTest Test
		{
			get
			{
				EnsurePreLoad();
				return test;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(test == null)
					{
						return;
					}
					else
					{
						test = value;
						isSynced = false;
					}
				}
				else
				{
					if(test != null && value.ID == test.ID)
					{
						return; 
					}
					else
					{
						test = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoTestListStatus Status
		{
			get
			{
				EnsurePreLoad();
				return status;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(status == null)
					{
						return;
					}
					else
					{
						status = value;
						isSynced = false;
					}
				}
				else
				{
					if(status != null && value.ID == status.ID)
					{
						return; 
					}
					else
					{
						status = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Editor
		{
			get
			{
				EnsurePreLoad();
				return editor;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(editor == null)
					{
						return;
					}
					else
					{
						editor = value;
						isSynced = false;
					}
				}
				else
				{
					if(editor != null && value.ID == editor.ID)
					{
						return; 
					}
					else
					{
						editor = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public string EditorComments
		{
			get
			{
				EnsurePreLoad();
				return editorComments;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= editorComments == value;
				editorComments = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool Field1
		{
			get
			{
				EnsurePreLoad();
				return field1;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= field1 == value;
				field1 = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMemberCollection Candidates
		{
			get
			{
				EnsurePreLoad();
				if(candidates == null)
				{
					DojoTestListManager.FillCandidates(this);
					candidates.CollectionChanged += new System.EventHandler(childrenCollection_Changed);
				}
				return candidates;
			}
			set
			{
				EnsurePreLoad();
				if(!object.Equals(candidates, value))
				{
					if(value == null)
						Candidates = new DojoMemberCollection();
					else
						candidates = value;
					candidates.CollectionChanged += new System.EventHandler(childrenCollection_Changed);
					isSynced = false;
				}
			}
		}

		/// <summary>
		/// </summary>
		public DateTime CandidatesCompileDate
		{
			get
			{
				EnsurePreLoad();
				return candidatesCompileDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= candidatesCompileDate == value;
				candidatesCompileDate = value;
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoTestList.
		/// </summary>
		public DojoTestList()
		{
			createDate = DateTime.Now;
			modifyDate = DateTime.Now;
		}

		public DojoTestList(int id)
		{
			this.iD = id;
			isSynced = DojoTestListManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoTestListManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoTestList object state to the database.
		/// </summary>
		public int Save()
		{

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoTestListManager._insert(this);
			else
				DojoTestListManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoTestListManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoTestList object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoTestList object reflecting the replicated DojoTestList object.</returns>
		public DojoTestList Duplicate()
		{
			DojoTestList clonedDojoTestList = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoTestList.iD = DojoTestListManager._insert(clonedDojoTestList);
			clonedDojoTestList.isSynced = true;
			return clonedDojoTestList;
		}

		/// <summary>
		/// Overwrites and existing DojoTestList object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoTestListManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoTestList object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoTestList object reflecting the replicated DojoTestList object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoTestList object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoTestList object reflecting the replicated DojoTestList object.</returns>
		public DojoTestList Clone()
		{
			DojoTestList clonedDojoTestList = new DojoTestList();
			clonedDojoTestList.iD = iD;
			clonedDojoTestList.isSynced = isSynced;
			clonedDojoTestList.createDate = createDate;
			clonedDojoTestList.modifyDate = modifyDate;
			clonedDojoTestList.editorComments = editorComments;
			clonedDojoTestList.field1 = field1;
			clonedDojoTestList.candidatesCompileDate = candidatesCompileDate;


			if(test != null)
				clonedDojoTestList.test = test;

			if(status != null)
				clonedDojoTestList.status = status;

			if(editor != null)
				clonedDojoTestList.editor = editor;

			if(candidates != null)
				clonedDojoTestList.candidates = candidates.Clone();

			return clonedDojoTestList;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoTestList.
		/// </summary>
		/// <returns> A new DojoTestList object reflecting the cloned DojoTestList object.</returns>
		public DojoTestList Copy()
		{
			DojoTestList dojoTestList = new DojoTestList();
			CopyTo(dojoTestList);
			return dojoTestList;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoTestList.
		/// </summary>
		/// <returns> A new DojoTestList object reflecting the cloned DojoTestList object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoTestList from its children.</param>
		public DojoTestList Copy(bool isolation)
		{
			DojoTestList dojoTestList = new DojoTestList();
			CopyTo(dojoTestList, isolation);
			return dojoTestList;
		}

		/// <summary>
		/// Deep copies the current DojoTestList to another instance of DojoTestList.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoTestList">The DojoTestList to copy to.</param>
		public void CopyTo(DojoTestList dojoTestList)
		{
			CopyTo(dojoTestList, false);
		}

		/// <summary>
		/// Deep copies the current DojoTestList to another instance of DojoTestList.
		/// </summary>
		/// <param name="DojoTestList">The DojoTestList to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoTestList from its children.</param>
		public void CopyTo(DojoTestList dojoTestList, bool isolation)
		{
			dojoTestList.iD = iD;
			dojoTestList.isPlaceHolder = isPlaceHolder;
			dojoTestList.isSynced = isSynced;
			dojoTestList.createDate = createDate;
			dojoTestList.modifyDate = modifyDate;
			if(test != null)
			{
				if(isolation)
				{
					dojoTestList.test = test.NewPlaceHolder();
				}
				else
				{
					dojoTestList.test = test.Copy(false);
				}
			}
			if(status != null)
			{
				if(isolation)
				{
					dojoTestList.status = status.NewPlaceHolder();
				}
				else
				{
					dojoTestList.status = status.Copy(false);
				}
			}
			if(editor != null)
			{
				if(isolation)
				{
					dojoTestList.editor = editor.NewPlaceHolder();
				}
				else
				{
					dojoTestList.editor = editor.Copy(false);
				}
			}
			dojoTestList.editorComments = editorComments;
			dojoTestList.field1 = field1;
			if(candidates != null)
			{
				if(isolation)
				{
					dojoTestList.candidates = candidates.Copy(true);
				}
				else
				{
					dojoTestList.candidates = candidates.Copy(false);
				}
			}
			dojoTestList.candidatesCompileDate = candidatesCompileDate;
		}

		public DojoTestList NewPlaceHolder()
		{
			DojoTestList dojoTestList = new DojoTestList();
			dojoTestList.iD = iD;
			dojoTestList.isPlaceHolder = true;
			dojoTestList.isSynced = true;
			return dojoTestList;
		}

		public static DojoTestList NewPlaceHolder(int iD)
		{
			DojoTestList dojoTestList = new DojoTestList();
			dojoTestList.iD = iD;
			dojoTestList.isPlaceHolder = true;
			dojoTestList.isSynced = true;
			return dojoTestList;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoTestList dojoTestList = (DojoTestList) obj;
			return this.iD - dojoTestList.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoTestList dojoTestList)
		{
			return this.iD - dojoTestList.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													
		public override string ToString()
		{
			if(Status != null)
                return test.Name + "(" + Status.Name + ")";
			else
				return test.Name;
		}

		//--- End Custom Code ---
	}
}
