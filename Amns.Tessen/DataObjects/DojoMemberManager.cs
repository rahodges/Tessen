/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.People;
using Amns.GreyFox.Security;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoMemberFlags : int { PrivateContact,
				EmergencyContact,
				PublicContact,
				Parent,
				ParentPrivateContact,
				ParentEmergencyContact,
				ParentPublicContact,
				ParentParent,
				ParentRoot,
				ParentMemberType,
				ParentMemberTypeTemplate,
				ParentMembership1,
				ParentMembership2,
				ParentMembership3,
				ParentMembership4,
				ParentMembership5,
				ParentInstructor1,
				ParentInstructor2,
				ParentInstructor3,
				ParentPromotionFlags,
				ParentRank,
				ParentUserAccount,
				ParentCustomer,
				Root,
				RootPrivateContact,
				RootEmergencyContact,
				RootPublicContact,
				RootParent,
				RootRoot,
				RootMemberType,
				RootMemberTypeTemplate,
				RootMembership1,
				RootMembership2,
				RootMembership3,
				RootMembership4,
				RootMembership5,
				RootInstructor1,
				RootInstructor2,
				RootInstructor3,
				RootPromotionFlags,
				RootRank,
				RootUserAccount,
				RootCustomer,
				MemberType,
				MemberTypeTemplate,
				MemberTypeTemplateMemberType,
				MemberTypeTemplateParent,
				MemberTypeTemplateRoot,
				MemberTypeTemplateInitialRank,
				MemberTypeTemplateInitialRole,
				MemberTypeTemplateRankMin,
				MemberTypeTemplateRankMax,
				MemberTypeTemplateMembershipTemplate1,
				MemberTypeTemplateMembershipTemplate2,
				MemberTypeTemplateMembershipTemplate3,
				MemberTypeTemplateMembershipTemplate4,
				MemberTypeTemplateMembershipTemplate5,
				Membership1,
				Membership1Member,
				Membership1Organization,
				Membership1Parent,
				Membership1MemberTypeTemplate,
				Membership1MembershipTemplate,
				Membership1PriorMembership,
				Membership1InvoiceLine,
				Membership2,
				Membership2Member,
				Membership2Organization,
				Membership2Parent,
				Membership2MemberTypeTemplate,
				Membership2MembershipTemplate,
				Membership2PriorMembership,
				Membership2InvoiceLine,
				Membership3,
				Membership3Member,
				Membership3Organization,
				Membership3Parent,
				Membership3MemberTypeTemplate,
				Membership3MembershipTemplate,
				Membership3PriorMembership,
				Membership3InvoiceLine,
				Membership4,
				Membership4Member,
				Membership4Organization,
				Membership4Parent,
				Membership4MemberTypeTemplate,
				Membership4MembershipTemplate,
				Membership4PriorMembership,
				Membership4InvoiceLine,
				Membership5,
				Membership5Member,
				Membership5Organization,
				Membership5Parent,
				Membership5MemberTypeTemplate,
				Membership5MembershipTemplate,
				Membership5PriorMembership,
				Membership5InvoiceLine,
				Instructor1,
				Instructor1PrivateContact,
				Instructor1EmergencyContact,
				Instructor1PublicContact,
				Instructor1Parent,
				Instructor1Root,
				Instructor1MemberType,
				Instructor1MemberTypeTemplate,
				Instructor1Membership1,
				Instructor1Membership2,
				Instructor1Membership3,
				Instructor1Membership4,
				Instructor1Membership5,
				Instructor1Instructor1,
				Instructor1Instructor2,
				Instructor1Instructor3,
				Instructor1PromotionFlags,
				Instructor1Rank,
				Instructor1UserAccount,
				Instructor1Customer,
				Instructor2,
				Instructor2PrivateContact,
				Instructor2EmergencyContact,
				Instructor2PublicContact,
				Instructor2Parent,
				Instructor2Root,
				Instructor2MemberType,
				Instructor2MemberTypeTemplate,
				Instructor2Membership1,
				Instructor2Membership2,
				Instructor2Membership3,
				Instructor2Membership4,
				Instructor2Membership5,
				Instructor2Instructor1,
				Instructor2Instructor2,
				Instructor2Instructor3,
				Instructor2PromotionFlags,
				Instructor2Rank,
				Instructor2UserAccount,
				Instructor2Customer,
				Instructor3,
				Instructor3PrivateContact,
				Instructor3EmergencyContact,
				Instructor3PublicContact,
				Instructor3Parent,
				Instructor3Root,
				Instructor3MemberType,
				Instructor3MemberTypeTemplate,
				Instructor3Membership1,
				Instructor3Membership2,
				Instructor3Membership3,
				Instructor3Membership4,
				Instructor3Membership5,
				Instructor3Instructor1,
				Instructor3Instructor2,
				Instructor3Instructor3,
				Instructor3PromotionFlags,
				Instructor3Rank,
				Instructor3UserAccount,
				Instructor3Customer,
				Rank,
				RankPromotionRank,
				RankItem,
				UserAccount,
				UserAccountContact,
				UserAccountRoles,
				Customer,
				CustomerPrivateContact,
				CustomerShippingContact,
				CustomerBillingContact,
				CustomerPrimaryAccount,
				CustomerTax,
				CustomerUserAccount};

	#endregion

	/// <summary>
	/// Datamanager for DojoMember objects.
	/// </summary>
	public class DojoMemberManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_Members";
		public static readonly string PrivateContactTable = "kitTessen_Members_PrivateContacts";
		public static readonly string EmergencyContactTable = "kitTessen_Members_EmergencyContacts";
		public static readonly string PublicContactTable = "kitTessen_Members_PublicContacts";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoMemberID",
			"PrivateContactID",
			"EmergencyContactID",
			"PublicContactID",
			"ParentID",
			"RootID",
			"CreateDate",
			"ModifyDate",
			"MemberTypeID",
			"MemberTypeTemplateID",
			"MemberTypeTreeHash",
			"MemberSince",
			"Membership1ID",
			"Membership2ID",
			"Membership3ID",
			"Membership4ID",
			"Membership5ID",
			"LastMembershipScan",
			"IsPrimaryOrgActive",
			"TimeInRank",
			"TimeInMembership",
			"Instructor1ID",
			"Instructor2ID",
			"Instructor3ID",
			"LastSignin",
			"LastAttendanceScan",
			"AttendanceMessage",
			"HasWaiver",
			"IsPromotable",
			"IsInstructor",
			"RankID",
			"RankDate",
			"UserAccountID",
			"IsPastDue",
			"LastDuesScan",
			"CustomerID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoMemberID", "LONG", "-1" },
			{ "PrivateContactID", "LONG", "null" },
			{ "EmergencyContactID", "LONG", "null" },
			{ "PublicContactID", "LONG", "null" },
			{ "ParentID", "LONG", "null" },
			{ "RootID", "LONG", "null" },
			{ "CreateDate", "DATETIME", "DateTime.Now" },
			{ "ModifyDate", "DATETIME", "DateTime.Now" },
			{ "MemberTypeID", "LONG", "null" },
			{ "MemberTypeTemplateID", "LONG", "null" },
			{ "MemberTypeTreeHash", "TEXT(75)", "string.Empty" },
			{ "MemberSince", "DATETIME", "" },
			{ "Membership1ID", "LONG", "null" },
			{ "Membership2ID", "LONG", "null" },
			{ "Membership3ID", "LONG", "null" },
			{ "Membership4ID", "LONG", "null" },
			{ "Membership5ID", "LONG", "null" },
			{ "LastMembershipScan", "DATETIME", "" },
			{ "IsPrimaryOrgActive", "BIT", "" },
			{ "TimeInRank", "DOUBLE", "" },
			{ "TimeInMembership", "DOUBLE", "" },
			{ "Instructor1ID", "LONG", "null" },
			{ "Instructor2ID", "LONG", "null" },
			{ "Instructor3ID", "LONG", "null" },
			{ "LastSignin", "DATETIME", "" },
			{ "LastAttendanceScan", "DATETIME", "" },
			{ "AttendanceMessage", "MEMO", "" },
			{ "HasWaiver", "BIT", "" },
			{ "IsPromotable", "BIT", "" },
			{ "IsInstructor", "BIT", "" },
			{ "RankID", "LONG", "null" },
			{ "RankDate", "DATETIME", "" },
			{ "UserAccountID", "LONG", "null" },
			{ "IsPastDue", "BIT", "" },
			{ "LastDuesScan", "DATETIME", "" },
			{ "CustomerID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoMemberManager()
		{
		}

		public DojoMemberManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoMemberManager.isInitialized)
			{
				DojoMemberManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoMember into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoMember">The DojoMember to insert into the database.</param>
		internal static int _insert(DojoMember dojoMember)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			// Set Create Date to Now
			dojoMember.CreateDate = DateTime.Now.ToUniversalTime();

			// Set Modify Date to Now
			dojoMember.ModifyDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_Members " +
				"(" +
				"PrivateContactID," +
				"EmergencyContactID," +
				"PublicContactID," +
				"ParentID," +
				"RootID," +
				"CreateDate," +
				"ModifyDate," +
				"MemberTypeID," +
				"MemberTypeTemplateID," +
				"MemberTypeTreeHash," +
				"MemberSince," +
				"Membership1ID," +
				"Membership2ID," +
				"Membership3ID," +
				"Membership4ID," +
				"Membership5ID," +
				"LastMembershipScan," +
				"IsPrimaryOrgActive," +
				"TimeInRank," +
				"TimeInMembership," +
				"Instructor1ID," +
				"Instructor2ID," +
				"Instructor3ID," +
				"LastSignin," +
				"LastAttendanceScan," +
				"AttendanceMessage," +
				"HasWaiver," +
				"IsPromotable," +
				"IsInstructor," +
				"RankID," +
				"RankDate," +
				"UserAccountID," +
				"IsPastDue," +
				"LastDuesScan," +
				"CustomerID) VALUES (" +
				"@PrivateContactID," +
				"@EmergencyContactID," +
				"@PublicContactID," +
				"@ParentID," +
				"@RootID," +
				"@CreateDate," +
				"@ModifyDate," +
				"@MemberTypeID," +
				"@MemberTypeTemplateID," +
				"@MemberTypeTreeHash," +
				"@MemberSince," +
				"@Membership1ID," +
				"@Membership2ID," +
				"@Membership3ID," +
				"@Membership4ID," +
				"@Membership5ID," +
				"@LastMembershipScan," +
				"@IsPrimaryOrgActive," +
				"@TimeInRank," +
				"@TimeInMembership," +
				"@Instructor1ID," +
				"@Instructor2ID," +
				"@Instructor3ID," +
				"@LastSignin," +
				"@LastAttendanceScan," +
				"@AttendanceMessage," +
				"@HasWaiver," +
				"@IsPromotable," +
				"@IsInstructor," +
				"@RankID," +
				"@RankDate," +
				"@UserAccountID," +
				"@IsPastDue," +
				"@LastDuesScan," +
				"@CustomerID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoMember);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoMember);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}

			// Save child relationships for PromotionFlags.
			if(dojoMember.promotionFlags != null)
			{
				dbCommand = database.GetSqlStringCommand("INSERT INTO kitTessen_MembersChildren_PromotionFlags " +
					"(DojoMemberID, DojoPromotionFlagID)" + 
					" VALUES (@DojoMemberID, @DojoPromotionFlagID);");
				addParameter(database, dbCommand, "@DojoMemberID", DbType.Int32);
				addParameter(database, dbCommand, "@DojoPromotionFlagID", DbType.Int32);
				foreach(DojoPromotionFlag item in dojoMember.promotionFlags)
				{
					dbCommand.Parameters["@DojoMemberID"].Value = id;
					dbCommand.Parameters["@DojoPromotionFlagID"].Value = item.ID;
					database.ExecuteNonQuery(dbCommand);
				}
			}
			// Store dojoMember in cache.
			if(cacheEnabled) cacheStore(dojoMember);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoMember dojoMember)
		{
			Database database;
			DbCommand dbCommand;

			// Set Modify Date to Now
			dojoMember.ModifyDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_Members SET PrivateContactID=@PrivateContactID," +
				"EmergencyContactID=@EmergencyContactID," +
				"PublicContactID=@PublicContactID," +
				"ParentID=@ParentID," +
				"RootID=@RootID," +
				"CreateDate=@CreateDate," +
				"ModifyDate=@ModifyDate," +
				"MemberTypeID=@MemberTypeID," +
				"MemberTypeTemplateID=@MemberTypeTemplateID," +
				"MemberTypeTreeHash=@MemberTypeTreeHash," +
				"MemberSince=@MemberSince," +
				"Membership1ID=@Membership1ID," +
				"Membership2ID=@Membership2ID," +
				"Membership3ID=@Membership3ID," +
				"Membership4ID=@Membership4ID," +
				"Membership5ID=@Membership5ID," +
				"LastMembershipScan=@LastMembershipScan," +
				"IsPrimaryOrgActive=@IsPrimaryOrgActive," +
				"TimeInRank=@TimeInRank," +
				"TimeInMembership=@TimeInMembership," +
				"Instructor1ID=@Instructor1ID," +
				"Instructor2ID=@Instructor2ID," +
				"Instructor3ID=@Instructor3ID," +
				"LastSignin=@LastSignin," +
				"LastAttendanceScan=@LastAttendanceScan," +
				"AttendanceMessage=@AttendanceMessage," +
				"HasWaiver=@HasWaiver," +
				"IsPromotable=@IsPromotable," +
				"IsInstructor=@IsInstructor," +
				"RankID=@RankID," +
				"RankDate=@RankDate," +
				"UserAccountID=@UserAccountID," +
				"IsPastDue=@IsPastDue," +
				"LastDuesScan=@LastDuesScan," +
				"CustomerID=@CustomerID WHERE DojoMemberID=@DojoMemberID;");

			fillParameters(database, dbCommand, dojoMember);
			database.AddInParameter(dbCommand, "DojoMemberID", DbType.Int32, dojoMember.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			if(dojoMember.promotionFlags != null)
			{

				// Delete child relationships for PromotionFlags.
				dbCommand = database.GetSqlStringCommand("DELETE  FROM kitTessen_MembersChildren_PromotionFlags WHERE DojoMemberID=@DojoMemberID;");
				database.AddInParameter(dbCommand, "@DojoMemberID", DbType.Int32, dojoMember.iD);
				database.ExecuteNonQuery(dbCommand);

				// Save child relationships for PromotionFlags.
				dbCommand = database.GetSqlStringCommand("INSERT INTO kitTessen_MembersChildren_PromotionFlags (DojoMemberID, DojoPromotionFlagID) VALUES (@DojoMemberID, @DojoPromotionFlagID);");
				database.AddInParameter(dbCommand, "@DojoMemberID", DbType.Int32, dojoMember.iD);
				database.AddInParameter(dbCommand, "@DojoPromotionFlagID", DbType.Int32);
				foreach(DojoPromotionFlag dojoPromotionFlag in dojoMember.promotionFlags)
				{
					dbCommand.Parameters["@DojoPromotionFlagID"].Value = dojoPromotionFlag.ID;
					database.ExecuteNonQuery(dbCommand);
				}
			}

			// Store dojoMember in cache.
			if (cacheEnabled) cacheStore(dojoMember);

			return dojoMember.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoMember dojoMember)
		{
			#region General

			if(dojoMember.privateContact == null)
			{
				addParameter(database, dbCommand, "@PrivateContactID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@PrivateContactID", DbType.Int32, dojoMember.privateContact.ID);
			}
			if(dojoMember.emergencyContact == null)
			{
				addParameter(database, dbCommand, "@EmergencyContactID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@EmergencyContactID", DbType.Int32, dojoMember.emergencyContact.ID);
			}
			if(dojoMember.publicContact == null)
			{
				addParameter(database, dbCommand, "@PublicContactID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@PublicContactID", DbType.Int32, dojoMember.publicContact.ID);
			}
			if(dojoMember.parent == null)
			{
				addParameter(database, dbCommand, "@ParentID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ParentID", DbType.Int32, dojoMember.parent.ID);
			}
			if(dojoMember.root == null)
			{
				addParameter(database, dbCommand, "@RootID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@RootID", DbType.Int32, dojoMember.root.ID);
			}

			#endregion

			#region _system

			addParameter(database, dbCommand, "@CreateDate", DbType.Date, dojoMember.createDate);
			addParameter(database, dbCommand, "@ModifyDate", DbType.Date, dojoMember.modifyDate);

			#endregion

			#region Membership

			if(dojoMember.memberType == null)
			{
				addParameter(database, dbCommand, "@MemberTypeID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MemberTypeID", DbType.Int32, dojoMember.memberType.ID);
			}
			if(dojoMember.memberTypeTemplate == null)
			{
				addParameter(database, dbCommand, "@MemberTypeTemplateID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MemberTypeTemplateID", DbType.Int32, dojoMember.memberTypeTemplate.ID);
			}
			addParameter(database, dbCommand, "@MemberTypeTreeHash", DbType.String, dojoMember.memberTypeTreeHash);
			addParameter(database, dbCommand, "@MemberSince", DbType.Date, dojoMember.memberSince);
			if(dojoMember.membership1 == null)
			{
				addParameter(database, dbCommand, "@Membership1ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@Membership1ID", DbType.Int32, dojoMember.membership1.ID);
			}
			if(dojoMember.membership2 == null)
			{
				addParameter(database, dbCommand, "@Membership2ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@Membership2ID", DbType.Int32, dojoMember.membership2.ID);
			}
			if(dojoMember.membership3 == null)
			{
				addParameter(database, dbCommand, "@Membership3ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@Membership3ID", DbType.Int32, dojoMember.membership3.ID);
			}
			if(dojoMember.membership4 == null)
			{
				addParameter(database, dbCommand, "@Membership4ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@Membership4ID", DbType.Int32, dojoMember.membership4.ID);
			}
			if(dojoMember.membership5 == null)
			{
				addParameter(database, dbCommand, "@Membership5ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@Membership5ID", DbType.Int32, dojoMember.membership5.ID);
			}
			addParameter(database, dbCommand, "@LastMembershipScan", DbType.Date, dojoMember.lastMembershipScan);
			addParameter(database, dbCommand, "@IsPrimaryOrgActive", DbType.Boolean, dojoMember.isPrimaryOrgActive);

			#endregion

			#region Attendance

			addParameter(database, dbCommand, "@TimeInRank", DbType.Double, dojoMember.timeInRank.Ticks);
			addParameter(database, dbCommand, "@TimeInMembership", DbType.Double, dojoMember.timeInMembership.Ticks);
			if(dojoMember.instructor1 == null)
			{
				addParameter(database, dbCommand, "@Instructor1ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@Instructor1ID", DbType.Int32, dojoMember.instructor1.ID);
			}
			if(dojoMember.instructor2 == null)
			{
				addParameter(database, dbCommand, "@Instructor2ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@Instructor2ID", DbType.Int32, dojoMember.instructor2.ID);
			}
			if(dojoMember.instructor3 == null)
			{
				addParameter(database, dbCommand, "@Instructor3ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@Instructor3ID", DbType.Int32, dojoMember.instructor3.ID);
			}
			addParameter(database, dbCommand, "@LastSignin", DbType.Date, dojoMember.lastSignin);
			addParameter(database, dbCommand, "@LastAttendanceScan", DbType.Date, dojoMember.lastAttendanceScan);
			addParameter(database, dbCommand, "@AttendanceMessage", DbType.String, dojoMember.attendanceMessage);

			#endregion

			#region Activity

			addParameter(database, dbCommand, "@HasWaiver", DbType.Boolean, dojoMember.hasWaiver);
			addParameter(database, dbCommand, "@IsPromotable", DbType.Boolean, dojoMember.isPromotable);
			addParameter(database, dbCommand, "@IsInstructor", DbType.Boolean, dojoMember.isInstructor);
			if(dojoMember.rank == null)
			{
				addParameter(database, dbCommand, "@RankID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@RankID", DbType.Int32, dojoMember.rank.ID);
			}
			addParameter(database, dbCommand, "@RankDate", DbType.Date, dojoMember.rankDate);

			#endregion

			#region Security

			if(dojoMember.userAccount == null)
			{
				addParameter(database, dbCommand, "@UserAccountID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@UserAccountID", DbType.Int32, dojoMember.userAccount.ID);
			}

			#endregion

			#region Accounting

			addParameter(database, dbCommand, "@IsPastDue", DbType.Boolean, dojoMember.isPastDue);
			addParameter(database, dbCommand, "@LastDuesScan", DbType.Date, dojoMember.lastDuesScan);

			#endregion

			#region Rappahanock

			if(dojoMember.customer == null)
			{
				addParameter(database, dbCommand, "@CustomerID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@CustomerID", DbType.Int32, dojoMember.customer.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoMember dojoMember)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoMember.iD);
				if(cachedObject != null)
				{
					((DojoMember)cachedObject).CopyTo(dojoMember, true);
					return dojoMember.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_Members WHERE DojoMemberID=");
			query.Append(dojoMember.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoMemberID '{0}'.", 
					dojoMember.iD)));
			}

			FillFromReader(dojoMember, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoMember in cache.
			if(cacheEnabled) cacheStore(dojoMember);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoMemberCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoMemberCollection GetCollection(string whereClause, string sortClause, params DojoMemberFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoMemberCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoMemberFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoMemberCollection dojoMemberCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoMember.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int privateContactOffset = -1;
			int emergencyContactOffset = -1;
			int publicContactOffset = -1;
			int parentOffset = -1;
			int parentPrivateContactOffset = -1;
			int parentEmergencyContactOffset = -1;
			int parentPublicContactOffset = -1;
			int parentParentOffset = -1;
			int parentRootOffset = -1;
			int parentMemberTypeOffset = -1;
			int parentMemberTypeTemplateOffset = -1;
			int parentMembership1Offset = -1;
			int parentMembership2Offset = -1;
			int parentMembership3Offset = -1;
			int parentMembership4Offset = -1;
			int parentMembership5Offset = -1;
			int parentInstructor1Offset = -1;
			int parentInstructor2Offset = -1;
			int parentInstructor3Offset = -1;
			int parentRankOffset = -1;
			int parentUserAccountOffset = -1;
			int parentCustomerOffset = -1;
			int rootOffset = -1;
			int rootPrivateContactOffset = -1;
			int rootEmergencyContactOffset = -1;
			int rootPublicContactOffset = -1;
			int rootParentOffset = -1;
			int rootRootOffset = -1;
			int rootMemberTypeOffset = -1;
			int rootMemberTypeTemplateOffset = -1;
			int rootMembership1Offset = -1;
			int rootMembership2Offset = -1;
			int rootMembership3Offset = -1;
			int rootMembership4Offset = -1;
			int rootMembership5Offset = -1;
			int rootInstructor1Offset = -1;
			int rootInstructor2Offset = -1;
			int rootInstructor3Offset = -1;
			int rootRankOffset = -1;
			int rootUserAccountOffset = -1;
			int rootCustomerOffset = -1;
			int memberTypeOffset = -1;
			int memberTypeTemplateOffset = -1;
			int memberTypeTemplateMemberTypeOffset = -1;
			int memberTypeTemplateParentOffset = -1;
			SortedDictionary<int, DojoMemberTypeTemplate> memberTypeTemplateParentSortedDictionary = new SortedDictionary<int, DojoMemberTypeTemplate>();
			int memberTypeTemplateRootOffset = -1;
			int memberTypeTemplateInitialRankOffset = -1;
			int memberTypeTemplateInitialRoleOffset = -1;
			int memberTypeTemplateRankMinOffset = -1;
			int memberTypeTemplateRankMaxOffset = -1;
			int memberTypeTemplateMembershipTemplate1Offset = -1;
			int memberTypeTemplateMembershipTemplate2Offset = -1;
			int memberTypeTemplateMembershipTemplate3Offset = -1;
			int memberTypeTemplateMembershipTemplate4Offset = -1;
			int memberTypeTemplateMembershipTemplate5Offset = -1;
			int membership1Offset = -1;
			int membership1MemberOffset = -1;
			int membership1OrganizationOffset = -1;
			int membership1ParentOffset = -1;
			int membership1MemberTypeTemplateOffset = -1;
			int membership1MembershipTemplateOffset = -1;
			int membership1PriorMembershipOffset = -1;
			int membership1InvoiceLineOffset = -1;
			int membership2Offset = -1;
			int membership2MemberOffset = -1;
			int membership2OrganizationOffset = -1;
			int membership2ParentOffset = -1;
			int membership2MemberTypeTemplateOffset = -1;
			int membership2MembershipTemplateOffset = -1;
			int membership2PriorMembershipOffset = -1;
			int membership2InvoiceLineOffset = -1;
			int membership3Offset = -1;
			int membership3MemberOffset = -1;
			int membership3OrganizationOffset = -1;
			int membership3ParentOffset = -1;
			int membership3MemberTypeTemplateOffset = -1;
			int membership3MembershipTemplateOffset = -1;
			int membership3PriorMembershipOffset = -1;
			int membership3InvoiceLineOffset = -1;
			int membership4Offset = -1;
			int membership4MemberOffset = -1;
			int membership4OrganizationOffset = -1;
			int membership4ParentOffset = -1;
			int membership4MemberTypeTemplateOffset = -1;
			int membership4MembershipTemplateOffset = -1;
			int membership4PriorMembershipOffset = -1;
			int membership4InvoiceLineOffset = -1;
			int membership5Offset = -1;
			int membership5MemberOffset = -1;
			int membership5OrganizationOffset = -1;
			int membership5ParentOffset = -1;
			int membership5MemberTypeTemplateOffset = -1;
			int membership5MembershipTemplateOffset = -1;
			int membership5PriorMembershipOffset = -1;
			int membership5InvoiceLineOffset = -1;
			int instructor1Offset = -1;
			int instructor1PrivateContactOffset = -1;
			int instructor1EmergencyContactOffset = -1;
			int instructor1PublicContactOffset = -1;
			int instructor1ParentOffset = -1;
			int instructor1RootOffset = -1;
			int instructor1MemberTypeOffset = -1;
			int instructor1MemberTypeTemplateOffset = -1;
			int instructor1Membership1Offset = -1;
			int instructor1Membership2Offset = -1;
			int instructor1Membership3Offset = -1;
			int instructor1Membership4Offset = -1;
			int instructor1Membership5Offset = -1;
			int instructor1Instructor1Offset = -1;
			int instructor1Instructor2Offset = -1;
			int instructor1Instructor3Offset = -1;
			int instructor1RankOffset = -1;
			int instructor1UserAccountOffset = -1;
			int instructor1CustomerOffset = -1;
			int instructor2Offset = -1;
			int instructor2PrivateContactOffset = -1;
			int instructor2EmergencyContactOffset = -1;
			int instructor2PublicContactOffset = -1;
			int instructor2ParentOffset = -1;
			int instructor2RootOffset = -1;
			int instructor2MemberTypeOffset = -1;
			int instructor2MemberTypeTemplateOffset = -1;
			int instructor2Membership1Offset = -1;
			int instructor2Membership2Offset = -1;
			int instructor2Membership3Offset = -1;
			int instructor2Membership4Offset = -1;
			int instructor2Membership5Offset = -1;
			int instructor2Instructor1Offset = -1;
			int instructor2Instructor2Offset = -1;
			int instructor2Instructor3Offset = -1;
			int instructor2RankOffset = -1;
			int instructor2UserAccountOffset = -1;
			int instructor2CustomerOffset = -1;
			int instructor3Offset = -1;
			int instructor3PrivateContactOffset = -1;
			int instructor3EmergencyContactOffset = -1;
			int instructor3PublicContactOffset = -1;
			int instructor3ParentOffset = -1;
			int instructor3RootOffset = -1;
			int instructor3MemberTypeOffset = -1;
			int instructor3MemberTypeTemplateOffset = -1;
			int instructor3Membership1Offset = -1;
			int instructor3Membership2Offset = -1;
			int instructor3Membership3Offset = -1;
			int instructor3Membership4Offset = -1;
			int instructor3Membership5Offset = -1;
			int instructor3Instructor1Offset = -1;
			int instructor3Instructor2Offset = -1;
			int instructor3Instructor3Offset = -1;
			int instructor3RankOffset = -1;
			int instructor3UserAccountOffset = -1;
			int instructor3CustomerOffset = -1;
			int rankOffset = -1;
			int rankPromotionRankOffset = -1;
			int rankItemOffset = -1;
			int userAccountOffset = -1;
			int userAccountContactOffset = -1;
			int customerOffset = -1;
			int customerPrivateContactOffset = -1;
			int customerShippingContactOffset = -1;
			int customerBillingContactOffset = -1;
			int customerPrimaryAccountOffset = -1;
			int customerTaxOffset = -1;
			int customerUserAccountOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoMemberFlags.PrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							privateContactOffset = innerJoinOffset;
							innerJoinOffset = privateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.EmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							emergencyContactOffset = innerJoinOffset;
							innerJoinOffset = emergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.PublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							publicContactOffset = innerJoinOffset;
							innerJoinOffset = publicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Parent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentOffset = innerJoinOffset;
							innerJoinOffset = parentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = parentPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentEmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentEmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = parentEmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentPublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentPublicContactOffset = innerJoinOffset;
							innerJoinOffset = parentPublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentParent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentParentOffset = innerJoinOffset;
							innerJoinOffset = parentParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentRoot:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentRootOffset = innerJoinOffset;
							innerJoinOffset = parentRootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = parentMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = parentMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentMembership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMembership1Offset = innerJoinOffset;
							innerJoinOffset = parentMembership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentMembership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMembership2Offset = innerJoinOffset;
							innerJoinOffset = parentMembership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentMembership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMembership3Offset = innerJoinOffset;
							innerJoinOffset = parentMembership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentMembership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMembership4Offset = innerJoinOffset;
							innerJoinOffset = parentMembership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentMembership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentMembership5Offset = innerJoinOffset;
							innerJoinOffset = parentMembership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentInstructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentInstructor1Offset = innerJoinOffset;
							innerJoinOffset = parentInstructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentInstructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentInstructor2Offset = innerJoinOffset;
							innerJoinOffset = parentInstructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentInstructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentInstructor3Offset = innerJoinOffset;
							innerJoinOffset = parentInstructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentRankOffset = innerJoinOffset;
							innerJoinOffset = parentRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentUserAccountOffset = innerJoinOffset;
							innerJoinOffset = parentUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.ParentCustomer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Parent_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentCustomerOffset = innerJoinOffset;
							innerJoinOffset = parentCustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Root:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootOffset = innerJoinOffset;
							innerJoinOffset = rootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = rootPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootEmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootEmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = rootEmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootPublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootPublicContactOffset = innerJoinOffset;
							innerJoinOffset = rootPublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootParent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootParentOffset = innerJoinOffset;
							innerJoinOffset = rootParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootRoot:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootRootOffset = innerJoinOffset;
							innerJoinOffset = rootRootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = rootMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = rootMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootMembership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMembership1Offset = innerJoinOffset;
							innerJoinOffset = rootMembership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootMembership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMembership2Offset = innerJoinOffset;
							innerJoinOffset = rootMembership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootMembership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMembership3Offset = innerJoinOffset;
							innerJoinOffset = rootMembership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootMembership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMembership4Offset = innerJoinOffset;
							innerJoinOffset = rootMembership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootMembership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootMembership5Offset = innerJoinOffset;
							innerJoinOffset = rootMembership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootInstructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootInstructor1Offset = innerJoinOffset;
							innerJoinOffset = rootInstructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootInstructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootInstructor2Offset = innerJoinOffset;
							innerJoinOffset = rootInstructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootInstructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootInstructor3Offset = innerJoinOffset;
							innerJoinOffset = rootInstructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootRankOffset = innerJoinOffset;
							innerJoinOffset = rootRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootUserAccountOffset = innerJoinOffset;
							innerJoinOffset = rootUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RootCustomer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Root_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootCustomerOffset = innerJoinOffset;
							innerJoinOffset = rootCustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeOffset = innerJoinOffset;
							innerJoinOffset = memberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplateMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplateParent:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_Parent.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateParentOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateParentOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplateRoot:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_Root.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateRootOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateRootOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplateInitialRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_InitialRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateInitialRankOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateInitialRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplateInitialRole:
							for(int i = 0; i <= GreyFoxRoleManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_InitialRole.");
								query.Append(GreyFoxRoleManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateInitialRoleOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateInitialRoleOffset + GreyFoxRoleManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplateRankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateRankMinOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateRankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplateRankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateRankMaxOffset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateRankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplateMembershipTemplate1:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_MembershipTemplate1.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateMembershipTemplate1Offset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateMembershipTemplate1Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplateMembershipTemplate2:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_MembershipTemplate2.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateMembershipTemplate2Offset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateMembershipTemplate2Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplateMembershipTemplate3:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_MembershipTemplate3.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateMembershipTemplate3Offset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateMembershipTemplate3Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplateMembershipTemplate4:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_MembershipTemplate4.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateMembershipTemplate4Offset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateMembershipTemplate4Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.MemberTypeTemplateMembershipTemplate5:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("MemberTypeTemplate_MembershipTemplate5.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberTypeTemplateMembershipTemplate5Offset = innerJoinOffset;
							innerJoinOffset = memberTypeTemplateMembershipTemplate5Offset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership1Offset = innerJoinOffset;
							innerJoinOffset = membership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership1Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership1_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership1MemberOffset = innerJoinOffset;
							innerJoinOffset = membership1MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership1Organization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership1_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership1OrganizationOffset = innerJoinOffset;
							innerJoinOffset = membership1OrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership1Parent:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership1_Parent.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership1ParentOffset = innerJoinOffset;
							innerJoinOffset = membership1ParentOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership1MemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership1_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership1MemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = membership1MemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership1MembershipTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership1_MembershipTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership1MembershipTemplateOffset = innerJoinOffset;
							innerJoinOffset = membership1MembershipTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership1PriorMembership:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership1_PriorMembership.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership1PriorMembershipOffset = innerJoinOffset;
							innerJoinOffset = membership1PriorMembershipOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership1InvoiceLine:
							for(int i = 0; i <= RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership1_InvoiceLine.");
								query.Append(RHInvoiceLineManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership1InvoiceLineOffset = innerJoinOffset;
							innerJoinOffset = membership1InvoiceLineOffset + RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership2Offset = innerJoinOffset;
							innerJoinOffset = membership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership2Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership2_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership2MemberOffset = innerJoinOffset;
							innerJoinOffset = membership2MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership2Organization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership2_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership2OrganizationOffset = innerJoinOffset;
							innerJoinOffset = membership2OrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership2Parent:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership2_Parent.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership2ParentOffset = innerJoinOffset;
							innerJoinOffset = membership2ParentOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership2MemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership2_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership2MemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = membership2MemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership2MembershipTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership2_MembershipTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership2MembershipTemplateOffset = innerJoinOffset;
							innerJoinOffset = membership2MembershipTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership2PriorMembership:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership2_PriorMembership.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership2PriorMembershipOffset = innerJoinOffset;
							innerJoinOffset = membership2PriorMembershipOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership2InvoiceLine:
							for(int i = 0; i <= RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership2_InvoiceLine.");
								query.Append(RHInvoiceLineManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership2InvoiceLineOffset = innerJoinOffset;
							innerJoinOffset = membership2InvoiceLineOffset + RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership3Offset = innerJoinOffset;
							innerJoinOffset = membership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership3Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership3_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership3MemberOffset = innerJoinOffset;
							innerJoinOffset = membership3MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership3Organization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership3_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership3OrganizationOffset = innerJoinOffset;
							innerJoinOffset = membership3OrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership3Parent:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership3_Parent.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership3ParentOffset = innerJoinOffset;
							innerJoinOffset = membership3ParentOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership3MemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership3_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership3MemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = membership3MemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership3MembershipTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership3_MembershipTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership3MembershipTemplateOffset = innerJoinOffset;
							innerJoinOffset = membership3MembershipTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership3PriorMembership:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership3_PriorMembership.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership3PriorMembershipOffset = innerJoinOffset;
							innerJoinOffset = membership3PriorMembershipOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership3InvoiceLine:
							for(int i = 0; i <= RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership3_InvoiceLine.");
								query.Append(RHInvoiceLineManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership3InvoiceLineOffset = innerJoinOffset;
							innerJoinOffset = membership3InvoiceLineOffset + RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership4Offset = innerJoinOffset;
							innerJoinOffset = membership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership4Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership4_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership4MemberOffset = innerJoinOffset;
							innerJoinOffset = membership4MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership4Organization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership4_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership4OrganizationOffset = innerJoinOffset;
							innerJoinOffset = membership4OrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership4Parent:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership4_Parent.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership4ParentOffset = innerJoinOffset;
							innerJoinOffset = membership4ParentOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership4MemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership4_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership4MemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = membership4MemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership4MembershipTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership4_MembershipTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership4MembershipTemplateOffset = innerJoinOffset;
							innerJoinOffset = membership4MembershipTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership4PriorMembership:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership4_PriorMembership.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership4PriorMembershipOffset = innerJoinOffset;
							innerJoinOffset = membership4PriorMembershipOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership4InvoiceLine:
							for(int i = 0; i <= RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership4_InvoiceLine.");
								query.Append(RHInvoiceLineManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership4InvoiceLineOffset = innerJoinOffset;
							innerJoinOffset = membership4InvoiceLineOffset + RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership5Offset = innerJoinOffset;
							innerJoinOffset = membership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership5Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership5_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership5MemberOffset = innerJoinOffset;
							innerJoinOffset = membership5MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership5Organization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership5_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership5OrganizationOffset = innerJoinOffset;
							innerJoinOffset = membership5OrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership5Parent:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership5_Parent.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership5ParentOffset = innerJoinOffset;
							innerJoinOffset = membership5ParentOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership5MemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership5_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership5MemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = membership5MemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership5MembershipTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership5_MembershipTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership5MembershipTemplateOffset = innerJoinOffset;
							innerJoinOffset = membership5MembershipTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership5PriorMembership:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership5_PriorMembership.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership5PriorMembershipOffset = innerJoinOffset;
							innerJoinOffset = membership5PriorMembershipOffset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Membership5InvoiceLine:
							for(int i = 0; i <= RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Membership5_InvoiceLine.");
								query.Append(RHInvoiceLineManager.InnerJoinFields[i]);
								query.Append(",");
							}
							membership5InvoiceLineOffset = innerJoinOffset;
							innerJoinOffset = membership5InvoiceLineOffset + RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1Offset = innerJoinOffset;
							innerJoinOffset = instructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1PrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1PrivateContactOffset = innerJoinOffset;
							innerJoinOffset = instructor1PrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1EmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1EmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = instructor1EmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1PublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1PublicContactOffset = innerJoinOffset;
							innerJoinOffset = instructor1PublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1Parent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1ParentOffset = innerJoinOffset;
							innerJoinOffset = instructor1ParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1Root:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1RootOffset = innerJoinOffset;
							innerJoinOffset = instructor1RootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1MemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1MemberTypeOffset = innerJoinOffset;
							innerJoinOffset = instructor1MemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1MemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1MemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = instructor1MemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1Membership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1Membership1Offset = innerJoinOffset;
							innerJoinOffset = instructor1Membership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1Membership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1Membership2Offset = innerJoinOffset;
							innerJoinOffset = instructor1Membership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1Membership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1Membership3Offset = innerJoinOffset;
							innerJoinOffset = instructor1Membership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1Membership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1Membership4Offset = innerJoinOffset;
							innerJoinOffset = instructor1Membership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1Membership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1Membership5Offset = innerJoinOffset;
							innerJoinOffset = instructor1Membership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1Instructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1Instructor1Offset = innerJoinOffset;
							innerJoinOffset = instructor1Instructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1Instructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1Instructor2Offset = innerJoinOffset;
							innerJoinOffset = instructor1Instructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1Instructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1Instructor3Offset = innerJoinOffset;
							innerJoinOffset = instructor1Instructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1RankOffset = innerJoinOffset;
							innerJoinOffset = instructor1RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1UserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1UserAccountOffset = innerJoinOffset;
							innerJoinOffset = instructor1UserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor1Customer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor1_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor1CustomerOffset = innerJoinOffset;
							innerJoinOffset = instructor1CustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2Offset = innerJoinOffset;
							innerJoinOffset = instructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2PrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2PrivateContactOffset = innerJoinOffset;
							innerJoinOffset = instructor2PrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2EmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2EmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = instructor2EmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2PublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2PublicContactOffset = innerJoinOffset;
							innerJoinOffset = instructor2PublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2Parent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2ParentOffset = innerJoinOffset;
							innerJoinOffset = instructor2ParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2Root:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2RootOffset = innerJoinOffset;
							innerJoinOffset = instructor2RootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2MemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2MemberTypeOffset = innerJoinOffset;
							innerJoinOffset = instructor2MemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2MemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2MemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = instructor2MemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2Membership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2Membership1Offset = innerJoinOffset;
							innerJoinOffset = instructor2Membership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2Membership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2Membership2Offset = innerJoinOffset;
							innerJoinOffset = instructor2Membership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2Membership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2Membership3Offset = innerJoinOffset;
							innerJoinOffset = instructor2Membership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2Membership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2Membership4Offset = innerJoinOffset;
							innerJoinOffset = instructor2Membership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2Membership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2Membership5Offset = innerJoinOffset;
							innerJoinOffset = instructor2Membership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2Instructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2Instructor1Offset = innerJoinOffset;
							innerJoinOffset = instructor2Instructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2Instructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2Instructor2Offset = innerJoinOffset;
							innerJoinOffset = instructor2Instructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2Instructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2Instructor3Offset = innerJoinOffset;
							innerJoinOffset = instructor2Instructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2RankOffset = innerJoinOffset;
							innerJoinOffset = instructor2RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2UserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2UserAccountOffset = innerJoinOffset;
							innerJoinOffset = instructor2UserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor2Customer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor2_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor2CustomerOffset = innerJoinOffset;
							innerJoinOffset = instructor2CustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3Offset = innerJoinOffset;
							innerJoinOffset = instructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3PrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3PrivateContactOffset = innerJoinOffset;
							innerJoinOffset = instructor3PrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3EmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3EmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = instructor3EmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3PublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3PublicContactOffset = innerJoinOffset;
							innerJoinOffset = instructor3PublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3Parent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3ParentOffset = innerJoinOffset;
							innerJoinOffset = instructor3ParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3Root:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3RootOffset = innerJoinOffset;
							innerJoinOffset = instructor3RootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3MemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3MemberTypeOffset = innerJoinOffset;
							innerJoinOffset = instructor3MemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3MemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3MemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = instructor3MemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3Membership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3Membership1Offset = innerJoinOffset;
							innerJoinOffset = instructor3Membership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3Membership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3Membership2Offset = innerJoinOffset;
							innerJoinOffset = instructor3Membership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3Membership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3Membership3Offset = innerJoinOffset;
							innerJoinOffset = instructor3Membership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3Membership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3Membership4Offset = innerJoinOffset;
							innerJoinOffset = instructor3Membership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3Membership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3Membership5Offset = innerJoinOffset;
							innerJoinOffset = instructor3Membership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3Instructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3Instructor1Offset = innerJoinOffset;
							innerJoinOffset = instructor3Instructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3Instructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3Instructor2Offset = innerJoinOffset;
							innerJoinOffset = instructor3Instructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3Instructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3Instructor3Offset = innerJoinOffset;
							innerJoinOffset = instructor3Instructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3RankOffset = innerJoinOffset;
							innerJoinOffset = instructor3RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3UserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3UserAccountOffset = innerJoinOffset;
							innerJoinOffset = instructor3UserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Instructor3Customer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Instructor3_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							instructor3CustomerOffset = innerJoinOffset;
							innerJoinOffset = instructor3CustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankOffset = innerJoinOffset;
							innerJoinOffset = rankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RankPromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Rank_PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankPromotionRankOffset = innerJoinOffset;
							innerJoinOffset = rankPromotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.RankItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Rank_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankItemOffset = innerJoinOffset;
							innerJoinOffset = rankItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.UserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							userAccountOffset = innerJoinOffset;
							innerJoinOffset = userAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.UserAccountContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("UserAccount_Contact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							userAccountContactOffset = innerJoinOffset;
							innerJoinOffset = userAccountContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.Customer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerOffset = innerJoinOffset;
							innerJoinOffset = customerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.CustomerPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = customerPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.CustomerShippingContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer_ShippingContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerShippingContactOffset = innerJoinOffset;
							innerJoinOffset = customerShippingContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.CustomerBillingContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer_BillingContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerBillingContactOffset = innerJoinOffset;
							innerJoinOffset = customerBillingContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.CustomerPrimaryAccount:
							for(int i = 0; i <= RHCustomerAccountManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer_PrimaryAccount.");
								query.Append(RHCustomerAccountManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerPrimaryAccountOffset = innerJoinOffset;
							innerJoinOffset = customerPrimaryAccountOffset + RHCustomerAccountManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.CustomerTax:
							for(int i = 0; i <= RHTaxTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer_Tax.");
								query.Append(RHTaxTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerTaxOffset = innerJoinOffset;
							innerJoinOffset = customerTaxOffset + RHTaxTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMemberFlags.CustomerUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerUserAccountOffset = innerJoinOffset;
							innerJoinOffset = customerUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_Members AS DojoMember");
			}
			else
			{
				query.Append(" FROM kitTessen_Members AS DojoMember");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoMemberFlags.PrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS PrivateContact ON DojoMember.PrivateContactID = PrivateContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.EmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS EmergencyContact ON DojoMember.EmergencyContactID = EmergencyContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.PublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS PublicContact ON DojoMember.PublicContactID = PublicContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.Parent:
							query.Append(" LEFT JOIN kitTessen_Members AS Parent ON DojoMember.ParentID = Parent.DojoMemberID)");
							break;
						case DojoMemberFlags.ParentPrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Parent_PrivateContact ON Parent.PrivateContactID = Parent_PrivateContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.ParentEmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Parent_EmergencyContact ON Parent.EmergencyContactID = Parent_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.ParentPublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Parent_PublicContact ON Parent.PublicContactID = Parent_PublicContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.ParentParent:
							query.Append(" LEFT JOIN kitTessen_Members AS Parent_Parent ON Parent.ParentID = Parent_Parent.DojoMemberID)");
							break;
						case DojoMemberFlags.ParentRoot:
							query.Append(" LEFT JOIN kitTessen_Members AS Parent_Root ON Parent.RootID = Parent_Root.DojoMemberID)");
							break;
						case DojoMemberFlags.ParentMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Parent_MemberType ON Parent.MemberTypeID = Parent_MemberType.DojoMemberTypeID)");
							break;
						case DojoMemberFlags.ParentMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Parent_MemberTypeTemplate ON Parent.MemberTypeTemplateID = Parent_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.ParentMembership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Parent_Membership1 ON Parent.Membership1ID = Parent_Membership1.DojoMembershipID)");
							break;
						case DojoMemberFlags.ParentMembership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Parent_Membership2 ON Parent.Membership2ID = Parent_Membership2.DojoMembershipID)");
							break;
						case DojoMemberFlags.ParentMembership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Parent_Membership3 ON Parent.Membership3ID = Parent_Membership3.DojoMembershipID)");
							break;
						case DojoMemberFlags.ParentMembership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Parent_Membership4 ON Parent.Membership4ID = Parent_Membership4.DojoMembershipID)");
							break;
						case DojoMemberFlags.ParentMembership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Parent_Membership5 ON Parent.Membership5ID = Parent_Membership5.DojoMembershipID)");
							break;
						case DojoMemberFlags.ParentInstructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Parent_Instructor1 ON Parent.Instructor1ID = Parent_Instructor1.DojoMemberID)");
							break;
						case DojoMemberFlags.ParentInstructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Parent_Instructor2 ON Parent.Instructor2ID = Parent_Instructor2.DojoMemberID)");
							break;
						case DojoMemberFlags.ParentInstructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Parent_Instructor3 ON Parent.Instructor3ID = Parent_Instructor3.DojoMemberID)");
							break;
						case DojoMemberFlags.ParentRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Parent_Rank ON Parent.RankID = Parent_Rank.DojoRankID)");
							break;
						case DojoMemberFlags.ParentUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Parent_UserAccount ON Parent.UserAccountID = Parent_UserAccount.GreyFoxUserID)");
							break;
						case DojoMemberFlags.ParentCustomer:
							query.Append(" LEFT JOIN RH_Customers AS Parent_Customer ON Parent.CustomerID = Parent_Customer.RHCustomerID)");
							break;
						case DojoMemberFlags.Root:
							query.Append(" LEFT JOIN kitTessen_Members AS Root ON DojoMember.RootID = Root.DojoMemberID)");
							break;
						case DojoMemberFlags.RootPrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Root_PrivateContact ON Root.PrivateContactID = Root_PrivateContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.RootEmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Root_EmergencyContact ON Root.EmergencyContactID = Root_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.RootPublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Root_PublicContact ON Root.PublicContactID = Root_PublicContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.RootParent:
							query.Append(" LEFT JOIN kitTessen_Members AS Root_Parent ON Root.ParentID = Root_Parent.DojoMemberID)");
							break;
						case DojoMemberFlags.RootRoot:
							query.Append(" LEFT JOIN kitTessen_Members AS Root_Root ON Root.RootID = Root_Root.DojoMemberID)");
							break;
						case DojoMemberFlags.RootMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Root_MemberType ON Root.MemberTypeID = Root_MemberType.DojoMemberTypeID)");
							break;
						case DojoMemberFlags.RootMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Root_MemberTypeTemplate ON Root.MemberTypeTemplateID = Root_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.RootMembership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Root_Membership1 ON Root.Membership1ID = Root_Membership1.DojoMembershipID)");
							break;
						case DojoMemberFlags.RootMembership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Root_Membership2 ON Root.Membership2ID = Root_Membership2.DojoMembershipID)");
							break;
						case DojoMemberFlags.RootMembership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Root_Membership3 ON Root.Membership3ID = Root_Membership3.DojoMembershipID)");
							break;
						case DojoMemberFlags.RootMembership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Root_Membership4 ON Root.Membership4ID = Root_Membership4.DojoMembershipID)");
							break;
						case DojoMemberFlags.RootMembership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Root_Membership5 ON Root.Membership5ID = Root_Membership5.DojoMembershipID)");
							break;
						case DojoMemberFlags.RootInstructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Root_Instructor1 ON Root.Instructor1ID = Root_Instructor1.DojoMemberID)");
							break;
						case DojoMemberFlags.RootInstructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Root_Instructor2 ON Root.Instructor2ID = Root_Instructor2.DojoMemberID)");
							break;
						case DojoMemberFlags.RootInstructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Root_Instructor3 ON Root.Instructor3ID = Root_Instructor3.DojoMemberID)");
							break;
						case DojoMemberFlags.RootRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Root_Rank ON Root.RankID = Root_Rank.DojoRankID)");
							break;
						case DojoMemberFlags.RootUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Root_UserAccount ON Root.UserAccountID = Root_UserAccount.GreyFoxUserID)");
							break;
						case DojoMemberFlags.RootCustomer:
							query.Append(" LEFT JOIN RH_Customers AS Root_Customer ON Root.CustomerID = Root_Customer.RHCustomerID)");
							break;
						case DojoMemberFlags.MemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS MemberType ON DojoMember.MemberTypeID = MemberType.DojoMemberTypeID)");
							break;
						case DojoMemberFlags.MemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS MemberTypeTemplate ON DojoMember.MemberTypeTemplateID = MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.MemberTypeTemplateMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS MemberTypeTemplate_MemberType ON MemberTypeTemplate.MemberTypeID = MemberTypeTemplate_MemberType.DojoMemberTypeID)");
							break;
						case DojoMemberFlags.MemberTypeTemplateParent:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS MemberTypeTemplate_Parent ON MemberTypeTemplate.ParentID = MemberTypeTemplate_Parent.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.MemberTypeTemplateRoot:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS MemberTypeTemplate_Root ON MemberTypeTemplate.RootID = MemberTypeTemplate_Root.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.MemberTypeTemplateInitialRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MemberTypeTemplate_InitialRank ON MemberTypeTemplate.InitialRankID = MemberTypeTemplate_InitialRank.DojoRankID)");
							break;
						case DojoMemberFlags.MemberTypeTemplateInitialRole:
							query.Append(" LEFT JOIN sysGlobal_Roles AS MemberTypeTemplate_InitialRole ON MemberTypeTemplate.InitialRoleID = MemberTypeTemplate_InitialRole.GreyFoxRoleID)");
							break;
						case DojoMemberFlags.MemberTypeTemplateRankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MemberTypeTemplate_RankMin ON MemberTypeTemplate.RankMinID = MemberTypeTemplate_RankMin.DojoRankID)");
							break;
						case DojoMemberFlags.MemberTypeTemplateRankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS MemberTypeTemplate_RankMax ON MemberTypeTemplate.RankMaxID = MemberTypeTemplate_RankMax.DojoRankID)");
							break;
						case DojoMemberFlags.MemberTypeTemplateMembershipTemplate1:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MemberTypeTemplate_MembershipTemplate1 ON MemberTypeTemplate.MembershipTemplate1ID = MemberTypeTemplate_MembershipTemplate1.DojoMembershipTemplateID)");
							break;
						case DojoMemberFlags.MemberTypeTemplateMembershipTemplate2:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MemberTypeTemplate_MembershipTemplate2 ON MemberTypeTemplate.MembershipTemplate2ID = MemberTypeTemplate_MembershipTemplate2.DojoMembershipTemplateID)");
							break;
						case DojoMemberFlags.MemberTypeTemplateMembershipTemplate3:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MemberTypeTemplate_MembershipTemplate3 ON MemberTypeTemplate.MembershipTemplate3ID = MemberTypeTemplate_MembershipTemplate3.DojoMembershipTemplateID)");
							break;
						case DojoMemberFlags.MemberTypeTemplateMembershipTemplate4:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MemberTypeTemplate_MembershipTemplate4 ON MemberTypeTemplate.MembershipTemplate4ID = MemberTypeTemplate_MembershipTemplate4.DojoMembershipTemplateID)");
							break;
						case DojoMemberFlags.MemberTypeTemplateMembershipTemplate5:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS MemberTypeTemplate_MembershipTemplate5 ON MemberTypeTemplate.MembershipTemplate5ID = MemberTypeTemplate_MembershipTemplate5.DojoMembershipTemplateID)");
							break;
						case DojoMemberFlags.Membership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership1 ON DojoMember.Membership1ID = Membership1.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership1Member:
							query.Append(" LEFT JOIN kitTessen_Members AS Membership1_Member ON Membership1.MemberID = Membership1_Member.DojoMemberID)");
							break;
						case DojoMemberFlags.Membership1Organization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS Membership1_Organization ON Membership1.OrganizationID = Membership1_Organization.DojoOrganizationID)");
							break;
						case DojoMemberFlags.Membership1Parent:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership1_Parent ON Membership1.ParentID = Membership1_Parent.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership1MemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Membership1_MemberTypeTemplate ON Membership1.MemberTypeTemplateID = Membership1_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.Membership1MembershipTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Membership1_MembershipTemplate ON Membership1.MembershipTemplateID = Membership1_MembershipTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMemberFlags.Membership1PriorMembership:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership1_PriorMembership ON Membership1.PriorMembershipID = Membership1_PriorMembership.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership1InvoiceLine:
							query.Append(" LEFT JOIN RH_InvoiceLines AS Membership1_InvoiceLine ON Membership1.InvoiceLineID = Membership1_InvoiceLine.RHInvoiceLineID)");
							break;
						case DojoMemberFlags.Membership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership2 ON DojoMember.Membership2ID = Membership2.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership2Member:
							query.Append(" LEFT JOIN kitTessen_Members AS Membership2_Member ON Membership2.MemberID = Membership2_Member.DojoMemberID)");
							break;
						case DojoMemberFlags.Membership2Organization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS Membership2_Organization ON Membership2.OrganizationID = Membership2_Organization.DojoOrganizationID)");
							break;
						case DojoMemberFlags.Membership2Parent:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership2_Parent ON Membership2.ParentID = Membership2_Parent.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership2MemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Membership2_MemberTypeTemplate ON Membership2.MemberTypeTemplateID = Membership2_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.Membership2MembershipTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Membership2_MembershipTemplate ON Membership2.MembershipTemplateID = Membership2_MembershipTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMemberFlags.Membership2PriorMembership:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership2_PriorMembership ON Membership2.PriorMembershipID = Membership2_PriorMembership.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership2InvoiceLine:
							query.Append(" LEFT JOIN RH_InvoiceLines AS Membership2_InvoiceLine ON Membership2.InvoiceLineID = Membership2_InvoiceLine.RHInvoiceLineID)");
							break;
						case DojoMemberFlags.Membership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership3 ON DojoMember.Membership3ID = Membership3.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership3Member:
							query.Append(" LEFT JOIN kitTessen_Members AS Membership3_Member ON Membership3.MemberID = Membership3_Member.DojoMemberID)");
							break;
						case DojoMemberFlags.Membership3Organization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS Membership3_Organization ON Membership3.OrganizationID = Membership3_Organization.DojoOrganizationID)");
							break;
						case DojoMemberFlags.Membership3Parent:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership3_Parent ON Membership3.ParentID = Membership3_Parent.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership3MemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Membership3_MemberTypeTemplate ON Membership3.MemberTypeTemplateID = Membership3_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.Membership3MembershipTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Membership3_MembershipTemplate ON Membership3.MembershipTemplateID = Membership3_MembershipTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMemberFlags.Membership3PriorMembership:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership3_PriorMembership ON Membership3.PriorMembershipID = Membership3_PriorMembership.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership3InvoiceLine:
							query.Append(" LEFT JOIN RH_InvoiceLines AS Membership3_InvoiceLine ON Membership3.InvoiceLineID = Membership3_InvoiceLine.RHInvoiceLineID)");
							break;
						case DojoMemberFlags.Membership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership4 ON DojoMember.Membership4ID = Membership4.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership4Member:
							query.Append(" LEFT JOIN kitTessen_Members AS Membership4_Member ON Membership4.MemberID = Membership4_Member.DojoMemberID)");
							break;
						case DojoMemberFlags.Membership4Organization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS Membership4_Organization ON Membership4.OrganizationID = Membership4_Organization.DojoOrganizationID)");
							break;
						case DojoMemberFlags.Membership4Parent:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership4_Parent ON Membership4.ParentID = Membership4_Parent.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership4MemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Membership4_MemberTypeTemplate ON Membership4.MemberTypeTemplateID = Membership4_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.Membership4MembershipTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Membership4_MembershipTemplate ON Membership4.MembershipTemplateID = Membership4_MembershipTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMemberFlags.Membership4PriorMembership:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership4_PriorMembership ON Membership4.PriorMembershipID = Membership4_PriorMembership.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership4InvoiceLine:
							query.Append(" LEFT JOIN RH_InvoiceLines AS Membership4_InvoiceLine ON Membership4.InvoiceLineID = Membership4_InvoiceLine.RHInvoiceLineID)");
							break;
						case DojoMemberFlags.Membership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership5 ON DojoMember.Membership5ID = Membership5.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership5Member:
							query.Append(" LEFT JOIN kitTessen_Members AS Membership5_Member ON Membership5.MemberID = Membership5_Member.DojoMemberID)");
							break;
						case DojoMemberFlags.Membership5Organization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS Membership5_Organization ON Membership5.OrganizationID = Membership5_Organization.DojoOrganizationID)");
							break;
						case DojoMemberFlags.Membership5Parent:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership5_Parent ON Membership5.ParentID = Membership5_Parent.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership5MemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Membership5_MemberTypeTemplate ON Membership5.MemberTypeTemplateID = Membership5_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.Membership5MembershipTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS Membership5_MembershipTemplate ON Membership5.MembershipTemplateID = Membership5_MembershipTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMemberFlags.Membership5PriorMembership:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Membership5_PriorMembership ON Membership5.PriorMembershipID = Membership5_PriorMembership.DojoMembershipID)");
							break;
						case DojoMemberFlags.Membership5InvoiceLine:
							query.Append(" LEFT JOIN RH_InvoiceLines AS Membership5_InvoiceLine ON Membership5.InvoiceLineID = Membership5_InvoiceLine.RHInvoiceLineID)");
							break;
						case DojoMemberFlags.Instructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor1 ON DojoMember.Instructor1ID = Instructor1.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor1PrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Instructor1_PrivateContact ON Instructor1.PrivateContactID = Instructor1_PrivateContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.Instructor1EmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Instructor1_EmergencyContact ON Instructor1.EmergencyContactID = Instructor1_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.Instructor1PublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Instructor1_PublicContact ON Instructor1.PublicContactID = Instructor1_PublicContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.Instructor1Parent:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor1_Parent ON Instructor1.ParentID = Instructor1_Parent.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor1Root:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor1_Root ON Instructor1.RootID = Instructor1_Root.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor1MemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Instructor1_MemberType ON Instructor1.MemberTypeID = Instructor1_MemberType.DojoMemberTypeID)");
							break;
						case DojoMemberFlags.Instructor1MemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Instructor1_MemberTypeTemplate ON Instructor1.MemberTypeTemplateID = Instructor1_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.Instructor1Membership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor1_Membership1 ON Instructor1.Membership1ID = Instructor1_Membership1.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor1Membership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor1_Membership2 ON Instructor1.Membership2ID = Instructor1_Membership2.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor1Membership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor1_Membership3 ON Instructor1.Membership3ID = Instructor1_Membership3.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor1Membership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor1_Membership4 ON Instructor1.Membership4ID = Instructor1_Membership4.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor1Membership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor1_Membership5 ON Instructor1.Membership5ID = Instructor1_Membership5.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor1Instructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor1_Instructor1 ON Instructor1.Instructor1ID = Instructor1_Instructor1.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor1Instructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor1_Instructor2 ON Instructor1.Instructor2ID = Instructor1_Instructor2.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor1Instructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor1_Instructor3 ON Instructor1.Instructor3ID = Instructor1_Instructor3.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor1Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Instructor1_Rank ON Instructor1.RankID = Instructor1_Rank.DojoRankID)");
							break;
						case DojoMemberFlags.Instructor1UserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Instructor1_UserAccount ON Instructor1.UserAccountID = Instructor1_UserAccount.GreyFoxUserID)");
							break;
						case DojoMemberFlags.Instructor1Customer:
							query.Append(" LEFT JOIN RH_Customers AS Instructor1_Customer ON Instructor1.CustomerID = Instructor1_Customer.RHCustomerID)");
							break;
						case DojoMemberFlags.Instructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor2 ON DojoMember.Instructor2ID = Instructor2.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor2PrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Instructor2_PrivateContact ON Instructor2.PrivateContactID = Instructor2_PrivateContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.Instructor2EmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Instructor2_EmergencyContact ON Instructor2.EmergencyContactID = Instructor2_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.Instructor2PublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Instructor2_PublicContact ON Instructor2.PublicContactID = Instructor2_PublicContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.Instructor2Parent:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor2_Parent ON Instructor2.ParentID = Instructor2_Parent.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor2Root:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor2_Root ON Instructor2.RootID = Instructor2_Root.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor2MemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Instructor2_MemberType ON Instructor2.MemberTypeID = Instructor2_MemberType.DojoMemberTypeID)");
							break;
						case DojoMemberFlags.Instructor2MemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Instructor2_MemberTypeTemplate ON Instructor2.MemberTypeTemplateID = Instructor2_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.Instructor2Membership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor2_Membership1 ON Instructor2.Membership1ID = Instructor2_Membership1.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor2Membership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor2_Membership2 ON Instructor2.Membership2ID = Instructor2_Membership2.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor2Membership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor2_Membership3 ON Instructor2.Membership3ID = Instructor2_Membership3.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor2Membership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor2_Membership4 ON Instructor2.Membership4ID = Instructor2_Membership4.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor2Membership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor2_Membership5 ON Instructor2.Membership5ID = Instructor2_Membership5.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor2Instructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor2_Instructor1 ON Instructor2.Instructor1ID = Instructor2_Instructor1.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor2Instructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor2_Instructor2 ON Instructor2.Instructor2ID = Instructor2_Instructor2.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor2Instructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor2_Instructor3 ON Instructor2.Instructor3ID = Instructor2_Instructor3.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor2Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Instructor2_Rank ON Instructor2.RankID = Instructor2_Rank.DojoRankID)");
							break;
						case DojoMemberFlags.Instructor2UserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Instructor2_UserAccount ON Instructor2.UserAccountID = Instructor2_UserAccount.GreyFoxUserID)");
							break;
						case DojoMemberFlags.Instructor2Customer:
							query.Append(" LEFT JOIN RH_Customers AS Instructor2_Customer ON Instructor2.CustomerID = Instructor2_Customer.RHCustomerID)");
							break;
						case DojoMemberFlags.Instructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor3 ON DojoMember.Instructor3ID = Instructor3.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor3PrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Instructor3_PrivateContact ON Instructor3.PrivateContactID = Instructor3_PrivateContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.Instructor3EmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Instructor3_EmergencyContact ON Instructor3.EmergencyContactID = Instructor3_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.Instructor3PublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Instructor3_PublicContact ON Instructor3.PublicContactID = Instructor3_PublicContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.Instructor3Parent:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor3_Parent ON Instructor3.ParentID = Instructor3_Parent.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor3Root:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor3_Root ON Instructor3.RootID = Instructor3_Root.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor3MemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Instructor3_MemberType ON Instructor3.MemberTypeID = Instructor3_MemberType.DojoMemberTypeID)");
							break;
						case DojoMemberFlags.Instructor3MemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Instructor3_MemberTypeTemplate ON Instructor3.MemberTypeTemplateID = Instructor3_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoMemberFlags.Instructor3Membership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor3_Membership1 ON Instructor3.Membership1ID = Instructor3_Membership1.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor3Membership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor3_Membership2 ON Instructor3.Membership2ID = Instructor3_Membership2.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor3Membership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor3_Membership3 ON Instructor3.Membership3ID = Instructor3_Membership3.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor3Membership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor3_Membership4 ON Instructor3.Membership4ID = Instructor3_Membership4.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor3Membership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Instructor3_Membership5 ON Instructor3.Membership5ID = Instructor3_Membership5.DojoMembershipID)");
							break;
						case DojoMemberFlags.Instructor3Instructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor3_Instructor1 ON Instructor3.Instructor1ID = Instructor3_Instructor1.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor3Instructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor3_Instructor2 ON Instructor3.Instructor2ID = Instructor3_Instructor2.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor3Instructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Instructor3_Instructor3 ON Instructor3.Instructor3ID = Instructor3_Instructor3.DojoMemberID)");
							break;
						case DojoMemberFlags.Instructor3Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Instructor3_Rank ON Instructor3.RankID = Instructor3_Rank.DojoRankID)");
							break;
						case DojoMemberFlags.Instructor3UserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Instructor3_UserAccount ON Instructor3.UserAccountID = Instructor3_UserAccount.GreyFoxUserID)");
							break;
						case DojoMemberFlags.Instructor3Customer:
							query.Append(" LEFT JOIN RH_Customers AS Instructor3_Customer ON Instructor3.CustomerID = Instructor3_Customer.RHCustomerID)");
							break;
						case DojoMemberFlags.Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Rank ON DojoMember.RankID = Rank.DojoRankID)");
							break;
						case DojoMemberFlags.RankPromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Rank_PromotionRank ON Rank.PromotionRankID = Rank_PromotionRank.DojoRankID)");
							break;
						case DojoMemberFlags.RankItem:
							query.Append(" LEFT JOIN RH_Items AS Rank_Item ON Rank.ItemID = Rank_Item.RHItemID)");
							break;
						case DojoMemberFlags.UserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS UserAccount ON DojoMember.UserAccountID = UserAccount.GreyFoxUserID)");
							break;
						case DojoMemberFlags.UserAccountContact:
							query.Append(" LEFT JOIN sysGlobal_Contacts AS UserAccount_Contact ON UserAccount.ContactID = UserAccount_Contact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.Customer:
							query.Append(" LEFT JOIN RH_Customers AS Customer ON DojoMember.CustomerID = Customer.RHCustomerID)");
							break;
						case DojoMemberFlags.CustomerPrivateContact:
							query.Append(" LEFT JOIN RH_Customers_PriContacts AS Customer_PrivateContact ON Customer.PrivateContactID = Customer_PrivateContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.CustomerShippingContact:
							query.Append(" LEFT JOIN RH_Customers_ShipContacts AS Customer_ShippingContact ON Customer.ShippingContactID = Customer_ShippingContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.CustomerBillingContact:
							query.Append(" LEFT JOIN RH_Customers_BillContacts AS Customer_BillingContact ON Customer.BillingContactID = Customer_BillingContact.GreyFoxContactID)");
							break;
						case DojoMemberFlags.CustomerPrimaryAccount:
							query.Append(" LEFT JOIN RH_CustomerAccounts AS Customer_PrimaryAccount ON Customer.PrimaryAccountID = Customer_PrimaryAccount.RHCustomerAccountID)");
							break;
						case DojoMemberFlags.CustomerTax:
							query.Append(" LEFT JOIN RH_TaxTypes AS Customer_Tax ON Customer.TaxID = Customer_Tax.RHTaxTypeID)");
							break;
						case DojoMemberFlags.CustomerUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Customer_UserAccount ON Customer.UserAccountID = Customer_UserAccount.GreyFoxUserID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoMemberCollection = new DojoMemberCollection();

			while(r.Read())
			{
				DojoMember dojoMember = ParseFromReader(r, 0, 1);

				// Fill PrivateContact
				if(privateContactOffset != -1 && !r.IsDBNull(privateContactOffset))
					GreyFoxContactManager.FillFromReader(dojoMember.privateContact, "kitTessen_Members_PrivateContacts", r, privateContactOffset, privateContactOffset+1);

				// Fill EmergencyContact
				if(emergencyContactOffset != -1 && !r.IsDBNull(emergencyContactOffset))
					GreyFoxContactManager.FillFromReader(dojoMember.emergencyContact, "kitTessen_Members_EmergencyContacts", r, emergencyContactOffset, emergencyContactOffset+1);

				// Fill PublicContact
				if(publicContactOffset != -1 && !r.IsDBNull(publicContactOffset))
					GreyFoxContactManager.FillFromReader(dojoMember.publicContact, "kitTessen_Members_PublicContacts", r, publicContactOffset, publicContactOffset+1);

				// Fill Parent
				if(parentOffset != -1 && !r.IsDBNull(parentOffset))
				{
					DojoMemberManager.FillFromReader(dojoMember.parent, r, parentOffset, parentOffset+1);

					// Fill 
					if(parentPrivateContactOffset != -1 && !r.IsDBNull(parentPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.parent.PrivateContact, "kitTessen_Members_PrivateContacts", r, parentPrivateContactOffset, parentPrivateContactOffset+1);

					// Fill 
					if(parentEmergencyContactOffset != -1 && !r.IsDBNull(parentEmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.parent.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, parentEmergencyContactOffset, parentEmergencyContactOffset+1);

					// Fill 
					if(parentPublicContactOffset != -1 && !r.IsDBNull(parentPublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.parent.PublicContact, "kitTessen_Members_PublicContacts", r, parentPublicContactOffset, parentPublicContactOffset+1);

					// Fill 
					if(parentParentOffset != -1 && !r.IsDBNull(parentParentOffset))
						DojoMemberManager.FillFromReader(dojoMember.parent.Parent, r, parentParentOffset, parentParentOffset+1);

					// Fill 
					if(parentRootOffset != -1 && !r.IsDBNull(parentRootOffset))
						DojoMemberManager.FillFromReader(dojoMember.parent.Root, r, parentRootOffset, parentRootOffset+1);

					// Fill 
					if(parentMemberTypeOffset != -1 && !r.IsDBNull(parentMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoMember.parent.MemberType, r, parentMemberTypeOffset, parentMemberTypeOffset+1);

					// Fill 
					if(parentMemberTypeTemplateOffset != -1 && !r.IsDBNull(parentMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMember.parent.MemberTypeTemplate, r, parentMemberTypeTemplateOffset, parentMemberTypeTemplateOffset+1);

					// Fill 
					if(parentMembership1Offset != -1 && !r.IsDBNull(parentMembership1Offset))
						DojoMembershipManager.FillFromReader(dojoMember.parent.Membership1, r, parentMembership1Offset, parentMembership1Offset+1);

					// Fill 
					if(parentMembership2Offset != -1 && !r.IsDBNull(parentMembership2Offset))
						DojoMembershipManager.FillFromReader(dojoMember.parent.Membership2, r, parentMembership2Offset, parentMembership2Offset+1);

					// Fill 
					if(parentMembership3Offset != -1 && !r.IsDBNull(parentMembership3Offset))
						DojoMembershipManager.FillFromReader(dojoMember.parent.Membership3, r, parentMembership3Offset, parentMembership3Offset+1);

					// Fill 
					if(parentMembership4Offset != -1 && !r.IsDBNull(parentMembership4Offset))
						DojoMembershipManager.FillFromReader(dojoMember.parent.Membership4, r, parentMembership4Offset, parentMembership4Offset+1);

					// Fill 
					if(parentMembership5Offset != -1 && !r.IsDBNull(parentMembership5Offset))
						DojoMembershipManager.FillFromReader(dojoMember.parent.Membership5, r, parentMembership5Offset, parentMembership5Offset+1);

					// Fill 
					if(parentInstructor1Offset != -1 && !r.IsDBNull(parentInstructor1Offset))
						DojoMemberManager.FillFromReader(dojoMember.parent.Instructor1, r, parentInstructor1Offset, parentInstructor1Offset+1);

					// Fill 
					if(parentInstructor2Offset != -1 && !r.IsDBNull(parentInstructor2Offset))
						DojoMemberManager.FillFromReader(dojoMember.parent.Instructor2, r, parentInstructor2Offset, parentInstructor2Offset+1);

					// Fill 
					if(parentInstructor3Offset != -1 && !r.IsDBNull(parentInstructor3Offset))
						DojoMemberManager.FillFromReader(dojoMember.parent.Instructor3, r, parentInstructor3Offset, parentInstructor3Offset+1);

					// Fill 
					if(parentRankOffset != -1 && !r.IsDBNull(parentRankOffset))
						DojoRankManager.FillFromReader(dojoMember.parent.Rank, r, parentRankOffset, parentRankOffset+1);

					// Fill 
					if(parentUserAccountOffset != -1 && !r.IsDBNull(parentUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoMember.parent.UserAccount, r, parentUserAccountOffset, parentUserAccountOffset+1);

					// Fill 
					if(parentCustomerOffset != -1 && !r.IsDBNull(parentCustomerOffset))
						RHCustomerManager.FillFromReader(dojoMember.parent.Customer, r, parentCustomerOffset, parentCustomerOffset+1);

				}

				// Fill Root
				if(rootOffset != -1 && !r.IsDBNull(rootOffset))
				{
					DojoMemberManager.FillFromReader(dojoMember.root, r, rootOffset, rootOffset+1);

					// Fill 
					if(rootPrivateContactOffset != -1 && !r.IsDBNull(rootPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.root.PrivateContact, "kitTessen_Members_PrivateContacts", r, rootPrivateContactOffset, rootPrivateContactOffset+1);

					// Fill 
					if(rootEmergencyContactOffset != -1 && !r.IsDBNull(rootEmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.root.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, rootEmergencyContactOffset, rootEmergencyContactOffset+1);

					// Fill 
					if(rootPublicContactOffset != -1 && !r.IsDBNull(rootPublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.root.PublicContact, "kitTessen_Members_PublicContacts", r, rootPublicContactOffset, rootPublicContactOffset+1);

					// Fill 
					if(rootParentOffset != -1 && !r.IsDBNull(rootParentOffset))
						DojoMemberManager.FillFromReader(dojoMember.root.Parent, r, rootParentOffset, rootParentOffset+1);

					// Fill 
					if(rootRootOffset != -1 && !r.IsDBNull(rootRootOffset))
						DojoMemberManager.FillFromReader(dojoMember.root.Root, r, rootRootOffset, rootRootOffset+1);

					// Fill 
					if(rootMemberTypeOffset != -1 && !r.IsDBNull(rootMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoMember.root.MemberType, r, rootMemberTypeOffset, rootMemberTypeOffset+1);

					// Fill 
					if(rootMemberTypeTemplateOffset != -1 && !r.IsDBNull(rootMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMember.root.MemberTypeTemplate, r, rootMemberTypeTemplateOffset, rootMemberTypeTemplateOffset+1);

					// Fill 
					if(rootMembership1Offset != -1 && !r.IsDBNull(rootMembership1Offset))
						DojoMembershipManager.FillFromReader(dojoMember.root.Membership1, r, rootMembership1Offset, rootMembership1Offset+1);

					// Fill 
					if(rootMembership2Offset != -1 && !r.IsDBNull(rootMembership2Offset))
						DojoMembershipManager.FillFromReader(dojoMember.root.Membership2, r, rootMembership2Offset, rootMembership2Offset+1);

					// Fill 
					if(rootMembership3Offset != -1 && !r.IsDBNull(rootMembership3Offset))
						DojoMembershipManager.FillFromReader(dojoMember.root.Membership3, r, rootMembership3Offset, rootMembership3Offset+1);

					// Fill 
					if(rootMembership4Offset != -1 && !r.IsDBNull(rootMembership4Offset))
						DojoMembershipManager.FillFromReader(dojoMember.root.Membership4, r, rootMembership4Offset, rootMembership4Offset+1);

					// Fill 
					if(rootMembership5Offset != -1 && !r.IsDBNull(rootMembership5Offset))
						DojoMembershipManager.FillFromReader(dojoMember.root.Membership5, r, rootMembership5Offset, rootMembership5Offset+1);

					// Fill 
					if(rootInstructor1Offset != -1 && !r.IsDBNull(rootInstructor1Offset))
						DojoMemberManager.FillFromReader(dojoMember.root.Instructor1, r, rootInstructor1Offset, rootInstructor1Offset+1);

					// Fill 
					if(rootInstructor2Offset != -1 && !r.IsDBNull(rootInstructor2Offset))
						DojoMemberManager.FillFromReader(dojoMember.root.Instructor2, r, rootInstructor2Offset, rootInstructor2Offset+1);

					// Fill 
					if(rootInstructor3Offset != -1 && !r.IsDBNull(rootInstructor3Offset))
						DojoMemberManager.FillFromReader(dojoMember.root.Instructor3, r, rootInstructor3Offset, rootInstructor3Offset+1);

					// Fill 
					if(rootRankOffset != -1 && !r.IsDBNull(rootRankOffset))
						DojoRankManager.FillFromReader(dojoMember.root.Rank, r, rootRankOffset, rootRankOffset+1);

					// Fill 
					if(rootUserAccountOffset != -1 && !r.IsDBNull(rootUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoMember.root.UserAccount, r, rootUserAccountOffset, rootUserAccountOffset+1);

					// Fill 
					if(rootCustomerOffset != -1 && !r.IsDBNull(rootCustomerOffset))
						RHCustomerManager.FillFromReader(dojoMember.root.Customer, r, rootCustomerOffset, rootCustomerOffset+1);

				}

				// Fill MemberType
				if(memberTypeOffset != -1 && !r.IsDBNull(memberTypeOffset))
					DojoMemberTypeManager.FillFromReader(dojoMember.memberType, r, memberTypeOffset, memberTypeOffset+1);

				// Fill MemberTypeTemplate
				if(memberTypeTemplateOffset != -1 && !r.IsDBNull(memberTypeTemplateOffset))
				{
					DojoMemberTypeTemplateManager.FillFromReader(dojoMember.memberTypeTemplate, r, memberTypeTemplateOffset, memberTypeTemplateOffset+1);

					// Fill Member Type
					if(memberTypeTemplateMemberTypeOffset != -1 && !r.IsDBNull(memberTypeTemplateMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoMember.memberTypeTemplate.MemberType, r, memberTypeTemplateMemberTypeOffset, memberTypeTemplateMemberTypeOffset+1);

					// Fill Parent Template Group
					if(memberTypeTemplateParentOffset != -1 && !r.IsDBNull(memberTypeTemplateParentOffset))
					{
						if(!memberTypeTemplateParentSortedDictionary.TryGetValue(r.GetInt32(memberTypeTemplateParentOffset), out dojoMember.memberTypeTemplate.parent))
						{
							DojoMemberTypeTemplateManager.FillFromReader(dojoMember.memberTypeTemplate.Parent, r, memberTypeTemplateParentOffset, memberTypeTemplateParentOffset+1);
							memberTypeTemplateParentSortedDictionary.Add(dojoMember.memberTypeTemplate.Parent.ID, dojoMember.memberTypeTemplate.Parent);
						}
					}

					// Fill 
					if(memberTypeTemplateRootOffset != -1 && !r.IsDBNull(memberTypeTemplateRootOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMember.memberTypeTemplate.Root, r, memberTypeTemplateRootOffset, memberTypeTemplateRootOffset+1);

					// Fill 
					if(memberTypeTemplateInitialRankOffset != -1 && !r.IsDBNull(memberTypeTemplateInitialRankOffset))
						DojoRankManager.FillFromReader(dojoMember.memberTypeTemplate.InitialRank, r, memberTypeTemplateInitialRankOffset, memberTypeTemplateInitialRankOffset+1);

					// Fill 
					if(memberTypeTemplateInitialRoleOffset != -1 && !r.IsDBNull(memberTypeTemplateInitialRoleOffset))
						GreyFoxRoleManager.FillFromReader(dojoMember.memberTypeTemplate.InitialRole, r, memberTypeTemplateInitialRoleOffset, memberTypeTemplateInitialRoleOffset+1);

					// Fill 
					if(memberTypeTemplateRankMinOffset != -1 && !r.IsDBNull(memberTypeTemplateRankMinOffset))
						DojoRankManager.FillFromReader(dojoMember.memberTypeTemplate.RankMin, r, memberTypeTemplateRankMinOffset, memberTypeTemplateRankMinOffset+1);

					// Fill 
					if(memberTypeTemplateRankMaxOffset != -1 && !r.IsDBNull(memberTypeTemplateRankMaxOffset))
						DojoRankManager.FillFromReader(dojoMember.memberTypeTemplate.RankMax, r, memberTypeTemplateRankMaxOffset, memberTypeTemplateRankMaxOffset+1);

					// Fill 
					if(memberTypeTemplateMembershipTemplate1Offset != -1 && !r.IsDBNull(memberTypeTemplateMembershipTemplate1Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMember.memberTypeTemplate.MembershipTemplate1, r, memberTypeTemplateMembershipTemplate1Offset, memberTypeTemplateMembershipTemplate1Offset+1);

					// Fill 
					if(memberTypeTemplateMembershipTemplate2Offset != -1 && !r.IsDBNull(memberTypeTemplateMembershipTemplate2Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMember.memberTypeTemplate.MembershipTemplate2, r, memberTypeTemplateMembershipTemplate2Offset, memberTypeTemplateMembershipTemplate2Offset+1);

					// Fill 
					if(memberTypeTemplateMembershipTemplate3Offset != -1 && !r.IsDBNull(memberTypeTemplateMembershipTemplate3Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMember.memberTypeTemplate.MembershipTemplate3, r, memberTypeTemplateMembershipTemplate3Offset, memberTypeTemplateMembershipTemplate3Offset+1);

					// Fill 
					if(memberTypeTemplateMembershipTemplate4Offset != -1 && !r.IsDBNull(memberTypeTemplateMembershipTemplate4Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMember.memberTypeTemplate.MembershipTemplate4, r, memberTypeTemplateMembershipTemplate4Offset, memberTypeTemplateMembershipTemplate4Offset+1);

					// Fill 
					if(memberTypeTemplateMembershipTemplate5Offset != -1 && !r.IsDBNull(memberTypeTemplateMembershipTemplate5Offset))
						DojoMembershipTemplateManager.FillFromReader(dojoMember.memberTypeTemplate.MembershipTemplate5, r, memberTypeTemplateMembershipTemplate5Offset, memberTypeTemplateMembershipTemplate5Offset+1);

				}

				// Fill Membership1
				if(membership1Offset != -1 && !r.IsDBNull(membership1Offset))
				{
					DojoMembershipManager.FillFromReader(dojoMember.membership1, r, membership1Offset, membership1Offset+1);

					// Fill 
					if(membership1MemberOffset != -1 && !r.IsDBNull(membership1MemberOffset))
						DojoMemberManager.FillFromReader(dojoMember.membership1.Member, r, membership1MemberOffset, membership1MemberOffset+1);

					// Fill 
					if(membership1OrganizationOffset != -1 && !r.IsDBNull(membership1OrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMember.membership1.Organization, r, membership1OrganizationOffset, membership1OrganizationOffset+1);

					// Fill Parent Membership
					if(membership1ParentOffset != -1 && !r.IsDBNull(membership1ParentOffset))
						DojoMembershipManager.FillFromReader(dojoMember.membership1.Parent, r, membership1ParentOffset, membership1ParentOffset+1);

					// Fill Parent Template Group
					if(membership1MemberTypeTemplateOffset != -1 && !r.IsDBNull(membership1MemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMember.membership1.MemberTypeTemplate, r, membership1MemberTypeTemplateOffset, membership1MemberTypeTemplateOffset+1);

					// Fill Parent Template
					if(membership1MembershipTemplateOffset != -1 && !r.IsDBNull(membership1MembershipTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMember.membership1.MembershipTemplate, r, membership1MembershipTemplateOffset, membership1MembershipTemplateOffset+1);

					// Fill 
					if(membership1PriorMembershipOffset != -1 && !r.IsDBNull(membership1PriorMembershipOffset))
						DojoMembershipManager.FillFromReader(dojoMember.membership1.PriorMembership, r, membership1PriorMembershipOffset, membership1PriorMembershipOffset+1);

					// Fill 
					if(membership1InvoiceLineOffset != -1 && !r.IsDBNull(membership1InvoiceLineOffset))
						RHInvoiceLineManager.FillFromReader(dojoMember.membership1.InvoiceLine, r, membership1InvoiceLineOffset, membership1InvoiceLineOffset+1);

				}

				// Fill Membership2
				if(membership2Offset != -1 && !r.IsDBNull(membership2Offset))
				{
					DojoMembershipManager.FillFromReader(dojoMember.membership2, r, membership2Offset, membership2Offset+1);

					// Fill 
					if(membership2MemberOffset != -1 && !r.IsDBNull(membership2MemberOffset))
						DojoMemberManager.FillFromReader(dojoMember.membership2.Member, r, membership2MemberOffset, membership2MemberOffset+1);

					// Fill 
					if(membership2OrganizationOffset != -1 && !r.IsDBNull(membership2OrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMember.membership2.Organization, r, membership2OrganizationOffset, membership2OrganizationOffset+1);

					// Fill Parent Membership
					if(membership2ParentOffset != -1 && !r.IsDBNull(membership2ParentOffset))
						DojoMembershipManager.FillFromReader(dojoMember.membership2.Parent, r, membership2ParentOffset, membership2ParentOffset+1);

					// Fill Parent Template Group
					if(membership2MemberTypeTemplateOffset != -1 && !r.IsDBNull(membership2MemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMember.membership2.MemberTypeTemplate, r, membership2MemberTypeTemplateOffset, membership2MemberTypeTemplateOffset+1);

					// Fill Parent Template
					if(membership2MembershipTemplateOffset != -1 && !r.IsDBNull(membership2MembershipTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMember.membership2.MembershipTemplate, r, membership2MembershipTemplateOffset, membership2MembershipTemplateOffset+1);

					// Fill 
					if(membership2PriorMembershipOffset != -1 && !r.IsDBNull(membership2PriorMembershipOffset))
						DojoMembershipManager.FillFromReader(dojoMember.membership2.PriorMembership, r, membership2PriorMembershipOffset, membership2PriorMembershipOffset+1);

					// Fill 
					if(membership2InvoiceLineOffset != -1 && !r.IsDBNull(membership2InvoiceLineOffset))
						RHInvoiceLineManager.FillFromReader(dojoMember.membership2.InvoiceLine, r, membership2InvoiceLineOffset, membership2InvoiceLineOffset+1);

				}

				// Fill Membership3
				if(membership3Offset != -1 && !r.IsDBNull(membership3Offset))
				{
					DojoMembershipManager.FillFromReader(dojoMember.membership3, r, membership3Offset, membership3Offset+1);

					// Fill 
					if(membership3MemberOffset != -1 && !r.IsDBNull(membership3MemberOffset))
						DojoMemberManager.FillFromReader(dojoMember.membership3.Member, r, membership3MemberOffset, membership3MemberOffset+1);

					// Fill 
					if(membership3OrganizationOffset != -1 && !r.IsDBNull(membership3OrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMember.membership3.Organization, r, membership3OrganizationOffset, membership3OrganizationOffset+1);

					// Fill Parent Membership
					if(membership3ParentOffset != -1 && !r.IsDBNull(membership3ParentOffset))
						DojoMembershipManager.FillFromReader(dojoMember.membership3.Parent, r, membership3ParentOffset, membership3ParentOffset+1);

					// Fill Parent Template Group
					if(membership3MemberTypeTemplateOffset != -1 && !r.IsDBNull(membership3MemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMember.membership3.MemberTypeTemplate, r, membership3MemberTypeTemplateOffset, membership3MemberTypeTemplateOffset+1);

					// Fill Parent Template
					if(membership3MembershipTemplateOffset != -1 && !r.IsDBNull(membership3MembershipTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMember.membership3.MembershipTemplate, r, membership3MembershipTemplateOffset, membership3MembershipTemplateOffset+1);

					// Fill 
					if(membership3PriorMembershipOffset != -1 && !r.IsDBNull(membership3PriorMembershipOffset))
						DojoMembershipManager.FillFromReader(dojoMember.membership3.PriorMembership, r, membership3PriorMembershipOffset, membership3PriorMembershipOffset+1);

					// Fill 
					if(membership3InvoiceLineOffset != -1 && !r.IsDBNull(membership3InvoiceLineOffset))
						RHInvoiceLineManager.FillFromReader(dojoMember.membership3.InvoiceLine, r, membership3InvoiceLineOffset, membership3InvoiceLineOffset+1);

				}

				// Fill Membership4
				if(membership4Offset != -1 && !r.IsDBNull(membership4Offset))
				{
					DojoMembershipManager.FillFromReader(dojoMember.membership4, r, membership4Offset, membership4Offset+1);

					// Fill 
					if(membership4MemberOffset != -1 && !r.IsDBNull(membership4MemberOffset))
						DojoMemberManager.FillFromReader(dojoMember.membership4.Member, r, membership4MemberOffset, membership4MemberOffset+1);

					// Fill 
					if(membership4OrganizationOffset != -1 && !r.IsDBNull(membership4OrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMember.membership4.Organization, r, membership4OrganizationOffset, membership4OrganizationOffset+1);

					// Fill Parent Membership
					if(membership4ParentOffset != -1 && !r.IsDBNull(membership4ParentOffset))
						DojoMembershipManager.FillFromReader(dojoMember.membership4.Parent, r, membership4ParentOffset, membership4ParentOffset+1);

					// Fill Parent Template Group
					if(membership4MemberTypeTemplateOffset != -1 && !r.IsDBNull(membership4MemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMember.membership4.MemberTypeTemplate, r, membership4MemberTypeTemplateOffset, membership4MemberTypeTemplateOffset+1);

					// Fill Parent Template
					if(membership4MembershipTemplateOffset != -1 && !r.IsDBNull(membership4MembershipTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMember.membership4.MembershipTemplate, r, membership4MembershipTemplateOffset, membership4MembershipTemplateOffset+1);

					// Fill 
					if(membership4PriorMembershipOffset != -1 && !r.IsDBNull(membership4PriorMembershipOffset))
						DojoMembershipManager.FillFromReader(dojoMember.membership4.PriorMembership, r, membership4PriorMembershipOffset, membership4PriorMembershipOffset+1);

					// Fill 
					if(membership4InvoiceLineOffset != -1 && !r.IsDBNull(membership4InvoiceLineOffset))
						RHInvoiceLineManager.FillFromReader(dojoMember.membership4.InvoiceLine, r, membership4InvoiceLineOffset, membership4InvoiceLineOffset+1);

				}

				// Fill Membership5
				if(membership5Offset != -1 && !r.IsDBNull(membership5Offset))
				{
					DojoMembershipManager.FillFromReader(dojoMember.membership5, r, membership5Offset, membership5Offset+1);

					// Fill 
					if(membership5MemberOffset != -1 && !r.IsDBNull(membership5MemberOffset))
						DojoMemberManager.FillFromReader(dojoMember.membership5.Member, r, membership5MemberOffset, membership5MemberOffset+1);

					// Fill 
					if(membership5OrganizationOffset != -1 && !r.IsDBNull(membership5OrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMember.membership5.Organization, r, membership5OrganizationOffset, membership5OrganizationOffset+1);

					// Fill Parent Membership
					if(membership5ParentOffset != -1 && !r.IsDBNull(membership5ParentOffset))
						DojoMembershipManager.FillFromReader(dojoMember.membership5.Parent, r, membership5ParentOffset, membership5ParentOffset+1);

					// Fill Parent Template Group
					if(membership5MemberTypeTemplateOffset != -1 && !r.IsDBNull(membership5MemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMember.membership5.MemberTypeTemplate, r, membership5MemberTypeTemplateOffset, membership5MemberTypeTemplateOffset+1);

					// Fill Parent Template
					if(membership5MembershipTemplateOffset != -1 && !r.IsDBNull(membership5MembershipTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMember.membership5.MembershipTemplate, r, membership5MembershipTemplateOffset, membership5MembershipTemplateOffset+1);

					// Fill 
					if(membership5PriorMembershipOffset != -1 && !r.IsDBNull(membership5PriorMembershipOffset))
						DojoMembershipManager.FillFromReader(dojoMember.membership5.PriorMembership, r, membership5PriorMembershipOffset, membership5PriorMembershipOffset+1);

					// Fill 
					if(membership5InvoiceLineOffset != -1 && !r.IsDBNull(membership5InvoiceLineOffset))
						RHInvoiceLineManager.FillFromReader(dojoMember.membership5.InvoiceLine, r, membership5InvoiceLineOffset, membership5InvoiceLineOffset+1);

				}

				// Fill Instructor1
				if(instructor1Offset != -1 && !r.IsDBNull(instructor1Offset))
				{
					DojoMemberManager.FillFromReader(dojoMember.instructor1, r, instructor1Offset, instructor1Offset+1);

					// Fill 
					if(instructor1PrivateContactOffset != -1 && !r.IsDBNull(instructor1PrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.instructor1.PrivateContact, "kitTessen_Members_PrivateContacts", r, instructor1PrivateContactOffset, instructor1PrivateContactOffset+1);

					// Fill 
					if(instructor1EmergencyContactOffset != -1 && !r.IsDBNull(instructor1EmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.instructor1.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, instructor1EmergencyContactOffset, instructor1EmergencyContactOffset+1);

					// Fill 
					if(instructor1PublicContactOffset != -1 && !r.IsDBNull(instructor1PublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.instructor1.PublicContact, "kitTessen_Members_PublicContacts", r, instructor1PublicContactOffset, instructor1PublicContactOffset+1);

					// Fill 
					if(instructor1ParentOffset != -1 && !r.IsDBNull(instructor1ParentOffset))
						DojoMemberManager.FillFromReader(dojoMember.instructor1.Parent, r, instructor1ParentOffset, instructor1ParentOffset+1);

					// Fill 
					if(instructor1RootOffset != -1 && !r.IsDBNull(instructor1RootOffset))
						DojoMemberManager.FillFromReader(dojoMember.instructor1.Root, r, instructor1RootOffset, instructor1RootOffset+1);

					// Fill 
					if(instructor1MemberTypeOffset != -1 && !r.IsDBNull(instructor1MemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoMember.instructor1.MemberType, r, instructor1MemberTypeOffset, instructor1MemberTypeOffset+1);

					// Fill 
					if(instructor1MemberTypeTemplateOffset != -1 && !r.IsDBNull(instructor1MemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMember.instructor1.MemberTypeTemplate, r, instructor1MemberTypeTemplateOffset, instructor1MemberTypeTemplateOffset+1);

					// Fill 
					if(instructor1Membership1Offset != -1 && !r.IsDBNull(instructor1Membership1Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor1.Membership1, r, instructor1Membership1Offset, instructor1Membership1Offset+1);

					// Fill 
					if(instructor1Membership2Offset != -1 && !r.IsDBNull(instructor1Membership2Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor1.Membership2, r, instructor1Membership2Offset, instructor1Membership2Offset+1);

					// Fill 
					if(instructor1Membership3Offset != -1 && !r.IsDBNull(instructor1Membership3Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor1.Membership3, r, instructor1Membership3Offset, instructor1Membership3Offset+1);

					// Fill 
					if(instructor1Membership4Offset != -1 && !r.IsDBNull(instructor1Membership4Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor1.Membership4, r, instructor1Membership4Offset, instructor1Membership4Offset+1);

					// Fill 
					if(instructor1Membership5Offset != -1 && !r.IsDBNull(instructor1Membership5Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor1.Membership5, r, instructor1Membership5Offset, instructor1Membership5Offset+1);

					// Fill 
					if(instructor1Instructor1Offset != -1 && !r.IsDBNull(instructor1Instructor1Offset))
						DojoMemberManager.FillFromReader(dojoMember.instructor1.Instructor1, r, instructor1Instructor1Offset, instructor1Instructor1Offset+1);

					// Fill 
					if(instructor1Instructor2Offset != -1 && !r.IsDBNull(instructor1Instructor2Offset))
						DojoMemberManager.FillFromReader(dojoMember.instructor1.Instructor2, r, instructor1Instructor2Offset, instructor1Instructor2Offset+1);

					// Fill 
					if(instructor1Instructor3Offset != -1 && !r.IsDBNull(instructor1Instructor3Offset))
						DojoMemberManager.FillFromReader(dojoMember.instructor1.Instructor3, r, instructor1Instructor3Offset, instructor1Instructor3Offset+1);

					// Fill 
					if(instructor1RankOffset != -1 && !r.IsDBNull(instructor1RankOffset))
						DojoRankManager.FillFromReader(dojoMember.instructor1.Rank, r, instructor1RankOffset, instructor1RankOffset+1);

					// Fill 
					if(instructor1UserAccountOffset != -1 && !r.IsDBNull(instructor1UserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoMember.instructor1.UserAccount, r, instructor1UserAccountOffset, instructor1UserAccountOffset+1);

					// Fill 
					if(instructor1CustomerOffset != -1 && !r.IsDBNull(instructor1CustomerOffset))
						RHCustomerManager.FillFromReader(dojoMember.instructor1.Customer, r, instructor1CustomerOffset, instructor1CustomerOffset+1);

				}

				// Fill Instructor2
				if(instructor2Offset != -1 && !r.IsDBNull(instructor2Offset))
				{
					DojoMemberManager.FillFromReader(dojoMember.instructor2, r, instructor2Offset, instructor2Offset+1);

					// Fill 
					if(instructor2PrivateContactOffset != -1 && !r.IsDBNull(instructor2PrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.instructor2.PrivateContact, "kitTessen_Members_PrivateContacts", r, instructor2PrivateContactOffset, instructor2PrivateContactOffset+1);

					// Fill 
					if(instructor2EmergencyContactOffset != -1 && !r.IsDBNull(instructor2EmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.instructor2.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, instructor2EmergencyContactOffset, instructor2EmergencyContactOffset+1);

					// Fill 
					if(instructor2PublicContactOffset != -1 && !r.IsDBNull(instructor2PublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.instructor2.PublicContact, "kitTessen_Members_PublicContacts", r, instructor2PublicContactOffset, instructor2PublicContactOffset+1);

					// Fill 
					if(instructor2ParentOffset != -1 && !r.IsDBNull(instructor2ParentOffset))
						DojoMemberManager.FillFromReader(dojoMember.instructor2.Parent, r, instructor2ParentOffset, instructor2ParentOffset+1);

					// Fill 
					if(instructor2RootOffset != -1 && !r.IsDBNull(instructor2RootOffset))
						DojoMemberManager.FillFromReader(dojoMember.instructor2.Root, r, instructor2RootOffset, instructor2RootOffset+1);

					// Fill 
					if(instructor2MemberTypeOffset != -1 && !r.IsDBNull(instructor2MemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoMember.instructor2.MemberType, r, instructor2MemberTypeOffset, instructor2MemberTypeOffset+1);

					// Fill 
					if(instructor2MemberTypeTemplateOffset != -1 && !r.IsDBNull(instructor2MemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMember.instructor2.MemberTypeTemplate, r, instructor2MemberTypeTemplateOffset, instructor2MemberTypeTemplateOffset+1);

					// Fill 
					if(instructor2Membership1Offset != -1 && !r.IsDBNull(instructor2Membership1Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor2.Membership1, r, instructor2Membership1Offset, instructor2Membership1Offset+1);

					// Fill 
					if(instructor2Membership2Offset != -1 && !r.IsDBNull(instructor2Membership2Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor2.Membership2, r, instructor2Membership2Offset, instructor2Membership2Offset+1);

					// Fill 
					if(instructor2Membership3Offset != -1 && !r.IsDBNull(instructor2Membership3Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor2.Membership3, r, instructor2Membership3Offset, instructor2Membership3Offset+1);

					// Fill 
					if(instructor2Membership4Offset != -1 && !r.IsDBNull(instructor2Membership4Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor2.Membership4, r, instructor2Membership4Offset, instructor2Membership4Offset+1);

					// Fill 
					if(instructor2Membership5Offset != -1 && !r.IsDBNull(instructor2Membership5Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor2.Membership5, r, instructor2Membership5Offset, instructor2Membership5Offset+1);

					// Fill 
					if(instructor2Instructor1Offset != -1 && !r.IsDBNull(instructor2Instructor1Offset))
						DojoMemberManager.FillFromReader(dojoMember.instructor2.Instructor1, r, instructor2Instructor1Offset, instructor2Instructor1Offset+1);

					// Fill 
					if(instructor2Instructor2Offset != -1 && !r.IsDBNull(instructor2Instructor2Offset))
						DojoMemberManager.FillFromReader(dojoMember.instructor2.Instructor2, r, instructor2Instructor2Offset, instructor2Instructor2Offset+1);

					// Fill 
					if(instructor2Instructor3Offset != -1 && !r.IsDBNull(instructor2Instructor3Offset))
						DojoMemberManager.FillFromReader(dojoMember.instructor2.Instructor3, r, instructor2Instructor3Offset, instructor2Instructor3Offset+1);

					// Fill 
					if(instructor2RankOffset != -1 && !r.IsDBNull(instructor2RankOffset))
						DojoRankManager.FillFromReader(dojoMember.instructor2.Rank, r, instructor2RankOffset, instructor2RankOffset+1);

					// Fill 
					if(instructor2UserAccountOffset != -1 && !r.IsDBNull(instructor2UserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoMember.instructor2.UserAccount, r, instructor2UserAccountOffset, instructor2UserAccountOffset+1);

					// Fill 
					if(instructor2CustomerOffset != -1 && !r.IsDBNull(instructor2CustomerOffset))
						RHCustomerManager.FillFromReader(dojoMember.instructor2.Customer, r, instructor2CustomerOffset, instructor2CustomerOffset+1);

				}

				// Fill Instructor3
				if(instructor3Offset != -1 && !r.IsDBNull(instructor3Offset))
				{
					DojoMemberManager.FillFromReader(dojoMember.instructor3, r, instructor3Offset, instructor3Offset+1);

					// Fill 
					if(instructor3PrivateContactOffset != -1 && !r.IsDBNull(instructor3PrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.instructor3.PrivateContact, "kitTessen_Members_PrivateContacts", r, instructor3PrivateContactOffset, instructor3PrivateContactOffset+1);

					// Fill 
					if(instructor3EmergencyContactOffset != -1 && !r.IsDBNull(instructor3EmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.instructor3.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, instructor3EmergencyContactOffset, instructor3EmergencyContactOffset+1);

					// Fill 
					if(instructor3PublicContactOffset != -1 && !r.IsDBNull(instructor3PublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.instructor3.PublicContact, "kitTessen_Members_PublicContacts", r, instructor3PublicContactOffset, instructor3PublicContactOffset+1);

					// Fill 
					if(instructor3ParentOffset != -1 && !r.IsDBNull(instructor3ParentOffset))
						DojoMemberManager.FillFromReader(dojoMember.instructor3.Parent, r, instructor3ParentOffset, instructor3ParentOffset+1);

					// Fill 
					if(instructor3RootOffset != -1 && !r.IsDBNull(instructor3RootOffset))
						DojoMemberManager.FillFromReader(dojoMember.instructor3.Root, r, instructor3RootOffset, instructor3RootOffset+1);

					// Fill 
					if(instructor3MemberTypeOffset != -1 && !r.IsDBNull(instructor3MemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoMember.instructor3.MemberType, r, instructor3MemberTypeOffset, instructor3MemberTypeOffset+1);

					// Fill 
					if(instructor3MemberTypeTemplateOffset != -1 && !r.IsDBNull(instructor3MemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoMember.instructor3.MemberTypeTemplate, r, instructor3MemberTypeTemplateOffset, instructor3MemberTypeTemplateOffset+1);

					// Fill 
					if(instructor3Membership1Offset != -1 && !r.IsDBNull(instructor3Membership1Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor3.Membership1, r, instructor3Membership1Offset, instructor3Membership1Offset+1);

					// Fill 
					if(instructor3Membership2Offset != -1 && !r.IsDBNull(instructor3Membership2Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor3.Membership2, r, instructor3Membership2Offset, instructor3Membership2Offset+1);

					// Fill 
					if(instructor3Membership3Offset != -1 && !r.IsDBNull(instructor3Membership3Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor3.Membership3, r, instructor3Membership3Offset, instructor3Membership3Offset+1);

					// Fill 
					if(instructor3Membership4Offset != -1 && !r.IsDBNull(instructor3Membership4Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor3.Membership4, r, instructor3Membership4Offset, instructor3Membership4Offset+1);

					// Fill 
					if(instructor3Membership5Offset != -1 && !r.IsDBNull(instructor3Membership5Offset))
						DojoMembershipManager.FillFromReader(dojoMember.instructor3.Membership5, r, instructor3Membership5Offset, instructor3Membership5Offset+1);

					// Fill 
					if(instructor3Instructor1Offset != -1 && !r.IsDBNull(instructor3Instructor1Offset))
						DojoMemberManager.FillFromReader(dojoMember.instructor3.Instructor1, r, instructor3Instructor1Offset, instructor3Instructor1Offset+1);

					// Fill 
					if(instructor3Instructor2Offset != -1 && !r.IsDBNull(instructor3Instructor2Offset))
						DojoMemberManager.FillFromReader(dojoMember.instructor3.Instructor2, r, instructor3Instructor2Offset, instructor3Instructor2Offset+1);

					// Fill 
					if(instructor3Instructor3Offset != -1 && !r.IsDBNull(instructor3Instructor3Offset))
						DojoMemberManager.FillFromReader(dojoMember.instructor3.Instructor3, r, instructor3Instructor3Offset, instructor3Instructor3Offset+1);

					// Fill 
					if(instructor3RankOffset != -1 && !r.IsDBNull(instructor3RankOffset))
						DojoRankManager.FillFromReader(dojoMember.instructor3.Rank, r, instructor3RankOffset, instructor3RankOffset+1);

					// Fill 
					if(instructor3UserAccountOffset != -1 && !r.IsDBNull(instructor3UserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoMember.instructor3.UserAccount, r, instructor3UserAccountOffset, instructor3UserAccountOffset+1);

					// Fill 
					if(instructor3CustomerOffset != -1 && !r.IsDBNull(instructor3CustomerOffset))
						RHCustomerManager.FillFromReader(dojoMember.instructor3.Customer, r, instructor3CustomerOffset, instructor3CustomerOffset+1);

				}

				// Fill Rank
				if(rankOffset != -1 && !r.IsDBNull(rankOffset))
				{
					DojoRankManager.FillFromReader(dojoMember.rank, r, rankOffset, rankOffset+1);

					// Fill 
					if(rankPromotionRankOffset != -1 && !r.IsDBNull(rankPromotionRankOffset))
						DojoRankManager.FillFromReader(dojoMember.rank.PromotionRank, r, rankPromotionRankOffset, rankPromotionRankOffset+1);

					// Fill 
					if(rankItemOffset != -1 && !r.IsDBNull(rankItemOffset))
						RHItemManager.FillFromReader(dojoMember.rank.Item, r, rankItemOffset, rankItemOffset+1);

				}

				// Fill UserAccount
				if(userAccountOffset != -1 && !r.IsDBNull(userAccountOffset))
				{
					GreyFoxUserManager.FillFromReader(dojoMember.userAccount, r, userAccountOffset, userAccountOffset+1);

					// Fill 
					if(userAccountContactOffset != -1 && !r.IsDBNull(userAccountContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.userAccount.Contact, "sysGlobal_Contacts", r, userAccountContactOffset, userAccountContactOffset+1);

				}

				// Fill Customer
				if(customerOffset != -1 && !r.IsDBNull(customerOffset))
				{
					RHCustomerManager.FillFromReader(dojoMember.customer, r, customerOffset, customerOffset+1);

					// Fill Name
					if(customerPrivateContactOffset != -1 && !r.IsDBNull(customerPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.customer.PrivateContact, "RH_Customers_PriContacts", r, customerPrivateContactOffset, customerPrivateContactOffset+1);

					// Fill 
					if(customerShippingContactOffset != -1 && !r.IsDBNull(customerShippingContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.customer.ShippingContact, "RH_Customers_ShipContacts", r, customerShippingContactOffset, customerShippingContactOffset+1);

					// Fill 
					if(customerBillingContactOffset != -1 && !r.IsDBNull(customerBillingContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMember.customer.BillingContact, "RH_Customers_BillContacts", r, customerBillingContactOffset, customerBillingContactOffset+1);

					// Fill 
					if(customerPrimaryAccountOffset != -1 && !r.IsDBNull(customerPrimaryAccountOffset))
						RHCustomerAccountManager.FillFromReader(dojoMember.customer.PrimaryAccount, r, customerPrimaryAccountOffset, customerPrimaryAccountOffset+1);

					// Fill 
					if(customerTaxOffset != -1 && !r.IsDBNull(customerTaxOffset))
						RHTaxTypeManager.FillFromReader(dojoMember.customer.Tax, r, customerTaxOffset, customerTaxOffset+1);

					// Fill 
					if(customerUserAccountOffset != -1 && !r.IsDBNull(customerUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoMember.customer.UserAccount, r, customerUserAccountOffset, customerUserAccountOffset+1);

				}

				dojoMemberCollection.Add(dojoMember);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoMemberCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoMember ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoMember dojoMember = new DojoMember();
			FillFromReader(dojoMember, r, idOffset, dataOffset);
			return dojoMember;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoMember dojoMember, IDataReader r, int idOffset, int dataOffset)
		{
			dojoMember.iD = r.GetInt32(idOffset);
			dojoMember.isSynced = true;
			dojoMember.isPlaceHolder = false;

			if(!r.IsDBNull(0+dataOffset) && r.GetInt32(0+dataOffset) > 0)
			{
				dojoMember.privateContact = GreyFoxContact.NewPlaceHolder("kitTessen_Members_PrivateContacts", r.GetInt32(0+dataOffset));
			}
			if(!r.IsDBNull(1+dataOffset) && r.GetInt32(1+dataOffset) > 0)
			{
				dojoMember.emergencyContact = GreyFoxContact.NewPlaceHolder("kitTessen_Members_EmergencyContacts", r.GetInt32(1+dataOffset));
			}
			if(!r.IsDBNull(2+dataOffset) && r.GetInt32(2+dataOffset) > 0)
			{
				dojoMember.publicContact = GreyFoxContact.NewPlaceHolder("kitTessen_Members_PublicContacts", r.GetInt32(2+dataOffset));
			}
			if(!r.IsDBNull(3+dataOffset) && r.GetInt32(3+dataOffset) > 0)
			{
				dojoMember.parent = DojoMember.NewPlaceHolder(r.GetInt32(3+dataOffset));
			}
			if(!r.IsDBNull(4+dataOffset) && r.GetInt32(4+dataOffset) > 0)
			{
				dojoMember.root = DojoMember.NewPlaceHolder(r.GetInt32(4+dataOffset));
			}
			dojoMember.createDate = r.GetDateTime(5+dataOffset);
			dojoMember.modifyDate = r.GetDateTime(6+dataOffset);
			if(!r.IsDBNull(7+dataOffset) && r.GetInt32(7+dataOffset) > 0)
			{
				dojoMember.memberType = DojoMemberType.NewPlaceHolder(r.GetInt32(7+dataOffset));
			}
			if(!r.IsDBNull(8+dataOffset) && r.GetInt32(8+dataOffset) > 0)
			{
				dojoMember.memberTypeTemplate = DojoMemberTypeTemplate.NewPlaceHolder(r.GetInt32(8+dataOffset));
			}
			if(!r.IsDBNull(9+dataOffset)) 
				dojoMember.memberTypeTreeHash = r.GetString(9+dataOffset);
			else
				dojoMember.memberTypeTreeHash = null;
			dojoMember.memberSince = r.GetDateTime(10+dataOffset);
			if(!r.IsDBNull(11+dataOffset) && r.GetInt32(11+dataOffset) > 0)
			{
				dojoMember.membership1 = DojoMembership.NewPlaceHolder(r.GetInt32(11+dataOffset));
			}
			if(!r.IsDBNull(12+dataOffset) && r.GetInt32(12+dataOffset) > 0)
			{
				dojoMember.membership2 = DojoMembership.NewPlaceHolder(r.GetInt32(12+dataOffset));
			}
			if(!r.IsDBNull(13+dataOffset) && r.GetInt32(13+dataOffset) > 0)
			{
				dojoMember.membership3 = DojoMembership.NewPlaceHolder(r.GetInt32(13+dataOffset));
			}
			if(!r.IsDBNull(14+dataOffset) && r.GetInt32(14+dataOffset) > 0)
			{
				dojoMember.membership4 = DojoMembership.NewPlaceHolder(r.GetInt32(14+dataOffset));
			}
			if(!r.IsDBNull(15+dataOffset) && r.GetInt32(15+dataOffset) > 0)
			{
				dojoMember.membership5 = DojoMembership.NewPlaceHolder(r.GetInt32(15+dataOffset));
			}
			dojoMember.lastMembershipScan = r.GetDateTime(16+dataOffset);
			dojoMember.isPrimaryOrgActive = r.GetBoolean(17+dataOffset);
			if(!r.IsDBNull(18+dataOffset)) 
				dojoMember.timeInRank = TimeSpan.FromTicks((long) r.GetDouble(18+dataOffset));
			else
				dojoMember.timeInRank = TimeSpan.Zero;
			if(!r.IsDBNull(19+dataOffset)) 
				dojoMember.timeInMembership = TimeSpan.FromTicks((long) r.GetDouble(19+dataOffset));
			else
				dojoMember.timeInMembership = TimeSpan.Zero;
			if(!r.IsDBNull(20+dataOffset) && r.GetInt32(20+dataOffset) > 0)
			{
				dojoMember.instructor1 = DojoMember.NewPlaceHolder(r.GetInt32(20+dataOffset));
			}
			if(!r.IsDBNull(21+dataOffset) && r.GetInt32(21+dataOffset) > 0)
			{
				dojoMember.instructor2 = DojoMember.NewPlaceHolder(r.GetInt32(21+dataOffset));
			}
			if(!r.IsDBNull(22+dataOffset) && r.GetInt32(22+dataOffset) > 0)
			{
				dojoMember.instructor3 = DojoMember.NewPlaceHolder(r.GetInt32(22+dataOffset));
			}
			if(!r.IsDBNull(23+dataOffset)) 
				dojoMember.lastSignin = r.GetDateTime(23+dataOffset);
			else
				dojoMember.lastSignin = DateTime.MinValue;
			if(!r.IsDBNull(24+dataOffset)) 
				dojoMember.lastAttendanceScan = r.GetDateTime(24+dataOffset);
			else
				dojoMember.lastAttendanceScan = DateTime.MinValue;
			dojoMember.attendanceMessage = r.GetString(25+dataOffset);
			dojoMember.hasWaiver = r.GetBoolean(26+dataOffset);
			dojoMember.isPromotable = r.GetBoolean(27+dataOffset);
			dojoMember.isInstructor = r.GetBoolean(28+dataOffset);
			if(!r.IsDBNull(29+dataOffset) && r.GetInt32(29+dataOffset) > 0)
			{
				dojoMember.rank = DojoRank.NewPlaceHolder(r.GetInt32(29+dataOffset));
			}
			dojoMember.rankDate = r.GetDateTime(30+dataOffset);
			if(!r.IsDBNull(31+dataOffset) && r.GetInt32(31+dataOffset) > 0)
			{
				dojoMember.userAccount = GreyFoxUser.NewPlaceHolder(r.GetInt32(31+dataOffset));
			}
			dojoMember.isPastDue = r.GetBoolean(32+dataOffset);
			dojoMember.lastDuesScan = r.GetDateTime(33+dataOffset);
			if(!r.IsDBNull(34+dataOffset) && r.GetInt32(34+dataOffset) > 0)
			{
				dojoMember.customer = RHCustomer.NewPlaceHolder(r.GetInt32(34+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		public static void FillPromotionFlags(DojoMember dojoMember)
		{
			StringBuilder s;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			s = new StringBuilder("SELECT DojoPromotionFlagID FROM kitTessen_MembersChildren_PromotionFlags ");
			s.Append("WHERE DojoMemberID=");
			s.Append(dojoMember.iD);
			s.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(s.ToString());
			r = database.ExecuteReader(dbCommand);

			DojoPromotionFlagCollection promotionFlags;
			if(dojoMember.promotionFlags != null)
			{
				promotionFlags = dojoMember.promotionFlags;
				promotionFlags.Clear();
			}
			else
			{
				promotionFlags = new DojoPromotionFlagCollection();
				dojoMember.promotionFlags = promotionFlags;
			}

			while(r.Read())
				promotionFlags.Add(DojoPromotionFlag.NewPlaceHolder(r.GetInt32(0)));

			dojoMember.PromotionFlags = promotionFlags;
			// Store DojoMember in cache.
			if(cacheEnabled) cacheStore(dojoMember);
		}

		public static void FillPromotionFlags(DojoMemberCollection dojoMemberCollection)
		{
			StringBuilder s;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			if(dojoMemberCollection.Count > 0)
			{
				s = new StringBuilder("SELECT DojoMemberID, DojoPromotionFlagID FROM kitTessen_MembersChildren_PromotionFlags ORDER BY DojoMemberID; ");

				// Clone and sort collection by ID first to fill children in one pass
				DojoMemberCollection clonedCollection = dojoMemberCollection.Clone();
				clonedCollection.Sort();

				database = DatabaseFactory.CreateDatabase();
				dbCommand = database.GetSqlStringCommand(s.ToString());
				r = database.ExecuteReader(dbCommand);

				bool more = r.Read();

				foreach(DojoMember dojoMember in clonedCollection)
				{
					DojoPromotionFlagCollection promotionFlags;
					if(dojoMember.promotionFlags != null)
					{
						promotionFlags = dojoMember.promotionFlags;
						promotionFlags.Clear();
					}
					else
					{
						promotionFlags = new DojoPromotionFlagCollection();
						dojoMember.promotionFlags = promotionFlags;
					}

					while(more)
					{
						if(r.GetInt32(0) < dojoMember.iD)
						{
							more = r.Read();
						}
						else if(r.GetInt32(0) == dojoMember.iD)
						{
							promotionFlags.Add(DojoPromotionFlag.NewPlaceHolder(r.GetInt32(1)));
							more = r.Read();
						}
						else
						{
							break;
						}
					}

					// No need to continue if there are no more records
					if(!more) break;
				}

			}
		}

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_Members WHERE DojoMemberID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);


			// Delete child relationships for PromotionFlags.
			query.Length = 0;
			query.Append("DELETE FROM kitTessen_MembersChildren_PromotionFlags WHERE ");
			query.Append("DojoMemberID=");
			query.Append(id);
			query.Append(";");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			GreyFoxContactManager privateContactManager = 
				new GreyFoxContactManager("kitTessen_Members_PrivateContacts");
			msg.Append(privateContactManager.VerifyTable(repair));

			GreyFoxContactManager emergencyContactManager = 
				new GreyFoxContactManager("kitTessen_Members_EmergencyContacts");
			msg.Append(emergencyContactManager.VerifyTable(repair));

			GreyFoxContactManager publicContactManager = 
				new GreyFoxContactManager("kitTessen_Members_PublicContacts");
			msg.Append(publicContactManager.VerifyTable(repair));

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_Members ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_Members_PrivateContact FOREIGN KEY (PrivateContactID) REFERENCES kitTessen_Members_PrivateContacts (GreyFoxContactID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_EmergencyContact FOREIGN KEY (EmergencyContactID) REFERENCES kitTessen_Members_EmergencyContacts (GreyFoxContactID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_PublicContact FOREIGN KEY (PublicContactID) REFERENCES kitTessen_Members_PublicContacts (GreyFoxContactID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_Parent FOREIGN KEY (ParentID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_Root FOREIGN KEY (RootID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_MemberType FOREIGN KEY (MemberTypeID) REFERENCES kitTessen_MemberTypes (DojoMemberTypeID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_MemberTypeTemplate FOREIGN KEY (MemberTypeTemplateID) REFERENCES kitTessen_MemberTypeTemplates (DojoMemberTypeTemplateID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_Membership1 FOREIGN KEY (Membership1ID) REFERENCES kitTessen_Memberships (DojoMembershipID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_Membership2 FOREIGN KEY (Membership2ID) REFERENCES kitTessen_Memberships (DojoMembershipID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_Membership3 FOREIGN KEY (Membership3ID) REFERENCES kitTessen_Memberships (DojoMembershipID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_Membership4 FOREIGN KEY (Membership4ID) REFERENCES kitTessen_Memberships (DojoMembershipID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_Membership5 FOREIGN KEY (Membership5ID) REFERENCES kitTessen_Memberships (DojoMembershipID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_Instructor1 FOREIGN KEY (Instructor1ID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_Instructor2 FOREIGN KEY (Instructor2ID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_Instructor3 FOREIGN KEY (Instructor3ID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_Rank FOREIGN KEY (RankID) REFERENCES kitTessen_Ranks (DojoRankID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_UserAccount FOREIGN KEY (UserAccountID) REFERENCES sysGlobal_Users (GreyFoxUserID),");
			query.Append(" CONSTRAINT FK_kitTessen_Members_Customer FOREIGN KEY (CustomerID) REFERENCES RH_Customers (RHCustomerID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			query.Length = 0;
			query.Append("ALTER TABLE kitTessen_MembersChildren_PromotionFlags ADD");
			query.Append(" CONSTRAINT FK_kitTessen_Members_kitTessen_MembersChildren_PromotionFlags FOREIGN KEY (DojoMemberID) REFERENCES kitTessen_Members (DojoMemberID) ON DELETE CASCADE, ");
			query.Append(" CONSTRAINT FK_kitTessen_MembersChildren_PromotionFlags_kitTessen_PromotionFlags FOREIGN KEY (DojoPromotionFlagID) REFERENCES kitTessen_PromotionFlags (DojoPromotionFlagID) ON DELETE CASCADE;");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_Members ");
				query.Append(" (DojoMemberID COUNTER(1,1) CONSTRAINT PK_kitTessen_Members PRIMARY KEY, " +
					"PrivateContactID LONG," +
					"EmergencyContactID LONG," +
					"PublicContactID LONG," +
					"ParentID LONG," +
					"RootID LONG," +
					"CreateDate DATETIME," +
					"ModifyDate DATETIME," +
					"MemberTypeID LONG," +
					"MemberTypeTemplateID LONG," +
					"MemberTypeTreeHash TEXT(75)," +
					"MemberSince DATETIME," +
					"Membership1ID LONG," +
					"Membership2ID LONG," +
					"Membership3ID LONG," +
					"Membership4ID LONG," +
					"Membership5ID LONG," +
					"LastMembershipScan DATETIME," +
					"IsPrimaryOrgActive BIT," +
					"TimeInRank DOUBLE," +
					"TimeInMembership DOUBLE," +
					"Instructor1ID LONG," +
					"Instructor2ID LONG," +
					"Instructor3ID LONG," +
					"LastSignin DATETIME," +
					"LastAttendanceScan DATETIME," +
					"AttendanceMessage MEMO," +
					"HasWaiver BIT," +
					"IsPromotable BIT," +
					"IsInstructor BIT," +
					"RankID LONG," +
					"RankDate DATETIME," +
					"UserAccountID LONG," +
					"IsPastDue BIT," +
					"LastDuesScan DATETIME," +
					"CustomerID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_Members ");
				query.Append(" (DojoMemberID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_Members PRIMARY KEY, " +
					"PrivateContactID INT," +
					"EmergencyContactID INT," +
					"PublicContactID INT," +
					"ParentID INT," +
					"RootID INT," +
					"CreateDate DATETIME," +
					"ModifyDate DATETIME," +
					"MemberTypeID INT," +
					"MemberTypeTemplateID INT," +
					"MemberTypeTreeHash NVARCHAR(75)," +
					"MemberSince DATETIME," +
					"Membership1ID INT," +
					"Membership2ID INT," +
					"Membership3ID INT," +
					"Membership4ID INT," +
					"Membership5ID INT," +
					"LastMembershipScan DATETIME," +
					"IsPrimaryOrgActive BIT," +
					"TimeInRank FLOAT," +
					"TimeInMembership FLOAT," +
					"Instructor1ID INT," +
					"Instructor2ID INT," +
					"Instructor3ID INT," +
					"LastSignin DATETIME," +
					"LastAttendanceScan DATETIME," +
					"AttendanceMessage NTEXT," +
					"HasWaiver BIT," +
					"IsPromotable BIT," +
					"IsInstructor BIT," +
					"RankID INT," +
					"RankDate DATETIME," +
					"UserAccountID INT," +
					"IsPastDue BIT," +
					"LastDuesScan DATETIME," +
					"CustomerID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			//
			// Create object level table for PrivateContact.
			//
			GreyFoxContactManager privateContactManager = new GreyFoxContactManager("kitTessen_Members_PrivateContacts");
			privateContactManager.CreateTable();

			//
			// Create object level table for EmergencyContact.
			//
			GreyFoxContactManager emergencyContactManager = new GreyFoxContactManager("kitTessen_Members_EmergencyContacts");
			emergencyContactManager.CreateTable();

			//
			// Create object level table for PublicContact.
			//
			GreyFoxContactManager publicContactManager = new GreyFoxContactManager("kitTessen_Members_PublicContacts");
			publicContactManager.CreateTable();

			//
			// Create children table for PromotionFlags.
			//
			query.Length = 0;
			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				query.Append("CREATE TABLE kitTessen_MembersChildren_PromotionFlags ");
				query.Append("(DojoMemberID LONG, DojoPromotionFlagID LONG);");
				dbCommand = database.GetSqlStringCommand(query.ToString());
				database.ExecuteNonQuery(dbCommand);

			}
			else
			{
				query.Append("CREATE TABLE kitTessen_MembersChildren_PromotionFlags ");
				query.Append("(DojoMemberID INT, DojoPromotionFlagID INT);");
				dbCommand = database.GetSqlStringCommand(query.ToString());
				database.ExecuteNonQuery(dbCommand);

			}
		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoMember dojoMember)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_Members_" + dojoMember.iD.ToString(), dojoMember);
		}

		private static DojoMember cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_Members_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoMember)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_Members_" + id.ToString());
		}

		#endregion

		//--- Begin Custom Code ---
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																								
		public DojoMember GetMemberByUserID(int userID)
		{
			StringBuilder query = new StringBuilder("SELECT ");
			for(int x = 0; x < InnerJoinFields.Length; x++)
			{
				query.Append("kitTessen_Members.");
				query.Append(InnerJoinFields[x]);
				if(x != InnerJoinFields.Length - 1)
					query.Append(",");
			}
			query.Append(" FROM kitTessen_Members WHERE UserAccountID=");
			query.Append(userID);
			query.Append(";");

            Database database = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = database.GetSqlStringCommand(query.ToString());
            IDataReader r = database.ExecuteReader(dbCommand);

            if (!r.Read())
                return null;

			DojoMember member = ParseFromReader(r, 0, 1);

			return member;			
		}
																																
		public DojoMemberCollection GetMemberList(MemberListType listType)
		{
			switch(listType)
			{
				case MemberListType.Active:
					return GetCollection("IsActive=true", 
						"LastName, FirstName, MiddleName", DojoMemberFlags.PrivateContact);
				case MemberListType.Instructors:
					return GetCollection("IsInstructor=true", 
						"LastName, FirstName, MiddleName", DojoMemberFlags.PrivateContact);
				case MemberListType.Mudansha:
					return GetCollection("RankID<=7", 
						"LastName, FirstName, MiddleName", DojoMemberFlags.PrivateContact);
				case MemberListType.Yudansha:
					return GetCollection("RankID>=8", 
						"LastName, FirstName, MiddleName", DojoMemberFlags.PrivateContact);
			}
			
			return null;
		}

		public enum MemberListType: byte 
		{
			All,
			Active,
			Instructors,				// InstructorFlag
			NonPromotable,				// Members not meeting rank promotion criteria.
			Promotable,					// Members meeting rank promotion criteria.
			FlaggedPromotable,			// Members with PromotionFlag.			
			Mudansha,
			Yudansha
		};

        public DojoMemberCollection DecodeString(string members, string separator)
        {
            DojoMemberCollection encodedMembers = new DojoMemberCollection();

            members = members.Trim();
            if (members == string.Empty)
                return encodedMembers;

            members = members.Replace("'", "");
            string[] names = members.Split(new string[] { separator },
                StringSplitOptions.RemoveEmptyEntries);

            if (members.Length < 20)
                return fastDecode(names);

            DojoMemberCollection allMembers = GetCollection(string.Empty, string.Empty, null);

            for (int x = 0; x < allMembers.Count; x++)
                for (int y = 0; y <= names.GetUpperBound(0); y++)
                    if (allMembers[x].UserAccount.UserName == names[y])
                        encodedMembers.Add(allMembers[x]);

            return encodedMembers;
        }

        private DojoMemberCollection fastDecode(string[] names)
        {
            StringBuilder query = new StringBuilder();

            for (int x = 0; x <= names.GetUpperBound(0); x++)
            {
                query.Append("UserAccount.UserName='");
                query.Append(names[x].Trim());
                query.Append("'");
                if (x != names.GetUpperBound(0))
                    query.Append(" OR ");
            }

            if (query.Length == 0)
            {
                throw (new Exception("No usernames to encode."));
            }

            return GetCollection(query.ToString(), string.Empty,
                DojoMemberFlags.UserAccount);
        }

		//--- End Custom Code ---
	}
}

