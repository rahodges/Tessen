/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.People;
using Amns.Rappahanock;
using Amns.GreyFox.Security;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoSeminarRegistrationFlags : int { ParentSeminar,
				ParentSeminarLocation,
				ParentSeminarOptions,
				ParentSeminarItem,
				Contact,
				InvoiceLine,
				InvoiceLineInvoice,
				InvoiceLineItem,
				InvoiceLineClass,
				InvoiceLineTax,
				SalesOrderLine,
				SalesOrderLineSalesOrder,
				SalesOrderLineItem,
				SalesOrderLineClass,
				SalesOrderLineTax,
				Customer,
				CustomerPrivateContact,
				CustomerShippingContact,
				CustomerBillingContact,
				CustomerPrimaryAccount,
				CustomerTax,
				CustomerUserAccount};

	#endregion

	/// <summary>
	/// Datamanager for DojoSeminarRegistration objects.
	/// </summary>
	public class DojoSeminarRegistrationManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_SeminarRegistrations";
		public static readonly string ContactTable = "kitTessen_SeminarRegistrations_Contacts";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoSeminarRegistrationID",
			"Status",
			"ParentSeminarID",
			"RegistrationDate",
			"ClassUnits",
			"SessionID",
			"SeminarFee",
			"TotalFee",
			"PaymentDate",
			"PaymentReference",
			"PaymentAmount",
			"ContactID",
			"InvoiceLineID",
			"SalesOrderLineID",
			"CustomerID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoSeminarRegistrationID", "LONG", "-1" },
			{ "Status", "BYTE", "" },
			{ "ParentSeminarID", "LONG", "null" },
			{ "RegistrationDate", "DATETIME", "" },
			{ "ClassUnits", "LONG", "" },
			{ "SessionID", "TEXT(20)", "" },
			{ "SeminarFee", "CURRENCY", "" },
			{ "TotalFee", "CURRENCY", "" },
			{ "PaymentDate", "DATETIME", "" },
			{ "PaymentReference", "TEXT(25)", "string.Empty" },
			{ "PaymentAmount", "CURRENCY", "" },
			{ "ContactID", "LONG", "null" },
			{ "InvoiceLineID", "LONG", "null" },
			{ "SalesOrderLineID", "LONG", "null" },
			{ "CustomerID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoSeminarRegistrationManager()
		{
		}

		public DojoSeminarRegistrationManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoSeminarRegistrationManager.isInitialized)
			{
				DojoSeminarRegistrationManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoSeminarRegistration into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoSeminarRegistration">The DojoSeminarRegistration to insert into the database.</param>
		internal static int _insert(DojoSeminarRegistration dojoSeminarRegistration)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_SeminarRegistrations " +
				"(" +
				"Status," +
				"ParentSeminarID," +
				"RegistrationDate," +
				"ClassUnits," +
				"SessionID," +
				"SeminarFee," +
				"TotalFee," +
				"PaymentDate," +
				"PaymentReference," +
				"PaymentAmount," +
				"ContactID," +
				"InvoiceLineID," +
				"SalesOrderLineID," +
				"CustomerID) VALUES (" +
				"@Status," +
				"@ParentSeminarID," +
				"@RegistrationDate," +
				"@ClassUnits," +
				"@SessionID," +
				"@SeminarFee," +
				"@TotalFee," +
				"@PaymentDate," +
				"@PaymentReference," +
				"@PaymentAmount," +
				"@ContactID," +
				"@InvoiceLineID," +
				"@SalesOrderLineID," +
				"@CustomerID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoSeminarRegistration);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoSeminarRegistration);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoSeminarRegistration in cache.
			if(cacheEnabled) cacheStore(dojoSeminarRegistration);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoSeminarRegistration dojoSeminarRegistration)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_SeminarRegistrations SET Status=@Status," +
				"ParentSeminarID=@ParentSeminarID," +
				"RegistrationDate=@RegistrationDate," +
				"ClassUnits=@ClassUnits," +
				"SessionID=@SessionID," +
				"SeminarFee=@SeminarFee," +
				"TotalFee=@TotalFee," +
				"PaymentDate=@PaymentDate," +
				"PaymentReference=@PaymentReference," +
				"PaymentAmount=@PaymentAmount," +
				"ContactID=@ContactID," +
				"InvoiceLineID=@InvoiceLineID," +
				"SalesOrderLineID=@SalesOrderLineID," +
				"CustomerID=@CustomerID WHERE DojoSeminarRegistrationID=@DojoSeminarRegistrationID;");

			fillParameters(database, dbCommand, dojoSeminarRegistration);
			database.AddInParameter(dbCommand, "DojoSeminarRegistrationID", DbType.Int32, dojoSeminarRegistration.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoSeminarRegistration in cache.
			if (cacheEnabled) cacheStore(dojoSeminarRegistration);

			return dojoSeminarRegistration.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoSeminarRegistration dojoSeminarRegistration)
		{
			#region General

			addParameter(database, dbCommand, "@Status", DbType.Byte, dojoSeminarRegistration.status);
			if(dojoSeminarRegistration.parentSeminar == null)
			{
				addParameter(database, dbCommand, "@ParentSeminarID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ParentSeminarID", DbType.Int32, dojoSeminarRegistration.parentSeminar.ID);
			}
			addParameter(database, dbCommand, "@RegistrationDate", DbType.Date, dojoSeminarRegistration.registrationDate);
			addParameter(database, dbCommand, "@ClassUnits", DbType.Int32, dojoSeminarRegistration.classUnits);
			addParameter(database, dbCommand, "@SessionID", DbType.String, dojoSeminarRegistration.sessionID);

			#endregion

			#region Payment Details

			addParameter(database, dbCommand, "@SeminarFee", DbType.Currency, dojoSeminarRegistration.seminarFee);
			addParameter(database, dbCommand, "@TotalFee", DbType.Currency, dojoSeminarRegistration.totalFee);
			addParameter(database, dbCommand, "@PaymentDate", DbType.Date, dojoSeminarRegistration.paymentDate);
			addParameter(database, dbCommand, "@PaymentReference", DbType.String, dojoSeminarRegistration.paymentReference);
			addParameter(database, dbCommand, "@PaymentAmount", DbType.Currency, dojoSeminarRegistration.paymentAmount);

			#endregion

			#region Contact

			if(dojoSeminarRegistration.contact == null)
			{
				addParameter(database, dbCommand, "@ContactID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ContactID", DbType.Int32, dojoSeminarRegistration.contact.ID);
			}

			#endregion

			#region Rappahanock

			if(dojoSeminarRegistration.invoiceLine == null)
			{
				addParameter(database, dbCommand, "@InvoiceLineID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@InvoiceLineID", DbType.Int32, dojoSeminarRegistration.invoiceLine.ID);
			}
			if(dojoSeminarRegistration.salesOrderLine == null)
			{
				addParameter(database, dbCommand, "@SalesOrderLineID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@SalesOrderLineID", DbType.Int32, dojoSeminarRegistration.salesOrderLine.ID);
			}
			if(dojoSeminarRegistration.customer == null)
			{
				addParameter(database, dbCommand, "@CustomerID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@CustomerID", DbType.Int32, dojoSeminarRegistration.customer.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoSeminarRegistration dojoSeminarRegistration)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoSeminarRegistration.iD);
				if(cachedObject != null)
				{
					((DojoSeminarRegistration)cachedObject).CopyTo(dojoSeminarRegistration, true);
					return dojoSeminarRegistration.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_SeminarRegistrations WHERE DojoSeminarRegistrationID=");
			query.Append(dojoSeminarRegistration.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoSeminarRegistrationID '{0}'.", 
					dojoSeminarRegistration.iD)));
			}

			FillFromReader(dojoSeminarRegistration, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoSeminarRegistration in cache.
			if(cacheEnabled) cacheStore(dojoSeminarRegistration);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoSeminarRegistrationCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoSeminarRegistrationCollection GetCollection(string whereClause, string sortClause, params DojoSeminarRegistrationFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoSeminarRegistrationCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoSeminarRegistrationFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoSeminarRegistrationCollection dojoSeminarRegistrationCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoSeminarRegistration.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int parentSeminarOffset = -1;
			int parentSeminarLocationOffset = -1;
			int parentSeminarItemOffset = -1;
			int contactOffset = -1;
			int invoiceLineOffset = -1;
			int invoiceLineInvoiceOffset = -1;
			int invoiceLineItemOffset = -1;
			int invoiceLineClassOffset = -1;
			int invoiceLineTaxOffset = -1;
			int salesOrderLineOffset = -1;
			int salesOrderLineSalesOrderOffset = -1;
			int salesOrderLineItemOffset = -1;
			int salesOrderLineClassOffset = -1;
			int salesOrderLineTaxOffset = -1;
			int customerOffset = -1;
			int customerPrivateContactOffset = -1;
			int customerShippingContactOffset = -1;
			int customerBillingContactOffset = -1;
			int customerPrimaryAccountOffset = -1;
			int customerTaxOffset = -1;
			int customerUserAccountOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoSeminarRegistrationFlags.ParentSeminar:
							for(int i = 0; i <= DojoSeminarManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ParentSeminar.");
								query.Append(DojoSeminarManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentSeminarOffset = innerJoinOffset;
							innerJoinOffset = parentSeminarOffset + DojoSeminarManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.ParentSeminarLocation:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ParentSeminar_Location.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentSeminarLocationOffset = innerJoinOffset;
							innerJoinOffset = parentSeminarLocationOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.ParentSeminarItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ParentSeminar_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							parentSeminarItemOffset = innerJoinOffset;
							innerJoinOffset = parentSeminarItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.Contact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Contact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							contactOffset = innerJoinOffset;
							innerJoinOffset = contactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.InvoiceLine:
							for(int i = 0; i <= RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InvoiceLine.");
								query.Append(RHInvoiceLineManager.InnerJoinFields[i]);
								query.Append(",");
							}
							invoiceLineOffset = innerJoinOffset;
							innerJoinOffset = invoiceLineOffset + RHInvoiceLineManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.InvoiceLineInvoice:
							for(int i = 0; i <= RHInvoiceManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InvoiceLine_Invoice.");
								query.Append(RHInvoiceManager.InnerJoinFields[i]);
								query.Append(",");
							}
							invoiceLineInvoiceOffset = innerJoinOffset;
							innerJoinOffset = invoiceLineInvoiceOffset + RHInvoiceManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.InvoiceLineItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InvoiceLine_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							invoiceLineItemOffset = innerJoinOffset;
							innerJoinOffset = invoiceLineItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.InvoiceLineClass:
							for(int i = 0; i <= RHClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InvoiceLine_Class.");
								query.Append(RHClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							invoiceLineClassOffset = innerJoinOffset;
							innerJoinOffset = invoiceLineClassOffset + RHClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.InvoiceLineTax:
							for(int i = 0; i <= RHTaxTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("InvoiceLine_Tax.");
								query.Append(RHTaxTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							invoiceLineTaxOffset = innerJoinOffset;
							innerJoinOffset = invoiceLineTaxOffset + RHTaxTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.SalesOrderLine:
							for(int i = 0; i <= RHSalesOrderLineManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("SalesOrderLine.");
								query.Append(RHSalesOrderLineManager.InnerJoinFields[i]);
								query.Append(",");
							}
							salesOrderLineOffset = innerJoinOffset;
							innerJoinOffset = salesOrderLineOffset + RHSalesOrderLineManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.SalesOrderLineSalesOrder:
							for(int i = 0; i <= RHSalesOrderManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("SalesOrderLine_SalesOrder.");
								query.Append(RHSalesOrderManager.InnerJoinFields[i]);
								query.Append(",");
							}
							salesOrderLineSalesOrderOffset = innerJoinOffset;
							innerJoinOffset = salesOrderLineSalesOrderOffset + RHSalesOrderManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.SalesOrderLineItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("SalesOrderLine_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							salesOrderLineItemOffset = innerJoinOffset;
							innerJoinOffset = salesOrderLineItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.SalesOrderLineClass:
							for(int i = 0; i <= RHClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("SalesOrderLine_Class.");
								query.Append(RHClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							salesOrderLineClassOffset = innerJoinOffset;
							innerJoinOffset = salesOrderLineClassOffset + RHClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.SalesOrderLineTax:
							for(int i = 0; i <= RHTaxTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("SalesOrderLine_Tax.");
								query.Append(RHTaxTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							salesOrderLineTaxOffset = innerJoinOffset;
							innerJoinOffset = salesOrderLineTaxOffset + RHTaxTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.Customer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerOffset = innerJoinOffset;
							innerJoinOffset = customerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.CustomerPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = customerPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.CustomerShippingContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer_ShippingContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerShippingContactOffset = innerJoinOffset;
							innerJoinOffset = customerShippingContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.CustomerBillingContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer_BillingContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerBillingContactOffset = innerJoinOffset;
							innerJoinOffset = customerBillingContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.CustomerPrimaryAccount:
							for(int i = 0; i <= RHCustomerAccountManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer_PrimaryAccount.");
								query.Append(RHCustomerAccountManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerPrimaryAccountOffset = innerJoinOffset;
							innerJoinOffset = customerPrimaryAccountOffset + RHCustomerAccountManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.CustomerTax:
							for(int i = 0; i <= RHTaxTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer_Tax.");
								query.Append(RHTaxTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerTaxOffset = innerJoinOffset;
							innerJoinOffset = customerTaxOffset + RHTaxTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoSeminarRegistrationFlags.CustomerUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Customer_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							customerUserAccountOffset = innerJoinOffset;
							innerJoinOffset = customerUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_SeminarRegistrations AS DojoSeminarRegistration");
			}
			else
			{
				query.Append(" FROM kitTessen_SeminarRegistrations AS DojoSeminarRegistration");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoSeminarRegistrationFlags.ParentSeminar:
							query.Append(" LEFT JOIN kitTessen_Seminars AS ParentSeminar ON DojoSeminarRegistration.ParentSeminarID = ParentSeminar.DojoSeminarID)");
							break;
						case DojoSeminarRegistrationFlags.ParentSeminarLocation:
							query.Append(" LEFT JOIN kitTessen_Locations AS ParentSeminar_Location ON ParentSeminar.LocationID = ParentSeminar_Location.GreyFoxContactID)");
							break;
						case DojoSeminarRegistrationFlags.ParentSeminarItem:
							query.Append(" LEFT JOIN RH_Items AS ParentSeminar_Item ON ParentSeminar.ItemID = ParentSeminar_Item.RHItemID)");
							break;
						case DojoSeminarRegistrationFlags.Contact:
							query.Append(" LEFT JOIN kitTessen_SeminarRegistrations_Contacts AS Contact ON DojoSeminarRegistration.ContactID = Contact.GreyFoxContactID)");
							break;
						case DojoSeminarRegistrationFlags.InvoiceLine:
							query.Append(" LEFT JOIN RH_InvoiceLines AS InvoiceLine ON DojoSeminarRegistration.InvoiceLineID = InvoiceLine.RHInvoiceLineID)");
							break;
						case DojoSeminarRegistrationFlags.InvoiceLineInvoice:
							query.Append(" LEFT JOIN RH_Invoices AS InvoiceLine_Invoice ON InvoiceLine.InvoiceID = InvoiceLine_Invoice.RHInvoiceID)");
							break;
						case DojoSeminarRegistrationFlags.InvoiceLineItem:
							query.Append(" LEFT JOIN RH_Items AS InvoiceLine_Item ON InvoiceLine.ItemID = InvoiceLine_Item.RHItemID)");
							break;
						case DojoSeminarRegistrationFlags.InvoiceLineClass:
							query.Append(" LEFT JOIN RH_Classes AS InvoiceLine_Class ON InvoiceLine.ClassID = InvoiceLine_Class.RHClassID)");
							break;
						case DojoSeminarRegistrationFlags.InvoiceLineTax:
							query.Append(" LEFT JOIN RH_TaxTypes AS InvoiceLine_Tax ON InvoiceLine.TaxID = InvoiceLine_Tax.RHTaxTypeID)");
							break;
						case DojoSeminarRegistrationFlags.SalesOrderLine:
							query.Append(" LEFT JOIN RH_SalesOrderLines AS SalesOrderLine ON DojoSeminarRegistration.SalesOrderLineID = SalesOrderLine.RHSalesOrderLineID)");
							break;
						case DojoSeminarRegistrationFlags.SalesOrderLineSalesOrder:
							query.Append(" LEFT JOIN RH_SalesOrders AS SalesOrderLine_SalesOrder ON SalesOrderLine.SalesOrderID = SalesOrderLine_SalesOrder.RHSalesOrderID)");
							break;
						case DojoSeminarRegistrationFlags.SalesOrderLineItem:
							query.Append(" LEFT JOIN RH_Items AS SalesOrderLine_Item ON SalesOrderLine.ItemID = SalesOrderLine_Item.RHItemID)");
							break;
						case DojoSeminarRegistrationFlags.SalesOrderLineClass:
							query.Append(" LEFT JOIN RH_Classes AS SalesOrderLine_Class ON SalesOrderLine.ClassID = SalesOrderLine_Class.RHClassID)");
							break;
						case DojoSeminarRegistrationFlags.SalesOrderLineTax:
							query.Append(" LEFT JOIN RH_TaxTypes AS SalesOrderLine_Tax ON SalesOrderLine.TaxID = SalesOrderLine_Tax.RHTaxTypeID)");
							break;
						case DojoSeminarRegistrationFlags.Customer:
							query.Append(" LEFT JOIN RH_Customers AS Customer ON DojoSeminarRegistration.CustomerID = Customer.RHCustomerID)");
							break;
						case DojoSeminarRegistrationFlags.CustomerPrivateContact:
							query.Append(" LEFT JOIN RH_Customers_PriContacts AS Customer_PrivateContact ON Customer.PrivateContactID = Customer_PrivateContact.GreyFoxContactID)");
							break;
						case DojoSeminarRegistrationFlags.CustomerShippingContact:
							query.Append(" LEFT JOIN RH_Customers_ShipContacts AS Customer_ShippingContact ON Customer.ShippingContactID = Customer_ShippingContact.GreyFoxContactID)");
							break;
						case DojoSeminarRegistrationFlags.CustomerBillingContact:
							query.Append(" LEFT JOIN RH_Customers_BillContacts AS Customer_BillingContact ON Customer.BillingContactID = Customer_BillingContact.GreyFoxContactID)");
							break;
						case DojoSeminarRegistrationFlags.CustomerPrimaryAccount:
							query.Append(" LEFT JOIN RH_CustomerAccounts AS Customer_PrimaryAccount ON Customer.PrimaryAccountID = Customer_PrimaryAccount.RHCustomerAccountID)");
							break;
						case DojoSeminarRegistrationFlags.CustomerTax:
							query.Append(" LEFT JOIN RH_TaxTypes AS Customer_Tax ON Customer.TaxID = Customer_Tax.RHTaxTypeID)");
							break;
						case DojoSeminarRegistrationFlags.CustomerUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Customer_UserAccount ON Customer.UserAccountID = Customer_UserAccount.GreyFoxUserID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoSeminarRegistrationCollection = new DojoSeminarRegistrationCollection();

			while(r.Read())
			{
				DojoSeminarRegistration dojoSeminarRegistration = ParseFromReader(r, 0, 1);

				// Fill ParentSeminar
				if(parentSeminarOffset != -1 && !r.IsDBNull(parentSeminarOffset))
				{
					DojoSeminarManager.FillFromReader(dojoSeminarRegistration.parentSeminar, r, parentSeminarOffset, parentSeminarOffset+1);

					// Fill 
					if(parentSeminarLocationOffset != -1 && !r.IsDBNull(parentSeminarLocationOffset))
						GreyFoxContactManager.FillFromReader(dojoSeminarRegistration.parentSeminar.Location, "kitTessen_Locations", r, parentSeminarLocationOffset, parentSeminarLocationOffset+1);

					// Fill 
					if(parentSeminarItemOffset != -1 && !r.IsDBNull(parentSeminarItemOffset))
						RHItemManager.FillFromReader(dojoSeminarRegistration.parentSeminar.Item, r, parentSeminarItemOffset, parentSeminarItemOffset+1);

				}

				// Fill Contact
				if(contactOffset != -1 && !r.IsDBNull(contactOffset))
					GreyFoxContactManager.FillFromReader(dojoSeminarRegistration.contact, "kitTessen_SeminarRegistrations_Contacts", r, contactOffset, contactOffset+1);

				// Fill InvoiceLine
				if(invoiceLineOffset != -1 && !r.IsDBNull(invoiceLineOffset))
				{
					RHInvoiceLineManager.FillFromReader(dojoSeminarRegistration.invoiceLine, r, invoiceLineOffset, invoiceLineOffset+1);

					// Fill Invoice
					if(invoiceLineInvoiceOffset != -1 && !r.IsDBNull(invoiceLineInvoiceOffset))
						RHInvoiceManager.FillFromReader(dojoSeminarRegistration.invoiceLine.Invoice, r, invoiceLineInvoiceOffset, invoiceLineInvoiceOffset+1);

					// Fill Product
					if(invoiceLineItemOffset != -1 && !r.IsDBNull(invoiceLineItemOffset))
						RHItemManager.FillFromReader(dojoSeminarRegistration.invoiceLine.Item, r, invoiceLineItemOffset, invoiceLineItemOffset+1);

					// Fill 
					if(invoiceLineClassOffset != -1 && !r.IsDBNull(invoiceLineClassOffset))
						RHClassManager.FillFromReader(dojoSeminarRegistration.invoiceLine.Class, r, invoiceLineClassOffset, invoiceLineClassOffset+1);

					// Fill 
					if(invoiceLineTaxOffset != -1 && !r.IsDBNull(invoiceLineTaxOffset))
						RHTaxTypeManager.FillFromReader(dojoSeminarRegistration.invoiceLine.Tax, r, invoiceLineTaxOffset, invoiceLineTaxOffset+1);

				}

				// Fill SalesOrderLine
				if(salesOrderLineOffset != -1 && !r.IsDBNull(salesOrderLineOffset))
				{
					RHSalesOrderLineManager.FillFromReader(dojoSeminarRegistration.salesOrderLine, r, salesOrderLineOffset, salesOrderLineOffset+1);

					// Fill 
					if(salesOrderLineSalesOrderOffset != -1 && !r.IsDBNull(salesOrderLineSalesOrderOffset))
						RHSalesOrderManager.FillFromReader(dojoSeminarRegistration.salesOrderLine.SalesOrder, r, salesOrderLineSalesOrderOffset, salesOrderLineSalesOrderOffset+1);

					// Fill 
					if(salesOrderLineItemOffset != -1 && !r.IsDBNull(salesOrderLineItemOffset))
						RHItemManager.FillFromReader(dojoSeminarRegistration.salesOrderLine.Item, r, salesOrderLineItemOffset, salesOrderLineItemOffset+1);

					// Fill 
					if(salesOrderLineClassOffset != -1 && !r.IsDBNull(salesOrderLineClassOffset))
						RHClassManager.FillFromReader(dojoSeminarRegistration.salesOrderLine.Class, r, salesOrderLineClassOffset, salesOrderLineClassOffset+1);

					// Fill 
					if(salesOrderLineTaxOffset != -1 && !r.IsDBNull(salesOrderLineTaxOffset))
						RHTaxTypeManager.FillFromReader(dojoSeminarRegistration.salesOrderLine.Tax, r, salesOrderLineTaxOffset, salesOrderLineTaxOffset+1);

				}

				// Fill Customer
				if(customerOffset != -1 && !r.IsDBNull(customerOffset))
				{
					RHCustomerManager.FillFromReader(dojoSeminarRegistration.customer, r, customerOffset, customerOffset+1);

					// Fill Name
					if(customerPrivateContactOffset != -1 && !r.IsDBNull(customerPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoSeminarRegistration.customer.PrivateContact, "RH_Customers_PriContacts", r, customerPrivateContactOffset, customerPrivateContactOffset+1);

					// Fill 
					if(customerShippingContactOffset != -1 && !r.IsDBNull(customerShippingContactOffset))
						GreyFoxContactManager.FillFromReader(dojoSeminarRegistration.customer.ShippingContact, "RH_Customers_ShipContacts", r, customerShippingContactOffset, customerShippingContactOffset+1);

					// Fill 
					if(customerBillingContactOffset != -1 && !r.IsDBNull(customerBillingContactOffset))
						GreyFoxContactManager.FillFromReader(dojoSeminarRegistration.customer.BillingContact, "RH_Customers_BillContacts", r, customerBillingContactOffset, customerBillingContactOffset+1);

					// Fill 
					if(customerPrimaryAccountOffset != -1 && !r.IsDBNull(customerPrimaryAccountOffset))
						RHCustomerAccountManager.FillFromReader(dojoSeminarRegistration.customer.PrimaryAccount, r, customerPrimaryAccountOffset, customerPrimaryAccountOffset+1);

					// Fill 
					if(customerTaxOffset != -1 && !r.IsDBNull(customerTaxOffset))
						RHTaxTypeManager.FillFromReader(dojoSeminarRegistration.customer.Tax, r, customerTaxOffset, customerTaxOffset+1);

					// Fill 
					if(customerUserAccountOffset != -1 && !r.IsDBNull(customerUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoSeminarRegistration.customer.UserAccount, r, customerUserAccountOffset, customerUserAccountOffset+1);

				}

				dojoSeminarRegistrationCollection.Add(dojoSeminarRegistration);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoSeminarRegistrationCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoSeminarRegistration ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoSeminarRegistration dojoSeminarRegistration = new DojoSeminarRegistration();
			FillFromReader(dojoSeminarRegistration, r, idOffset, dataOffset);
			return dojoSeminarRegistration;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoSeminarRegistration dojoSeminarRegistration, IDataReader r, int idOffset, int dataOffset)
		{
			dojoSeminarRegistration.iD = r.GetInt32(idOffset);
			dojoSeminarRegistration.isSynced = true;
			dojoSeminarRegistration.isPlaceHolder = false;

			dojoSeminarRegistration.status = r.GetByte(0+dataOffset);
			if(!r.IsDBNull(1+dataOffset) && r.GetInt32(1+dataOffset) > 0)
			{
				dojoSeminarRegistration.parentSeminar = DojoSeminar.NewPlaceHolder(r.GetInt32(1+dataOffset));
			}
			if(!r.IsDBNull(2+dataOffset)) 
				dojoSeminarRegistration.registrationDate = r.GetDateTime(2+dataOffset);
			else
				dojoSeminarRegistration.registrationDate = DateTime.MinValue;
			dojoSeminarRegistration.classUnits = r.GetInt32(3+dataOffset);
			dojoSeminarRegistration.sessionID = r.GetString(4+dataOffset);
			dojoSeminarRegistration.seminarFee = r.GetDecimal(5+dataOffset);
			dojoSeminarRegistration.totalFee = r.GetDecimal(6+dataOffset);
			if(!r.IsDBNull(7+dataOffset)) 
				dojoSeminarRegistration.paymentDate = r.GetDateTime(7+dataOffset);
			else
				dojoSeminarRegistration.paymentDate = DateTime.MinValue;
			if(!r.IsDBNull(8+dataOffset)) 
				dojoSeminarRegistration.paymentReference = r.GetString(8+dataOffset);
			else
				dojoSeminarRegistration.paymentReference = string.Empty;
			dojoSeminarRegistration.paymentAmount = r.GetDecimal(9+dataOffset);
			if(!r.IsDBNull(10+dataOffset) && r.GetInt32(10+dataOffset) > 0)
			{
				dojoSeminarRegistration.contact = GreyFoxContact.NewPlaceHolder("kitTessen_SeminarRegistrations_Contacts", r.GetInt32(10+dataOffset));
			}
			if(!r.IsDBNull(11+dataOffset) && r.GetInt32(11+dataOffset) > 0)
			{
				dojoSeminarRegistration.invoiceLine = RHInvoiceLine.NewPlaceHolder(r.GetInt32(11+dataOffset));
			}
			if(!r.IsDBNull(12+dataOffset) && r.GetInt32(12+dataOffset) > 0)
			{
				dojoSeminarRegistration.salesOrderLine = RHSalesOrderLine.NewPlaceHolder(r.GetInt32(12+dataOffset));
			}
			if(!r.IsDBNull(13+dataOffset) && r.GetInt32(13+dataOffset) > 0)
			{
				dojoSeminarRegistration.customer = RHCustomer.NewPlaceHolder(r.GetInt32(13+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_SeminarRegistrations WHERE DojoSeminarRegistrationID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			GreyFoxContactManager contactManager = 
				new GreyFoxContactManager("kitTessen_SeminarRegistrations_Contacts");
			msg.Append(contactManager.VerifyTable(repair));

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_SeminarRegistrations ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_SeminarRegistrations_ParentSeminar FOREIGN KEY (ParentSeminarID) REFERENCES kitTessen_Seminars (DojoSeminarID),");
			query.Append(" CONSTRAINT FK_kitTessen_SeminarRegistrations_Contact FOREIGN KEY (ContactID) REFERENCES kitTessen_SeminarRegistrations_Contacts (GreyFoxContactID),");
			query.Append(" CONSTRAINT FK_kitTessen_SeminarRegistrations_InvoiceLine FOREIGN KEY (InvoiceLineID) REFERENCES RH_InvoiceLines (RHInvoiceLineID),");
			query.Append(" CONSTRAINT FK_kitTessen_SeminarRegistrations_SalesOrderLine FOREIGN KEY (SalesOrderLineID) REFERENCES RH_SalesOrderLines (RHSalesOrderLineID),");
			query.Append(" CONSTRAINT FK_kitTessen_SeminarRegistrations_Customer FOREIGN KEY (CustomerID) REFERENCES RH_Customers (RHCustomerID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_SeminarRegistrations ");
				query.Append(" (DojoSeminarRegistrationID COUNTER(1,1) CONSTRAINT PK_kitTessen_SeminarRegistrations PRIMARY KEY, " +
					"Status BYTE," +
					"ParentSeminarID LONG," +
					"RegistrationDate DATETIME," +
					"ClassUnits LONG," +
					"SessionID TEXT(20)," +
					"SeminarFee CURRENCY," +
					"TotalFee CURRENCY," +
					"PaymentDate DATETIME," +
					"PaymentReference TEXT(25)," +
					"PaymentAmount CURRENCY," +
					"ContactID LONG," +
					"InvoiceLineID LONG," +
					"SalesOrderLineID LONG," +
					"CustomerID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_SeminarRegistrations ");
				query.Append(" (DojoSeminarRegistrationID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_SeminarRegistrations PRIMARY KEY, " +
					"Status TINYINT," +
					"ParentSeminarID INT," +
					"RegistrationDate DATETIME," +
					"ClassUnits INT," +
					"SessionID NVARCHAR(20)," +
					"SeminarFee MONEY," +
					"TotalFee MONEY," +
					"PaymentDate DATETIME," +
					"PaymentReference NVARCHAR(25)," +
					"PaymentAmount MONEY," +
					"ContactID INT," +
					"InvoiceLineID INT," +
					"SalesOrderLineID INT," +
					"CustomerID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			//
			// Create object level table for Contact.
			//
			GreyFoxContactManager contactManager = new GreyFoxContactManager("kitTessen_SeminarRegistrations_Contacts");
			contactManager.CreateTable();

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoSeminarRegistration dojoSeminarRegistration)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_SeminarRegistrations_" + dojoSeminarRegistration.iD.ToString(), dojoSeminarRegistration);
		}

		private static DojoSeminarRegistration cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_SeminarRegistrations_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoSeminarRegistration)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_SeminarRegistrations_" + id.ToString());
		}

		#endregion

		//--- Begin Custom Code ---

		//--- End Custom Code ---
	}
}

