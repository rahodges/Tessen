/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoTestListStatusFlags : int { OnFinalized,
				OnFinalizedOnFinalized,
				OnFinalizedOnCompleted,
				OnCompleted,
				OnCompletedOnFinalized,
				OnCompletedOnCompleted};

	#endregion

	/// <summary>
	/// Datamanager for DojoTestListStatus objects.
	/// </summary>
	public class DojoTestListStatusManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_DojoTestListStatuses";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoTestListStatusID",
			"Name",
			"Description",
			"OrderNum",
			"IsDraft",
			"IsFinal",
			"IsComplete",
			"TeacherEditingEnabled",
			"OnFinalizedID",
			"OnCompletedID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoTestListStatusID", "LONG", "-1" },
			{ "Name", "TEXT(75)", "" },
			{ "Description", "TEXT(255)", "" },
			{ "OrderNum", "LONG", "" },
			{ "IsDraft", "BIT", "" },
			{ "IsFinal", "BIT", "" },
			{ "IsComplete", "BIT", "" },
			{ "TeacherEditingEnabled", "BIT", "" },
			{ "OnFinalizedID", "LONG", "null" },
			{ "OnCompletedID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoTestListStatusManager()
		{
		}

		public DojoTestListStatusManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoTestListStatusManager.isInitialized)
			{
				DojoTestListStatusManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoTestListStatus into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoTestListStatus">The DojoTestListStatus to insert into the database.</param>
		internal static int _insert(DojoTestListStatus dojoTestListStatus)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_DojoTestListStatuses " +
				"(" +
				"Name," +
				"Description," +
				"OrderNum," +
				"IsDraft," +
				"IsFinal," +
				"IsComplete," +
				"TeacherEditingEnabled," +
				"OnFinalizedID," +
				"OnCompletedID) VALUES (" +
				"@Name," +
				"@Description," +
				"@OrderNum," +
				"@IsDraft," +
				"@IsFinal," +
				"@IsComplete," +
				"@TeacherEditingEnabled," +
				"@OnFinalizedID," +
				"@OnCompletedID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoTestListStatus);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoTestListStatus);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoTestListStatus in cache.
			if(cacheEnabled) cacheStore(dojoTestListStatus);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoTestListStatus dojoTestListStatus)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_DojoTestListStatuses SET Name=@Name," +
				"Description=@Description," +
				"OrderNum=@OrderNum," +
				"IsDraft=@IsDraft," +
				"IsFinal=@IsFinal," +
				"IsComplete=@IsComplete," +
				"TeacherEditingEnabled=@TeacherEditingEnabled," +
				"OnFinalizedID=@OnFinalizedID," +
				"OnCompletedID=@OnCompletedID WHERE DojoTestListStatusID=@DojoTestListStatusID;");

			fillParameters(database, dbCommand, dojoTestListStatus);
			database.AddInParameter(dbCommand, "DojoTestListStatusID", DbType.Int32, dojoTestListStatus.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoTestListStatus in cache.
			if (cacheEnabled) cacheStore(dojoTestListStatus);

			return dojoTestListStatus.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoTestListStatus dojoTestListStatus)
		{
			#region General

			addParameter(database, dbCommand, "@Name", DbType.String, dojoTestListStatus.name);
			addParameter(database, dbCommand, "@Description", DbType.String, dojoTestListStatus.description);
			addParameter(database, dbCommand, "@OrderNum", DbType.Int32, dojoTestListStatus.orderNum);

			#endregion

			#region Flags

			addParameter(database, dbCommand, "@IsDraft", DbType.Boolean, dojoTestListStatus.isDraft);
			addParameter(database, dbCommand, "@IsFinal", DbType.Boolean, dojoTestListStatus.isFinal);
			addParameter(database, dbCommand, "@IsComplete", DbType.Boolean, dojoTestListStatus.isComplete);
			addParameter(database, dbCommand, "@TeacherEditingEnabled", DbType.Boolean, dojoTestListStatus.teacherEditingEnabled);

			#endregion

			#region Status Changes

			if(dojoTestListStatus.onFinalized == null)
			{
				addParameter(database, dbCommand, "@OnFinalizedID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@OnFinalizedID", DbType.Int32, dojoTestListStatus.onFinalized.ID);
			}
			if(dojoTestListStatus.onCompleted == null)
			{
				addParameter(database, dbCommand, "@OnCompletedID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@OnCompletedID", DbType.Int32, dojoTestListStatus.onCompleted.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoTestListStatus dojoTestListStatus)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoTestListStatus.iD);
				if(cachedObject != null)
				{
					((DojoTestListStatus)cachedObject).CopyTo(dojoTestListStatus, true);
					return dojoTestListStatus.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_DojoTestListStatuses WHERE DojoTestListStatusID=");
			query.Append(dojoTestListStatus.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoTestListStatusID '{0}'.", 
					dojoTestListStatus.iD)));
			}

			FillFromReader(dojoTestListStatus, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoTestListStatus in cache.
			if(cacheEnabled) cacheStore(dojoTestListStatus);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoTestListStatusCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoTestListStatusCollection GetCollection(string whereClause, string sortClause, params DojoTestListStatusFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoTestListStatusCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoTestListStatusFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoTestListStatusCollection dojoTestListStatusCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoTestListStatus.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int onFinalizedOffset = -1;
			int onFinalizedOnFinalizedOffset = -1;
			int onFinalizedOnCompletedOffset = -1;
			int onCompletedOffset = -1;
			int onCompletedOnFinalizedOffset = -1;
			int onCompletedOnCompletedOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoTestListStatusFlags.OnFinalized:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnFinalized.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onFinalizedOffset = innerJoinOffset;
							innerJoinOffset = onFinalizedOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListStatusFlags.OnFinalizedOnFinalized:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnFinalized_OnFinalized.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onFinalizedOnFinalizedOffset = innerJoinOffset;
							innerJoinOffset = onFinalizedOnFinalizedOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListStatusFlags.OnFinalizedOnCompleted:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnFinalized_OnCompleted.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onFinalizedOnCompletedOffset = innerJoinOffset;
							innerJoinOffset = onFinalizedOnCompletedOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListStatusFlags.OnCompleted:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCompleted.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCompletedOffset = innerJoinOffset;
							innerJoinOffset = onCompletedOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListStatusFlags.OnCompletedOnFinalized:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCompleted_OnFinalized.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCompletedOnFinalizedOffset = innerJoinOffset;
							innerJoinOffset = onCompletedOnFinalizedOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListStatusFlags.OnCompletedOnCompleted:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCompleted_OnCompleted.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCompletedOnCompletedOffset = innerJoinOffset;
							innerJoinOffset = onCompletedOnCompletedOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_DojoTestListStatuses AS DojoTestListStatus");
			}
			else
			{
				query.Append(" FROM kitTessen_DojoTestListStatuses AS DojoTestListStatus");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoTestListStatusFlags.OnFinalized:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS OnFinalized ON DojoTestListStatus.OnFinalizedID = OnFinalized.DojoTestListStatusID)");
							break;
						case DojoTestListStatusFlags.OnFinalizedOnFinalized:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS OnFinalized_OnFinalized ON OnFinalized.OnFinalizedID = OnFinalized_OnFinalized.DojoTestListStatusID)");
							break;
						case DojoTestListStatusFlags.OnFinalizedOnCompleted:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS OnFinalized_OnCompleted ON OnFinalized.OnCompletedID = OnFinalized_OnCompleted.DojoTestListStatusID)");
							break;
						case DojoTestListStatusFlags.OnCompleted:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS OnCompleted ON DojoTestListStatus.OnCompletedID = OnCompleted.DojoTestListStatusID)");
							break;
						case DojoTestListStatusFlags.OnCompletedOnFinalized:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS OnCompleted_OnFinalized ON OnCompleted.OnFinalizedID = OnCompleted_OnFinalized.DojoTestListStatusID)");
							break;
						case DojoTestListStatusFlags.OnCompletedOnCompleted:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS OnCompleted_OnCompleted ON OnCompleted.OnCompletedID = OnCompleted_OnCompleted.DojoTestListStatusID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoTestListStatusCollection = new DojoTestListStatusCollection();

			while(r.Read())
			{
				DojoTestListStatus dojoTestListStatus = ParseFromReader(r, 0, 1);

				// Fill OnFinalized
				if(onFinalizedOffset != -1 && !r.IsDBNull(onFinalizedOffset))
				{
					DojoTestListStatusManager.FillFromReader(dojoTestListStatus.onFinalized, r, onFinalizedOffset, onFinalizedOffset+1);

					// Fill 
					if(onFinalizedOnFinalizedOffset != -1 && !r.IsDBNull(onFinalizedOnFinalizedOffset))
						DojoTestListStatusManager.FillFromReader(dojoTestListStatus.onFinalized.OnFinalized, r, onFinalizedOnFinalizedOffset, onFinalizedOnFinalizedOffset+1);

					// Fill 
					if(onFinalizedOnCompletedOffset != -1 && !r.IsDBNull(onFinalizedOnCompletedOffset))
						DojoTestListStatusManager.FillFromReader(dojoTestListStatus.onFinalized.OnCompleted, r, onFinalizedOnCompletedOffset, onFinalizedOnCompletedOffset+1);

				}

				// Fill OnCompleted
				if(onCompletedOffset != -1 && !r.IsDBNull(onCompletedOffset))
				{
					DojoTestListStatusManager.FillFromReader(dojoTestListStatus.onCompleted, r, onCompletedOffset, onCompletedOffset+1);

					// Fill 
					if(onCompletedOnFinalizedOffset != -1 && !r.IsDBNull(onCompletedOnFinalizedOffset))
						DojoTestListStatusManager.FillFromReader(dojoTestListStatus.onCompleted.OnFinalized, r, onCompletedOnFinalizedOffset, onCompletedOnFinalizedOffset+1);

					// Fill 
					if(onCompletedOnCompletedOffset != -1 && !r.IsDBNull(onCompletedOnCompletedOffset))
						DojoTestListStatusManager.FillFromReader(dojoTestListStatus.onCompleted.OnCompleted, r, onCompletedOnCompletedOffset, onCompletedOnCompletedOffset+1);

				}

				dojoTestListStatusCollection.Add(dojoTestListStatus);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoTestListStatusCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoTestListStatus ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoTestListStatus dojoTestListStatus = new DojoTestListStatus();
			FillFromReader(dojoTestListStatus, r, idOffset, dataOffset);
			return dojoTestListStatus;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoTestListStatus dojoTestListStatus, IDataReader r, int idOffset, int dataOffset)
		{
			dojoTestListStatus.iD = r.GetInt32(idOffset);
			dojoTestListStatus.isSynced = true;
			dojoTestListStatus.isPlaceHolder = false;

			dojoTestListStatus.name = r.GetString(0+dataOffset);
			dojoTestListStatus.description = r.GetString(1+dataOffset);
			dojoTestListStatus.orderNum = r.GetInt32(2+dataOffset);
			dojoTestListStatus.isDraft = r.GetBoolean(3+dataOffset);
			dojoTestListStatus.isFinal = r.GetBoolean(4+dataOffset);
			dojoTestListStatus.isComplete = r.GetBoolean(5+dataOffset);
			dojoTestListStatus.teacherEditingEnabled = r.GetBoolean(6+dataOffset);
			if(!r.IsDBNull(7+dataOffset) && r.GetInt32(7+dataOffset) > 0)
			{
				dojoTestListStatus.onFinalized = DojoTestListStatus.NewPlaceHolder(r.GetInt32(7+dataOffset));
			}
			if(!r.IsDBNull(8+dataOffset) && r.GetInt32(8+dataOffset) > 0)
			{
				dojoTestListStatus.onCompleted = DojoTestListStatus.NewPlaceHolder(r.GetInt32(8+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_DojoTestListStatuses WHERE DojoTestListStatusID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_DojoTestListStatuses ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_DojoTestListStatuses_OnFinalized FOREIGN KEY (OnFinalizedID) REFERENCES kitTessen_DojoTestListStatuses (DojoTestListStatusID),");
			query.Append(" CONSTRAINT FK_kitTessen_DojoTestListStatuses_OnCompleted FOREIGN KEY (OnCompletedID) REFERENCES kitTessen_DojoTestListStatuses (DojoTestListStatusID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_DojoTestListStatuses ");
				query.Append(" (DojoTestListStatusID COUNTER(1,1) CONSTRAINT PK_kitTessen_DojoTestListStatuses PRIMARY KEY, " +
					"Name TEXT(75)," +
					"Description TEXT(255)," +
					"OrderNum LONG," +
					"IsDraft BIT," +
					"IsFinal BIT," +
					"IsComplete BIT," +
					"TeacherEditingEnabled BIT," +
					"OnFinalizedID LONG," +
					"OnCompletedID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_DojoTestListStatuses ");
				query.Append(" (DojoTestListStatusID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_DojoTestListStatuses PRIMARY KEY, " +
					"Name NVARCHAR(75)," +
					"Description NVARCHAR(255)," +
					"OrderNum INT," +
					"IsDraft BIT," +
					"IsFinal BIT," +
					"IsComplete BIT," +
					"TeacherEditingEnabled BIT," +
					"OnFinalizedID INT," +
					"OnCompletedID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoTestListStatus dojoTestListStatus)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_DojoTestListStatuses_" + dojoTestListStatus.iD.ToString(), dojoTestListStatus);
		}

		private static DojoTestListStatus cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_DojoTestListStatuses_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoTestListStatus)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_DojoTestListStatuses_" + id.ToString());
		}

		#endregion

	}
}

