/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using Amns.GreyFox.People;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	/// <summary>
	/// Seminar Registration
	/// </summary>
	public class DojoSeminarRegistration : ICloneable, IComparable, Amns.Rappahanock.IRHLineExtension
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal byte status;
		internal DojoSeminar parentSeminar;
		internal DateTime registrationDate;
		internal int classUnits;
		internal string sessionID;
		internal decimal seminarFee;
		internal decimal totalFee;
		internal DateTime paymentDate;
		internal string paymentReference;
		internal decimal paymentAmount;
		internal GreyFoxContact contact;
		internal RHInvoiceLine invoiceLine;
		internal RHSalesOrderLine salesOrderLine;
		internal RHCustomer customer;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoSeminarRegistration Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoSeminarRegistration as a Placeholder. Placeholders only contain 
		/// a DojoSeminarRegistration ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// Status of registration.
		/// </summary>
		public byte Status
		{
			get
			{
				EnsurePreLoad();
				return status;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= status == value;
				status = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoSeminar ParentSeminar
		{
			get
			{
				EnsurePreLoad();
				return parentSeminar;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(parentSeminar == null)
					{
						return;
					}
					else
					{
						parentSeminar = value;
						isSynced = false;
					}
				}
				else
				{
					if(parentSeminar != null && value.ID == parentSeminar.ID)
					{
						return; 
					}
					else
					{
						parentSeminar = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DateTime RegistrationDate
		{
			get
			{
				EnsurePreLoad();
				return registrationDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= registrationDate == value;
				registrationDate = value;
			}
		}

		/// <summary>
		/// Class unit quantity specified by the registrant.
		/// </summary>
		public int ClassUnits
		{
			get
			{
				EnsurePreLoad();
				return classUnits;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= classUnits == value;
				classUnits = value;
			}
		}

		/// <summary>
		/// Used to store the session ID for the Registration to prevent exploits.
		/// </summary>
		public string SessionID
		{
			get
			{
				EnsurePreLoad();
				return sessionID;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= sessionID == value;
				sessionID = value;
			}
		}

		/// <summary>
		/// Seminar Fee (without Options)
		/// </summary>
		public decimal SeminarFee
		{
			get
			{
				EnsurePreLoad();
				return seminarFee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= seminarFee == value;
				seminarFee = value;
			}
		}

		/// <summary>
		/// Total Registration Fee with Options
		/// </summary>
		public decimal TotalFee
		{
			get
			{
				EnsurePreLoad();
				return totalFee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= totalFee == value;
				totalFee = value;
			}
		}

		/// <summary>
		/// Date full payment was made.
		/// </summary>
		public DateTime PaymentDate
		{
			get
			{
				EnsurePreLoad();
				return paymentDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= paymentDate == value;
				paymentDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public string PaymentReference
		{
			get
			{
				EnsurePreLoad();
				return paymentReference;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= paymentReference == value;
				paymentReference = value;
			}
		}

		/// <summary>
		/// Amount of registration fee paid.
		/// </summary>
		public decimal PaymentAmount
		{
			get
			{
				EnsurePreLoad();
				return paymentAmount;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= paymentAmount == value;
				paymentAmount = value;
			}
		}

		/// <summary>
		/// </summary>
		public GreyFoxContact Contact
		{
			get
			{
				EnsurePreLoad();
				return contact;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(contact == null)
					{
						return;
					}
					else
					{
						contact = value;
						isSynced = false;
					}
				}
				else
				{
					if(value.TableName != "kitTessen_SeminarRegistrations_Contacts") throw(new Exception("Cannot set Contact. Table names mismatched."));
					if(contact != null && value.ID == contact.ID)
					{
						return; 
					}
					else
					{
						contact = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// The associated invoice in Rappahanock.
		/// </summary>
		public RHInvoiceLine InvoiceLine
		{
			get
			{
				EnsurePreLoad();
				return invoiceLine;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(invoiceLine == null)
					{
						return;
					}
					else
					{
						invoiceLine = value;
						isSynced = false;
					}
				}
				else
				{
					if(invoiceLine != null && value.ID == invoiceLine.ID)
					{
						return; 
					}
					else
					{
						invoiceLine = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// If Rappahanock is enabled, the registrants will be handled by Rappahanock 
		/// rather than Tessen.
		/// </summary>
		public RHSalesOrderLine SalesOrderLine
		{
			get
			{
				EnsurePreLoad();
				return salesOrderLine;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(salesOrderLine == null)
					{
						return;
					}
					else
					{
						salesOrderLine = value;
						isSynced = false;
					}
				}
				else
				{
					if(salesOrderLine != null && value.ID == salesOrderLine.ID)
					{
						return; 
					}
					else
					{
						salesOrderLine = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// If Rappahanock is enabled, the registrants will be handled by Rappahanock 
		/// rather than Tessen.
		/// </summary>
		public RHCustomer Customer
		{
			get
			{
				EnsurePreLoad();
				return customer;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(customer == null)
					{
						return;
					}
					else
					{
						customer = value;
						isSynced = false;
					}
				}
				else
				{
					if(customer != null && value.ID == customer.ID)
					{
						return; 
					}
					else
					{
						customer = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoSeminarRegistration.
		/// </summary>
		public DojoSeminarRegistration()
		{
			paymentReference = string.Empty;
		}

		public DojoSeminarRegistration(int id)
		{
			this.iD = id;
			isSynced = DojoSeminarRegistrationManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoSeminarRegistrationManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoSeminarRegistration object state to the database.
		/// </summary>
		public int Save()
		{
			if(parentSeminar != null)
				parentSeminar.Save();
			if(contact != null)
				contact.Save();

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoSeminarRegistrationManager._insert(this);
			else
				DojoSeminarRegistrationManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoSeminarRegistrationManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoSeminarRegistration object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoSeminarRegistration object reflecting the replicated DojoSeminarRegistration object.</returns>
		public DojoSeminarRegistration Duplicate()
		{
			DojoSeminarRegistration clonedDojoSeminarRegistration = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoSeminarRegistration.iD = DojoSeminarRegistrationManager._insert(clonedDojoSeminarRegistration);
			clonedDojoSeminarRegistration.isSynced = true;
			return clonedDojoSeminarRegistration;
		}

		/// <summary>
		/// Overwrites and existing DojoSeminarRegistration object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoSeminarRegistrationManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoSeminarRegistration object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoSeminarRegistration object reflecting the replicated DojoSeminarRegistration object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoSeminarRegistration object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoSeminarRegistration object reflecting the replicated DojoSeminarRegistration object.</returns>
		public DojoSeminarRegistration Clone()
		{
			DojoSeminarRegistration clonedDojoSeminarRegistration = new DojoSeminarRegistration();
			clonedDojoSeminarRegistration.iD = iD;
			clonedDojoSeminarRegistration.isSynced = isSynced;
			clonedDojoSeminarRegistration.status = status;
			clonedDojoSeminarRegistration.registrationDate = registrationDate;
			clonedDojoSeminarRegistration.classUnits = classUnits;
			clonedDojoSeminarRegistration.sessionID = sessionID;
			clonedDojoSeminarRegistration.seminarFee = seminarFee;
			clonedDojoSeminarRegistration.totalFee = totalFee;
			clonedDojoSeminarRegistration.paymentDate = paymentDate;
			clonedDojoSeminarRegistration.paymentReference = paymentReference;
			clonedDojoSeminarRegistration.paymentAmount = paymentAmount;


			if(parentSeminar != null)
				clonedDojoSeminarRegistration.parentSeminar = parentSeminar;

			if(contact != null)
				clonedDojoSeminarRegistration.contact = contact;

			if(invoiceLine != null)
				clonedDojoSeminarRegistration.invoiceLine = invoiceLine;

			if(salesOrderLine != null)
				clonedDojoSeminarRegistration.salesOrderLine = salesOrderLine;

			if(customer != null)
				clonedDojoSeminarRegistration.customer = customer;

			return clonedDojoSeminarRegistration;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoSeminarRegistration.
		/// </summary>
		/// <returns> A new DojoSeminarRegistration object reflecting the cloned DojoSeminarRegistration object.</returns>
		public DojoSeminarRegistration Copy()
		{
			DojoSeminarRegistration dojoSeminarRegistration = new DojoSeminarRegistration();
			CopyTo(dojoSeminarRegistration);
			return dojoSeminarRegistration;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoSeminarRegistration.
		/// </summary>
		/// <returns> A new DojoSeminarRegistration object reflecting the cloned DojoSeminarRegistration object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoSeminarRegistration from its children.</param>
		public DojoSeminarRegistration Copy(bool isolation)
		{
			DojoSeminarRegistration dojoSeminarRegistration = new DojoSeminarRegistration();
			CopyTo(dojoSeminarRegistration, isolation);
			return dojoSeminarRegistration;
		}

		/// <summary>
		/// Deep copies the current DojoSeminarRegistration to another instance of DojoSeminarRegistration.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoSeminarRegistration">The DojoSeminarRegistration to copy to.</param>
		public void CopyTo(DojoSeminarRegistration dojoSeminarRegistration)
		{
			CopyTo(dojoSeminarRegistration, false);
		}

		/// <summary>
		/// Deep copies the current DojoSeminarRegistration to another instance of DojoSeminarRegistration.
		/// </summary>
		/// <param name="DojoSeminarRegistration">The DojoSeminarRegistration to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoSeminarRegistration from its children.</param>
		public void CopyTo(DojoSeminarRegistration dojoSeminarRegistration, bool isolation)
		{
			dojoSeminarRegistration.iD = iD;
			dojoSeminarRegistration.isPlaceHolder = isPlaceHolder;
			dojoSeminarRegistration.isSynced = isSynced;
			dojoSeminarRegistration.status = status;
			if(parentSeminar != null)
			{
				if(isolation)
				{
					dojoSeminarRegistration.parentSeminar = parentSeminar.NewPlaceHolder();
				}
				else
				{
					dojoSeminarRegistration.parentSeminar = parentSeminar.Copy(false);
				}
			}
			dojoSeminarRegistration.registrationDate = registrationDate;
			dojoSeminarRegistration.classUnits = classUnits;
			dojoSeminarRegistration.sessionID = sessionID;
			dojoSeminarRegistration.seminarFee = seminarFee;
			dojoSeminarRegistration.totalFee = totalFee;
			dojoSeminarRegistration.paymentDate = paymentDate;
			dojoSeminarRegistration.paymentReference = paymentReference;
			dojoSeminarRegistration.paymentAmount = paymentAmount;
			if(contact != null)
			{
				if(isolation)
				{
					dojoSeminarRegistration.contact = contact.NewPlaceHolder();
				}
				else
				{
					dojoSeminarRegistration.contact = contact.Copy(false);
				}
			}
			if(invoiceLine != null)
			{
				if(isolation)
				{
					dojoSeminarRegistration.invoiceLine = invoiceLine.NewPlaceHolder();
				}
				else
				{
					dojoSeminarRegistration.invoiceLine = invoiceLine.Copy(false);
				}
			}
			if(salesOrderLine != null)
			{
				if(isolation)
				{
					dojoSeminarRegistration.salesOrderLine = salesOrderLine.NewPlaceHolder();
				}
				else
				{
					dojoSeminarRegistration.salesOrderLine = salesOrderLine.Copy(false);
				}
			}
			if(customer != null)
			{
				if(isolation)
				{
					dojoSeminarRegistration.customer = customer.NewPlaceHolder();
				}
				else
				{
					dojoSeminarRegistration.customer = customer.Copy(false);
				}
			}
		}

		public DojoSeminarRegistration NewPlaceHolder()
		{
			DojoSeminarRegistration dojoSeminarRegistration = new DojoSeminarRegistration();
			dojoSeminarRegistration.iD = iD;
			dojoSeminarRegistration.isPlaceHolder = true;
			dojoSeminarRegistration.isSynced = true;
			return dojoSeminarRegistration;
		}

		public static DojoSeminarRegistration NewPlaceHolder(int iD)
		{
			DojoSeminarRegistration dojoSeminarRegistration = new DojoSeminarRegistration();
			dojoSeminarRegistration.iD = iD;
			dojoSeminarRegistration.isPlaceHolder = true;
			dojoSeminarRegistration.isSynced = true;
			return dojoSeminarRegistration;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoSeminarRegistration dojoSeminarRegistration = (DojoSeminarRegistration) obj;
			return this.iD - dojoSeminarRegistration.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoSeminarRegistration dojoSeminarRegistration)
		{
			return this.iD - dojoSeminarRegistration.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---

        #region Calculate Fee Methods

        /// <summary>
        /// Readonly rate for Rappahanock support.
        /// </summary>
        public Decimal Rate { get { return SeminarFee; } }

        /// <summary>
        /// Readonly quantity for Rappahanock support.
        /// </summary>
        public Decimal Quantity { get { return 1; } }

        /// <summary>
        /// Payment method for Rappahanock support.
        /// </summary>
        /// <param name="amount"></param>
        public void ApplyAmount(decimal amount)
        {
            PaymentAmount = amount;
        }

        /// <summary>
        /// Payment method for Rappahanock support.
        /// </summary>
        public void PayAmount()
        {
            PaymentAmount = TotalFee;
        }

        public bool LineExpired
        {
            get
            {
                // Return true if the registration's create date
                // and current date are not in the same block. For
                // example, if the registration was created in the
                // early bird block and the date now is beyond the
                // early bird date... the registration is expired.
                // ALL TIMES SHOULD ALREADY BE IN UTC!

                DojoSeminar seminar = ParentSeminar;

                if (!seminar.RegistrationEnabled)
                    return true;

                if (RegistrationDate < seminar.EarlyEndDate &&
                    DateTime.Now.ToUniversalTime() >= seminar.EarlyEndDate)
                    return true;

                if (RegistrationDate < seminar.LateStartDate &&
                    DateTime.Now.ToUniversalTime() >= seminar.LateStartDate)
                    return true;

                if (RegistrationDate < seminar.RegistrationEnd &&
                    DateTime.Now.ToUniversalTime() >= seminar.RegistrationEnd)
                    return true;

                return false;
            }
        }

        public bool LineCartSaveDisabled { get { return false; } }

        /// <summary>
        /// Builds a Sales Order Description for Rappahanock Sales Orders and Invoices.
        /// </summary>
        public string ToSalesOrderDescription()
        {
            System.Text.StringBuilder s = new System.Text.StringBuilder();
            s.AppendFormat(Localization.Strings.SemDescOrderLine_Head,
                parentSeminar.Name,
                registrationDate,
                parentSeminar.startDate,
                parentSeminar.endDate);

            s.Append("\r\n");

            if (registrationDate < parentSeminar.earlyEndDate &
                seminarFee == parentSeminar.FullEarlyRegistrationFee)
            {
                s.Append(Localization.Strings.FullEarlyRegistration);
            }
            else if (registrationDate < parentSeminar.lateStartDate &
                seminarFee == parentSeminar.FullRegistrationFee)
            {
                s.Append(Localization.Strings.FullRegistration);
            }
            else if (registrationDate >= parentSeminar.lateStartDate &
                seminarFee == parentSeminar.FullLateRegistrationFee)
            {
                s.Append(Localization.Strings.FullLateRegistration);
            }
            else
            {
                switch (parentSeminar.ClassUnitType)
                {
                    case DojoSeminarClassUnitType.Day:
                        s.AppendFormat(Localization.Strings.SemDescOrderLine_Units,
                            classUnits,
                            classUnits == 1 ? Localization.Strings.DayUnit_Singular :
                            Localization.Strings.DayUnit_Plural,
                            parentSeminar.classUnitFee,
                            Localization.Strings.DayUnit_Singular);
                        break;
                    case DojoSeminarClassUnitType.Class:
                        s.AppendFormat(Localization.Strings.SemDescOrderLine_Units,
                            classUnits,
                            classUnits == 1 ? Localization.Strings.ClassUnit_Singular :
                            Localization.Strings.ClassUnit_Plural,
                            parentSeminar.classUnitFee,
                            Localization.Strings.ClassUnit_Singular);
                        break;
                    case DojoSeminarClassUnitType.None:
                        break;
                }
            }

            s.Append("\r\n");

            if (contact != null)
            {
                s.AppendFormat(Localization.Strings.SemDescOrderLine_For,
                    contact.FullName);
            }

            s.Append("\r\n");

            s.AppendFormat(Localization.Strings.SemDescOrderLine_Date,
                registrationDate);

            return s.ToString();
        }

        public DojoSeminarRegistrationOptionCollection GetOptions()
        {
            DojoSeminarRegistrationOptionManager manager =
                new DojoSeminarRegistrationOptionManager();
            return manager.GetCollection("ParentRegistrationID=" +
                this.ID.ToString(), string.Empty,
                DojoSeminarRegistrationOptionFlags.ParentOption);
        }

        public decimal CalculateFee(DojoSeminarRegistrationOptionCollection options)
        {
            return CalculateFee(options, false);
        }

        /// <summary>
        /// Calculates the calcSeminarFee for the registration and sets the TotalFee to the amount due.
        /// </summary>
        /// <param name="ignore">Optionally ignores setting the TotalFee property.</param>
        /// <returns>The amount of the TotalFee.</returns>
        public decimal CalculateFee(DojoSeminarRegistrationOptionCollection options, bool ignore)
        {
            decimal fullFee = decimal.Zero;
            decimal calcSeminarFee = decimal.Zero;
            decimal calcTotalFee = decimal.Zero;
            DojoSeminar seminar = ParentSeminar;

            // Detect Early Bird
            if (registrationDate < seminar.EarlyEndDate)
            {
                fullFee = seminar.FullEarlyRegistrationFee;
            }
            else if (registrationDate < seminar.LateStartDate)
            {
                fullFee = seminar.FullRegistrationFee;
            }
            else
            {
                fullFee = seminar.FullLateRegistrationFee;
            }

            switch (seminar.ClassUnitType)
            {
                case DojoSeminarClassUnitType.Day:
                    TimeSpan span = seminar.EndDate.Subtract(seminar.StartDate);
                    if (ClassUnits == span.Days)
                        calcSeminarFee = fullFee;
                    else
                        calcSeminarFee = seminar.BaseRegistrationFee + (seminar.ClassUnitFee * ClassUnits);
                    break;
                case DojoSeminarClassUnitType.Class:
                    if (ClassUnits == seminar.ClassCount)
                        calcSeminarFee = fullFee;
                    else
                        calcSeminarFee = seminar.BaseRegistrationFee + (seminar.ClassUnitFee * ClassUnits);
                    break;
                case DojoSeminarClassUnitType.None:
                    calcSeminarFee = fullFee;
                    break;
                default:
                    throw (new Exception(string.Format("Illegal ClassUnitType '{0}'.", seminar.ClassUnitType)));
            }

            // Calculate Option Fees
            calcTotalFee = calcSeminarFee;
            foreach (DojoSeminarRegistrationOption option in options)
            {
                calcTotalFee += option.TotalFee;
            }

            if (!ignore)
            {
                SeminarFee = calcSeminarFee;
                TotalFee = calcTotalFee;
            }

            return calcSeminarFee;
        }

        public bool IsPaid
        {
            get { return this.PaymentAmount >= this.TotalFee; }
        }

        #endregion

		//--- End Custom Code ---
	}
}
