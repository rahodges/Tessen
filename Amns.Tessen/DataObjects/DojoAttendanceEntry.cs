/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;

namespace Amns.Tessen
{
	/// <summary>
	/// Summary of MyClass
	/// </summary>
	public class DojoAttendanceEntry : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal DateTime signinTime;
		internal DateTime signoutTime;
		internal DojoClass _class;
		internal DojoMember member;
		internal DojoRank rank;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoAttendanceEntry Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoAttendanceEntry as a Placeholder. Placeholders only contain 
		/// a DojoAttendanceEntry ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime SigninTime
		{
			get
			{
				EnsurePreLoad();
				return signinTime;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= signinTime == value;
				signinTime = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime SignoutTime
		{
			get
			{
				EnsurePreLoad();
				return signoutTime;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= signoutTime == value;
				signoutTime = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoClass Class
		{
			get
			{
				EnsurePreLoad();
				return _class;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(_class == null)
					{
						return;
					}
					else
					{
						_class = value;
						isSynced = false;
					}
				}
				else
				{
					if(_class != null && value.ID == _class.ID)
					{
						return; 
					}
					else
					{
						_class = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Member
		{
			get
			{
				EnsurePreLoad();
				return member;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(member == null)
					{
						return;
					}
					else
					{
						member = value;
						isSynced = false;
					}
				}
				else
				{
					if(member != null && value.ID == member.ID)
					{
						return; 
					}
					else
					{
						member = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoRank Rank
		{
			get
			{
				EnsurePreLoad();
				return rank;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(rank == null)
					{
						return;
					}
					else
					{
						rank = value;
						isSynced = false;
					}
				}
				else
				{
					if(rank != null && value.ID == rank.ID)
					{
						return; 
					}
					else
					{
						rank = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoAttendanceEntry.
		/// </summary>
		public DojoAttendanceEntry()
		{
		}

		public DojoAttendanceEntry(int id)
		{
			this.iD = id;
			isSynced = DojoAttendanceEntryManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoAttendanceEntryManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoAttendanceEntry object state to the database.
		/// </summary>
		public int Save()
		{
			if(_class != null)
				_class.Save();
			if(member != null)
				member.Save();
			if(rank != null)
				rank.Save();

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoAttendanceEntryManager._insert(this);
			else
				DojoAttendanceEntryManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoAttendanceEntryManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoAttendanceEntry object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoAttendanceEntry object reflecting the replicated DojoAttendanceEntry object.</returns>
		public DojoAttendanceEntry Duplicate()
		{
			DojoAttendanceEntry clonedDojoAttendanceEntry = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoAttendanceEntry.iD = DojoAttendanceEntryManager._insert(clonedDojoAttendanceEntry);
			clonedDojoAttendanceEntry.isSynced = true;
			return clonedDojoAttendanceEntry;
		}

		/// <summary>
		/// Overwrites and existing DojoAttendanceEntry object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoAttendanceEntryManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoAttendanceEntry object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoAttendanceEntry object reflecting the replicated DojoAttendanceEntry object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoAttendanceEntry object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoAttendanceEntry object reflecting the replicated DojoAttendanceEntry object.</returns>
		public DojoAttendanceEntry Clone()
		{
			DojoAttendanceEntry clonedDojoAttendanceEntry = new DojoAttendanceEntry();
			clonedDojoAttendanceEntry.iD = iD;
			clonedDojoAttendanceEntry.isSynced = isSynced;
			clonedDojoAttendanceEntry.signinTime = signinTime;
			clonedDojoAttendanceEntry.signoutTime = signoutTime;


			if(_class != null)
				clonedDojoAttendanceEntry._class = _class;

			if(member != null)
				clonedDojoAttendanceEntry.member = member;

			if(rank != null)
				clonedDojoAttendanceEntry.rank = rank;

			return clonedDojoAttendanceEntry;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoAttendanceEntry.
		/// </summary>
		/// <returns> A new DojoAttendanceEntry object reflecting the cloned DojoAttendanceEntry object.</returns>
		public DojoAttendanceEntry Copy()
		{
			DojoAttendanceEntry dojoAttendanceEntry = new DojoAttendanceEntry();
			CopyTo(dojoAttendanceEntry);
			return dojoAttendanceEntry;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoAttendanceEntry.
		/// </summary>
		/// <returns> A new DojoAttendanceEntry object reflecting the cloned DojoAttendanceEntry object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoAttendanceEntry from its children.</param>
		public DojoAttendanceEntry Copy(bool isolation)
		{
			DojoAttendanceEntry dojoAttendanceEntry = new DojoAttendanceEntry();
			CopyTo(dojoAttendanceEntry, isolation);
			return dojoAttendanceEntry;
		}

		/// <summary>
		/// Deep copies the current DojoAttendanceEntry to another instance of DojoAttendanceEntry.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoAttendanceEntry">The DojoAttendanceEntry to copy to.</param>
		public void CopyTo(DojoAttendanceEntry dojoAttendanceEntry)
		{
			CopyTo(dojoAttendanceEntry, false);
		}

		/// <summary>
		/// Deep copies the current DojoAttendanceEntry to another instance of DojoAttendanceEntry.
		/// </summary>
		/// <param name="DojoAttendanceEntry">The DojoAttendanceEntry to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoAttendanceEntry from its children.</param>
		public void CopyTo(DojoAttendanceEntry dojoAttendanceEntry, bool isolation)
		{
			dojoAttendanceEntry.iD = iD;
			dojoAttendanceEntry.isPlaceHolder = isPlaceHolder;
			dojoAttendanceEntry.isSynced = isSynced;
			dojoAttendanceEntry.signinTime = signinTime;
			dojoAttendanceEntry.signoutTime = signoutTime;
			if(_class != null)
			{
				if(isolation)
				{
					dojoAttendanceEntry._class = _class.NewPlaceHolder();
				}
				else
				{
					dojoAttendanceEntry._class = _class.Copy(false);
				}
			}
			if(member != null)
			{
				if(isolation)
				{
					dojoAttendanceEntry.member = member.NewPlaceHolder();
				}
				else
				{
					dojoAttendanceEntry.member = member.Copy(false);
				}
			}
			if(rank != null)
			{
				if(isolation)
				{
					dojoAttendanceEntry.rank = rank.NewPlaceHolder();
				}
				else
				{
					dojoAttendanceEntry.rank = rank.Copy(false);
				}
			}
		}

		public DojoAttendanceEntry NewPlaceHolder()
		{
			DojoAttendanceEntry dojoAttendanceEntry = new DojoAttendanceEntry();
			dojoAttendanceEntry.iD = iD;
			dojoAttendanceEntry.isPlaceHolder = true;
			dojoAttendanceEntry.isSynced = true;
			return dojoAttendanceEntry;
		}

		public static DojoAttendanceEntry NewPlaceHolder(int iD)
		{
			DojoAttendanceEntry dojoAttendanceEntry = new DojoAttendanceEntry();
			dojoAttendanceEntry.iD = iD;
			dojoAttendanceEntry.isPlaceHolder = true;
			dojoAttendanceEntry.isSynced = true;
			return dojoAttendanceEntry;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoAttendanceEntry dojoAttendanceEntry = (DojoAttendanceEntry) obj;
			return this.iD - dojoAttendanceEntry.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoAttendanceEntry dojoAttendanceEntry)
		{
			return this.iD - dojoAttendanceEntry.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											
		public string Name
		{
			get
			{
				return member.PrivateContact.FullName;
			}
		}

		//--- End Custom Code ---
	}
}
