/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using Amns.GreyFox.People;

namespace Amns.Tessen
{
	/// <summary>
	/// Creates and schedules classes for the dojo.
	/// </summary>
	public class DojoClassDefinition : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal string name;
		internal string description;
		internal bool isDisabled;
		internal int occupancyAvg;
		internal DateTime occupancyAvgDate;
		internal DojoAccessControlGroup accessControlGroup;
		internal int recurrenceCount;
		internal DateTime recurrenceEnd;
		internal TimeSpan recurrenceSpan;
		internal DojoRecurrenceType recurrenceType;
		internal DateTime nextSigninStart;
		internal DateTime nextSigninEnd;
		internal DateTime nextClassStart;
		internal DateTime nextClassEnd;
		internal DojoMember instructor;
		internal GreyFoxContact location;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoClassDefinition Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoClassDefinition as a Placeholder. Placeholders only contain 
		/// a DojoClassDefinition ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Name
		{
			get
			{
				EnsurePreLoad();
				return name;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= name == value;
				name = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Description
		{
			get
			{
				EnsurePreLoad();
				return description;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= description == value;
				description = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool IsDisabled
		{
			get
			{
				EnsurePreLoad();
				return isDisabled;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isDisabled == value;
				isDisabled = value;
			}
		}

		/// <summary>
		/// </summary>
		public int OccupancyAvg
		{
			get
			{
				EnsurePreLoad();
				return occupancyAvg;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= occupancyAvg == value;
				occupancyAvg = value;
			}
		}

		/// <summary>
		/// OccupancyAvgDate
		/// </summary>
		public DateTime OccupancyAvgDate
		{
			get
			{
				EnsurePreLoad();
				return occupancyAvgDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= occupancyAvgDate == value;
				occupancyAvgDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoAccessControlGroup AccessControlGroup
		{
			get
			{
				EnsurePreLoad();
				return accessControlGroup;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(accessControlGroup == null)
					{
						return;
					}
					else
					{
						accessControlGroup = value;
						isSynced = false;
					}
				}
				else
				{
					if(accessControlGroup != null && value.ID == accessControlGroup.ID)
					{
						return; 
					}
					else
					{
						accessControlGroup = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public int RecurrenceCount
		{
			get
			{
				EnsurePreLoad();
				return recurrenceCount;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= recurrenceCount == value;
				recurrenceCount = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime RecurrenceEnd
		{
			get
			{
				EnsurePreLoad();
				return recurrenceEnd;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= recurrenceEnd == value;
				recurrenceEnd = value;
			}
		}

		/// <summary>
		/// </summary>
		public TimeSpan RecurrenceSpan
		{
			get
			{
				EnsurePreLoad();
				return recurrenceSpan;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= recurrenceSpan == value;
				recurrenceSpan = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoRecurrenceType RecurrenceType
		{
			get
			{
				EnsurePreLoad();
				return recurrenceType;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= recurrenceType == value;
				recurrenceType = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime NextSigninStart
		{
			get
			{
				EnsurePreLoad();
				return nextSigninStart;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= nextSigninStart == value;
				nextSigninStart = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime NextSigninEnd
		{
			get
			{
				EnsurePreLoad();
				return nextSigninEnd;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= nextSigninEnd == value;
				nextSigninEnd = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime NextClassStart
		{
			get
			{
				EnsurePreLoad();
				return nextClassStart;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= nextClassStart == value;
				nextClassStart = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime NextClassEnd
		{
			get
			{
				EnsurePreLoad();
				return nextClassEnd;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= nextClassEnd == value;
				nextClassEnd = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Instructor
		{
			get
			{
				EnsurePreLoad();
				return instructor;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(instructor == null)
					{
						return;
					}
					else
					{
						instructor = value;
						isSynced = false;
					}
				}
				else
				{
					if(instructor != null && value.ID == instructor.ID)
					{
						return; 
					}
					else
					{
						instructor = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public GreyFoxContact Location
		{
			get
			{
				EnsurePreLoad();
				return location;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(location == null)
					{
						return;
					}
					else
					{
						location = value;
						isSynced = false;
					}
				}
				else
				{
					if(value.TableName != "kitTessen_Locations") throw(new Exception("Cannot set Location. Table names mismatched."));
					if(location != null && value.ID == location.ID)
					{
						return; 
					}
					else
					{
						location = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoClassDefinition.
		/// </summary>
		public DojoClassDefinition()
		{
		}

		public DojoClassDefinition(int id)
		{
			this.iD = id;
			isSynced = DojoClassDefinitionManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoClassDefinitionManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoClassDefinition object state to the database.
		/// </summary>
		public int Save()
		{
			if(instructor != null)
				instructor.Save();
			if(location != null)
				location.Save();

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoClassDefinitionManager._insert(this);
			else
				DojoClassDefinitionManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoClassDefinitionManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoClassDefinition object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoClassDefinition object reflecting the replicated DojoClassDefinition object.</returns>
		public DojoClassDefinition Duplicate()
		{
			DojoClassDefinition clonedDojoClassDefinition = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoClassDefinition.iD = DojoClassDefinitionManager._insert(clonedDojoClassDefinition);
			clonedDojoClassDefinition.isSynced = true;
			return clonedDojoClassDefinition;
		}

		/// <summary>
		/// Overwrites and existing DojoClassDefinition object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoClassDefinitionManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoClassDefinition object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoClassDefinition object reflecting the replicated DojoClassDefinition object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoClassDefinition object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoClassDefinition object reflecting the replicated DojoClassDefinition object.</returns>
		public DojoClassDefinition Clone()
		{
			DojoClassDefinition clonedDojoClassDefinition = new DojoClassDefinition();
			clonedDojoClassDefinition.iD = iD;
			clonedDojoClassDefinition.isSynced = isSynced;
			clonedDojoClassDefinition.name = name;
			clonedDojoClassDefinition.description = description;
			clonedDojoClassDefinition.isDisabled = isDisabled;
			clonedDojoClassDefinition.occupancyAvg = occupancyAvg;
			clonedDojoClassDefinition.occupancyAvgDate = occupancyAvgDate;
			clonedDojoClassDefinition.recurrenceCount = recurrenceCount;
			clonedDojoClassDefinition.recurrenceEnd = recurrenceEnd;
			clonedDojoClassDefinition.recurrenceSpan = recurrenceSpan;
			clonedDojoClassDefinition.nextSigninStart = nextSigninStart;
			clonedDojoClassDefinition.nextSigninEnd = nextSigninEnd;
			clonedDojoClassDefinition.nextClassStart = nextClassStart;
			clonedDojoClassDefinition.nextClassEnd = nextClassEnd;

			clonedDojoClassDefinition.recurrenceType = recurrenceType;

			if(accessControlGroup != null)
				clonedDojoClassDefinition.accessControlGroup = accessControlGroup;

			if(instructor != null)
				clonedDojoClassDefinition.instructor = instructor;

			if(location != null)
				clonedDojoClassDefinition.location = location;

			return clonedDojoClassDefinition;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoClassDefinition.
		/// </summary>
		/// <returns> A new DojoClassDefinition object reflecting the cloned DojoClassDefinition object.</returns>
		public DojoClassDefinition Copy()
		{
			DojoClassDefinition dojoClassDefinition = new DojoClassDefinition();
			CopyTo(dojoClassDefinition);
			return dojoClassDefinition;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoClassDefinition.
		/// </summary>
		/// <returns> A new DojoClassDefinition object reflecting the cloned DojoClassDefinition object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoClassDefinition from its children.</param>
		public DojoClassDefinition Copy(bool isolation)
		{
			DojoClassDefinition dojoClassDefinition = new DojoClassDefinition();
			CopyTo(dojoClassDefinition, isolation);
			return dojoClassDefinition;
		}

		/// <summary>
		/// Deep copies the current DojoClassDefinition to another instance of DojoClassDefinition.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoClassDefinition">The DojoClassDefinition to copy to.</param>
		public void CopyTo(DojoClassDefinition dojoClassDefinition)
		{
			CopyTo(dojoClassDefinition, false);
		}

		/// <summary>
		/// Deep copies the current DojoClassDefinition to another instance of DojoClassDefinition.
		/// </summary>
		/// <param name="DojoClassDefinition">The DojoClassDefinition to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoClassDefinition from its children.</param>
		public void CopyTo(DojoClassDefinition dojoClassDefinition, bool isolation)
		{
			dojoClassDefinition.iD = iD;
			dojoClassDefinition.isPlaceHolder = isPlaceHolder;
			dojoClassDefinition.isSynced = isSynced;
			dojoClassDefinition.name = name;
			dojoClassDefinition.description = description;
			dojoClassDefinition.isDisabled = isDisabled;
			dojoClassDefinition.occupancyAvg = occupancyAvg;
			dojoClassDefinition.occupancyAvgDate = occupancyAvgDate;
			if(accessControlGroup != null)
			{
				if(isolation)
				{
					dojoClassDefinition.accessControlGroup = accessControlGroup.NewPlaceHolder();
				}
				else
				{
					dojoClassDefinition.accessControlGroup = accessControlGroup.Copy(false);
				}
			}
			dojoClassDefinition.recurrenceCount = recurrenceCount;
			dojoClassDefinition.recurrenceEnd = recurrenceEnd;
			dojoClassDefinition.recurrenceSpan = recurrenceSpan;
			dojoClassDefinition.recurrenceType = recurrenceType;
			dojoClassDefinition.nextSigninStart = nextSigninStart;
			dojoClassDefinition.nextSigninEnd = nextSigninEnd;
			dojoClassDefinition.nextClassStart = nextClassStart;
			dojoClassDefinition.nextClassEnd = nextClassEnd;
			if(instructor != null)
			{
				if(isolation)
				{
					dojoClassDefinition.instructor = instructor.NewPlaceHolder();
				}
				else
				{
					dojoClassDefinition.instructor = instructor.Copy(false);
				}
			}
			if(location != null)
			{
				if(isolation)
				{
					dojoClassDefinition.location = location.NewPlaceHolder();
				}
				else
				{
					dojoClassDefinition.location = location.Copy(false);
				}
			}
		}

		public DojoClassDefinition NewPlaceHolder()
		{
			DojoClassDefinition dojoClassDefinition = new DojoClassDefinition();
			dojoClassDefinition.iD = iD;
			dojoClassDefinition.isPlaceHolder = true;
			dojoClassDefinition.isSynced = true;
			return dojoClassDefinition;
		}

		public static DojoClassDefinition NewPlaceHolder(int iD)
		{
			DojoClassDefinition dojoClassDefinition = new DojoClassDefinition();
			dojoClassDefinition.iD = iD;
			dojoClassDefinition.isPlaceHolder = true;
			dojoClassDefinition.isSynced = true;
			return dojoClassDefinition;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoClassDefinition dojoClassDefinition = (DojoClassDefinition) obj;
			return this.iD - dojoClassDefinition.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoClassDefinition dojoClassDefinition)
		{
			return this.iD - dojoClassDefinition.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																					
		public DojoClass ToDojoClass()
		{
			DojoClass c = new DojoClass();
			EnsurePreLoad();

			c.name = name;
			c.signinStart = nextSigninStart;
			c.signinEnd = nextSigninEnd;
			c.classStart = nextClassStart;
			c.classEnd = nextClassEnd;
			c.instructor = instructor;
			c.location = location;
			c.parentDefinition = this;

			return c;
		}

		public override string ToString()
		{
			EnsurePreLoad();

			switch(recurrenceType)
			{
                case DojoRecurrenceType.Daily:
					return "Daily @" + nextClassStart.ToShortTimeString();
                case DojoRecurrenceType.Weekly:
					return nextSigninStart.DayOfWeek.ToString() + "s @ " + 
						nextClassStart.ToShortTimeString();
                case DojoRecurrenceType.Monthly:
					return "Monthly on the " + nextClassStart.ToString("dd");
                case DojoRecurrenceType.Yearly:
					return nextClassStart.ToString();
                case DojoRecurrenceType.Duration:
					if(recurrenceSpan == TimeSpan.FromDays(7))
                        goto case DojoRecurrenceType.Weekly;
                    goto case DojoRecurrenceType.Yearly;
				default:
                    goto case DojoRecurrenceType.Weekly;
			}
		}

		public void RollDefinition()
		{
			isSynced = false;

			switch(recurrenceType)
			{
                case DojoRecurrenceType.Daily:
					nextSigninStart = nextSigninStart.AddDays(1);
					nextSigninEnd = nextSigninEnd.AddDays(1);
					nextClassStart = nextClassStart.AddDays(1);
					nextClassEnd = nextClassEnd.AddDays(1);
					break;
                case DojoRecurrenceType.Weekly:
					nextSigninStart = nextSigninStart.AddDays(7);
					nextSigninEnd = nextSigninEnd.AddDays(7);
					nextClassStart = nextClassStart.AddDays(7);
					nextClassEnd = nextClassEnd.AddDays(7);
					break;
                case DojoRecurrenceType.Monthly:
					nextSigninStart = nextSigninStart.AddMonths(1);
					nextSigninEnd = nextSigninEnd.AddMonths(1);
					nextClassStart = nextClassStart.AddMonths(1);
					nextClassEnd = nextClassEnd.AddMonths(1);
					break;
                case DojoRecurrenceType.Yearly:
					nextSigninStart = nextSigninStart.AddYears(1);
					nextSigninEnd = nextSigninEnd.AddYears(1);
					nextClassStart = nextClassStart.AddYears(1);
					nextClassEnd = nextClassEnd.AddYears(1);
					break;
                case DojoRecurrenceType.Duration:
					nextSigninStart = nextSigninStart.Add(recurrenceSpan);
					nextSigninEnd = nextSigninEnd.Add(recurrenceSpan);
					nextClassStart = nextClassStart.Add(recurrenceSpan);
					nextClassEnd = nextClassEnd.Add(recurrenceSpan);
					break;
                default:
                    goto case DojoRecurrenceType.Weekly;
			}
		}
		
		//--- End Custom Code ---
	}
}
