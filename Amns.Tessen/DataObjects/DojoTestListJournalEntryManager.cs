/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.People;
using Amns.GreyFox.Security;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoTestListJournalEntryFlags : int { TestList,
				TestListTest,
				TestListStatus,
				TestListEditor,
				TestListCandidates,
				Member,
				MemberPrivateContact,
				MemberEmergencyContact,
				MemberPublicContact,
				MemberParent,
				MemberRoot,
				MemberMemberType,
				MemberMemberTypeTemplate,
				MemberMembership1,
				MemberMembership2,
				MemberMembership3,
				MemberMembership4,
				MemberMembership5,
				MemberInstructor1,
				MemberInstructor2,
				MemberInstructor3,
				MemberPromotionFlags,
				MemberRank,
				MemberUserAccount,
				MemberCustomer,
				EntryType,
				EntryTypeOnRemovedStatus,
				EntryTypeOnFailedStatus,
				EntryTypeOnPassedStatus,
				EntryTypeOnPromotedStatus,
				EntryTypeOnCertificateRequestedStatus,
				EntryTypeOnCertificatePendingStatus,
				EntryTypeOnCertificateReceivedStatus,
				Editor,
				EditorPrivateContact,
				EditorEmergencyContact,
				EditorPublicContact,
				EditorParent,
				EditorRoot,
				EditorMemberType,
				EditorMemberTypeTemplate,
				EditorMembership1,
				EditorMembership2,
				EditorMembership3,
				EditorMembership4,
				EditorMembership5,
				EditorInstructor1,
				EditorInstructor2,
				EditorInstructor3,
				EditorPromotionFlags,
				EditorRank,
				EditorUserAccount,
				EditorCustomer,
				Promotion,
				PromotionMember,
				PromotionTest,
				PromotionPromotionRank,
				PromotionLastRank,
				PromotionStatus};

	#endregion

	/// <summary>
	/// Datamanager for DojoTestListJournalEntry objects.
	/// </summary>
	public class DojoTestListJournalEntryManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_DojoTestListJournal";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoTestListJournalEntryID",
			"TestListID",
			"MemberID",
			"EntryTypeID",
			"CreateDate",
			"EditorID",
			"Comment",
			"PromotionID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoTestListJournalEntryID", "LONG", "-1" },
			{ "TestListID", "LONG", "null" },
			{ "MemberID", "LONG", "null" },
			{ "EntryTypeID", "LONG", "null" },
			{ "CreateDate", "DATETIME", "DateTime.Now" },
			{ "EditorID", "LONG", "null" },
			{ "Comment", "MEMO", "" },
			{ "PromotionID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoTestListJournalEntryManager()
		{
		}

		public DojoTestListJournalEntryManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoTestListJournalEntryManager.isInitialized)
			{
				DojoTestListJournalEntryManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoTestListJournalEntry into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoTestListJournalEntry">The DojoTestListJournalEntry to insert into the database.</param>
		internal static int _insert(DojoTestListJournalEntry dojoTestListJournalEntry)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			// Set Create Date to Now
			dojoTestListJournalEntry.CreateDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_DojoTestListJournal " +
				"(" +
				"TestListID," +
				"MemberID," +
				"EntryTypeID," +
				"CreateDate," +
				"EditorID," +
				"Comment," +
				"PromotionID) VALUES (" +
				"@TestListID," +
				"@MemberID," +
				"@EntryTypeID," +
				"@CreateDate," +
				"@EditorID," +
				"@Comment," +
				"@PromotionID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoTestListJournalEntry);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoTestListJournalEntry);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoTestListJournalEntry in cache.
			if(cacheEnabled) cacheStore(dojoTestListJournalEntry);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoTestListJournalEntry dojoTestListJournalEntry)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_DojoTestListJournal SET TestListID=@TestListID," +
				"MemberID=@MemberID," +
				"EntryTypeID=@EntryTypeID," +
				"CreateDate=@CreateDate," +
				"EditorID=@EditorID," +
				"Comment=@Comment," +
				"PromotionID=@PromotionID WHERE DojoTestListJournalEntryID=@DojoTestListJournalEntryID;");

			fillParameters(database, dbCommand, dojoTestListJournalEntry);
			database.AddInParameter(dbCommand, "DojoTestListJournalEntryID", DbType.Int32, dojoTestListJournalEntry.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoTestListJournalEntry in cache.
			if (cacheEnabled) cacheStore(dojoTestListJournalEntry);

			return dojoTestListJournalEntry.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoTestListJournalEntry dojoTestListJournalEntry)
		{
			#region General

			if(dojoTestListJournalEntry.testList == null)
			{
				addParameter(database, dbCommand, "@TestListID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@TestListID", DbType.Int32, dojoTestListJournalEntry.testList.ID);
			}
			if(dojoTestListJournalEntry.member == null)
			{
				addParameter(database, dbCommand, "@MemberID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MemberID", DbType.Int32, dojoTestListJournalEntry.member.ID);
			}
			if(dojoTestListJournalEntry.entryType == null)
			{
				addParameter(database, dbCommand, "@EntryTypeID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@EntryTypeID", DbType.Int32, dojoTestListJournalEntry.entryType.ID);
			}

			#endregion

			#region _system

			addParameter(database, dbCommand, "@CreateDate", DbType.Date, dojoTestListJournalEntry.createDate);

			#endregion

			#region Details

			if(dojoTestListJournalEntry.editor == null)
			{
				addParameter(database, dbCommand, "@EditorID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@EditorID", DbType.Int32, dojoTestListJournalEntry.editor.ID);
			}
			addParameter(database, dbCommand, "@Comment", DbType.String, dojoTestListJournalEntry.comment);
			if(dojoTestListJournalEntry.promotion == null)
			{
				addParameter(database, dbCommand, "@PromotionID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@PromotionID", DbType.Int32, dojoTestListJournalEntry.promotion.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoTestListJournalEntry dojoTestListJournalEntry)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoTestListJournalEntry.iD);
				if(cachedObject != null)
				{
					((DojoTestListJournalEntry)cachedObject).CopyTo(dojoTestListJournalEntry, true);
					return dojoTestListJournalEntry.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_DojoTestListJournal WHERE DojoTestListJournalEntryID=");
			query.Append(dojoTestListJournalEntry.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoTestListJournalEntryID '{0}'.", 
					dojoTestListJournalEntry.iD)));
			}

			FillFromReader(dojoTestListJournalEntry, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoTestListJournalEntry in cache.
			if(cacheEnabled) cacheStore(dojoTestListJournalEntry);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoTestListJournalEntryCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoTestListJournalEntryCollection GetCollection(string whereClause, string sortClause, params DojoTestListJournalEntryFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoTestListJournalEntryCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoTestListJournalEntryFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoTestListJournalEntryCollection dojoTestListJournalEntryCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoTestListJournalEntry.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int testListOffset = -1;
			int testListTestOffset = -1;
			int testListStatusOffset = -1;
			int testListEditorOffset = -1;
			int memberOffset = -1;
			int memberPrivateContactOffset = -1;
			int memberEmergencyContactOffset = -1;
			int memberPublicContactOffset = -1;
			int memberParentOffset = -1;
			int memberRootOffset = -1;
			int memberMemberTypeOffset = -1;
			int memberMemberTypeTemplateOffset = -1;
			int memberMembership1Offset = -1;
			int memberMembership2Offset = -1;
			int memberMembership3Offset = -1;
			int memberMembership4Offset = -1;
			int memberMembership5Offset = -1;
			int memberInstructor1Offset = -1;
			int memberInstructor2Offset = -1;
			int memberInstructor3Offset = -1;
			int memberRankOffset = -1;
			int memberUserAccountOffset = -1;
			int memberCustomerOffset = -1;
			int entryTypeOffset = -1;
			int entryTypeOnRemovedStatusOffset = -1;
			int entryTypeOnFailedStatusOffset = -1;
			int entryTypeOnPassedStatusOffset = -1;
			int entryTypeOnPromotedStatusOffset = -1;
			int entryTypeOnCertificateRequestedStatusOffset = -1;
			int entryTypeOnCertificatePendingStatusOffset = -1;
			int entryTypeOnCertificateReceivedStatusOffset = -1;
			int editorOffset = -1;
			int editorPrivateContactOffset = -1;
			int editorEmergencyContactOffset = -1;
			int editorPublicContactOffset = -1;
			int editorParentOffset = -1;
			int editorRootOffset = -1;
			int editorMemberTypeOffset = -1;
			int editorMemberTypeTemplateOffset = -1;
			int editorMembership1Offset = -1;
			int editorMembership2Offset = -1;
			int editorMembership3Offset = -1;
			int editorMembership4Offset = -1;
			int editorMembership5Offset = -1;
			int editorInstructor1Offset = -1;
			int editorInstructor2Offset = -1;
			int editorInstructor3Offset = -1;
			int editorRankOffset = -1;
			int editorUserAccountOffset = -1;
			int editorCustomerOffset = -1;
			int promotionOffset = -1;
			int promotionMemberOffset = -1;
			int promotionTestOffset = -1;
			int promotionPromotionRankOffset = -1;
			int promotionLastRankOffset = -1;
			int promotionStatusOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoTestListJournalEntryFlags.TestList:
							for(int i = 0; i <= DojoTestListManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("TestList.");
								query.Append(DojoTestListManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testListOffset = innerJoinOffset;
							innerJoinOffset = testListOffset + DojoTestListManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.TestListTest:
							for(int i = 0; i <= DojoTestManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("TestList_Test.");
								query.Append(DojoTestManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testListTestOffset = innerJoinOffset;
							innerJoinOffset = testListTestOffset + DojoTestManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.TestListStatus:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("TestList_Status.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testListStatusOffset = innerJoinOffset;
							innerJoinOffset = testListStatusOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.TestListEditor:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("TestList_Editor.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testListEditorOffset = innerJoinOffset;
							innerJoinOffset = testListEditorOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberOffset = innerJoinOffset;
							innerJoinOffset = memberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = memberPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberEmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberEmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = memberEmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberPublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberPublicContactOffset = innerJoinOffset;
							innerJoinOffset = memberPublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberParent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberParentOffset = innerJoinOffset;
							innerJoinOffset = memberParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberRoot:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberRootOffset = innerJoinOffset;
							innerJoinOffset = memberRootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = memberMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = memberMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberMembership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership1Offset = innerJoinOffset;
							innerJoinOffset = memberMembership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberMembership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership2Offset = innerJoinOffset;
							innerJoinOffset = memberMembership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberMembership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership3Offset = innerJoinOffset;
							innerJoinOffset = memberMembership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberMembership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership4Offset = innerJoinOffset;
							innerJoinOffset = memberMembership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberMembership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership5Offset = innerJoinOffset;
							innerJoinOffset = memberMembership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberInstructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor1Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberInstructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor2Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberInstructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor3Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberRankOffset = innerJoinOffset;
							innerJoinOffset = memberRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberUserAccountOffset = innerJoinOffset;
							innerJoinOffset = memberUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.MemberCustomer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberCustomerOffset = innerJoinOffset;
							innerJoinOffset = memberCustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EntryType:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("EntryType.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							entryTypeOffset = innerJoinOffset;
							innerJoinOffset = entryTypeOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnRemovedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("EntryType_OnRemovedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							entryTypeOnRemovedStatusOffset = innerJoinOffset;
							innerJoinOffset = entryTypeOnRemovedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnFailedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("EntryType_OnFailedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							entryTypeOnFailedStatusOffset = innerJoinOffset;
							innerJoinOffset = entryTypeOnFailedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnPassedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("EntryType_OnPassedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							entryTypeOnPassedStatusOffset = innerJoinOffset;
							innerJoinOffset = entryTypeOnPassedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnPromotedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("EntryType_OnPromotedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							entryTypeOnPromotedStatusOffset = innerJoinOffset;
							innerJoinOffset = entryTypeOnPromotedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnCertificateRequestedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("EntryType_OnCertificateRequestedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							entryTypeOnCertificateRequestedStatusOffset = innerJoinOffset;
							innerJoinOffset = entryTypeOnCertificateRequestedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnCertificatePendingStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("EntryType_OnCertificatePendingStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							entryTypeOnCertificatePendingStatusOffset = innerJoinOffset;
							innerJoinOffset = entryTypeOnCertificatePendingStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnCertificateReceivedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("EntryType_OnCertificateReceivedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							entryTypeOnCertificateReceivedStatusOffset = innerJoinOffset;
							innerJoinOffset = entryTypeOnCertificateReceivedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.Editor:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorOffset = innerJoinOffset;
							innerJoinOffset = editorOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = editorPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorEmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorEmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = editorEmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorPublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorPublicContactOffset = innerJoinOffset;
							innerJoinOffset = editorPublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorParent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorParentOffset = innerJoinOffset;
							innerJoinOffset = editorParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorRoot:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorRootOffset = innerJoinOffset;
							innerJoinOffset = editorRootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = editorMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = editorMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorMembership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMembership1Offset = innerJoinOffset;
							innerJoinOffset = editorMembership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorMembership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMembership2Offset = innerJoinOffset;
							innerJoinOffset = editorMembership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorMembership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMembership3Offset = innerJoinOffset;
							innerJoinOffset = editorMembership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorMembership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMembership4Offset = innerJoinOffset;
							innerJoinOffset = editorMembership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorMembership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorMembership5Offset = innerJoinOffset;
							innerJoinOffset = editorMembership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorInstructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorInstructor1Offset = innerJoinOffset;
							innerJoinOffset = editorInstructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorInstructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorInstructor2Offset = innerJoinOffset;
							innerJoinOffset = editorInstructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorInstructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorInstructor3Offset = innerJoinOffset;
							innerJoinOffset = editorInstructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorRankOffset = innerJoinOffset;
							innerJoinOffset = editorRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorUserAccountOffset = innerJoinOffset;
							innerJoinOffset = editorUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.EditorCustomer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Editor_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							editorCustomerOffset = innerJoinOffset;
							innerJoinOffset = editorCustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.Promotion:
							for(int i = 0; i <= DojoPromotionManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Promotion.");
								query.Append(DojoPromotionManager.InnerJoinFields[i]);
								query.Append(",");
							}
							promotionOffset = innerJoinOffset;
							innerJoinOffset = promotionOffset + DojoPromotionManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.PromotionMember:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Promotion_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							promotionMemberOffset = innerJoinOffset;
							innerJoinOffset = promotionMemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.PromotionTest:
							for(int i = 0; i <= DojoTestManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Promotion_Test.");
								query.Append(DojoTestManager.InnerJoinFields[i]);
								query.Append(",");
							}
							promotionTestOffset = innerJoinOffset;
							innerJoinOffset = promotionTestOffset + DojoTestManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.PromotionPromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Promotion_PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							promotionPromotionRankOffset = innerJoinOffset;
							innerJoinOffset = promotionPromotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.PromotionLastRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Promotion_LastRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							promotionLastRankOffset = innerJoinOffset;
							innerJoinOffset = promotionLastRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryFlags.PromotionStatus:
							for(int i = 0; i <= DojoPromotionStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Promotion_Status.");
								query.Append(DojoPromotionStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							promotionStatusOffset = innerJoinOffset;
							innerJoinOffset = promotionStatusOffset + DojoPromotionStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_DojoTestListJournal AS DojoTestListJournalEntry");
			}
			else
			{
				query.Append(" FROM kitTessen_DojoTestListJournal AS DojoTestListJournalEntry");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoTestListJournalEntryFlags.TestList:
							query.Append(" LEFT JOIN kitTessen_TestLists AS TestList ON DojoTestListJournalEntry.TestListID = TestList.DojoTestListID)");
							break;
						case DojoTestListJournalEntryFlags.TestListTest:
							query.Append(" LEFT JOIN kitTessen_Tests AS TestList_Test ON TestList.TestID = TestList_Test.DojoTestID)");
							break;
						case DojoTestListJournalEntryFlags.TestListStatus:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS TestList_Status ON TestList.StatusID = TestList_Status.DojoTestListStatusID)");
							break;
						case DojoTestListJournalEntryFlags.TestListEditor:
							query.Append(" LEFT JOIN kitTessen_Members AS TestList_Editor ON TestList.EditorID = TestList_Editor.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.Member:
							query.Append(" LEFT JOIN kitTessen_Members AS Member ON DojoTestListJournalEntry.MemberID = Member.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.MemberPrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Member_PrivateContact ON Member.PrivateContactID = Member_PrivateContact.GreyFoxContactID)");
							break;
						case DojoTestListJournalEntryFlags.MemberEmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Member_EmergencyContact ON Member.EmergencyContactID = Member_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoTestListJournalEntryFlags.MemberPublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Member_PublicContact ON Member.PublicContactID = Member_PublicContact.GreyFoxContactID)");
							break;
						case DojoTestListJournalEntryFlags.MemberParent:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Parent ON Member.ParentID = Member_Parent.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.MemberRoot:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Root ON Member.RootID = Member_Root.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.MemberMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Member_MemberType ON Member.MemberTypeID = Member_MemberType.DojoMemberTypeID)");
							break;
						case DojoTestListJournalEntryFlags.MemberMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Member_MemberTypeTemplate ON Member.MemberTypeTemplateID = Member_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoTestListJournalEntryFlags.MemberMembership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership1 ON Member.Membership1ID = Member_Membership1.DojoMembershipID)");
							break;
						case DojoTestListJournalEntryFlags.MemberMembership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership2 ON Member.Membership2ID = Member_Membership2.DojoMembershipID)");
							break;
						case DojoTestListJournalEntryFlags.MemberMembership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership3 ON Member.Membership3ID = Member_Membership3.DojoMembershipID)");
							break;
						case DojoTestListJournalEntryFlags.MemberMembership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership4 ON Member.Membership4ID = Member_Membership4.DojoMembershipID)");
							break;
						case DojoTestListJournalEntryFlags.MemberMembership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership5 ON Member.Membership5ID = Member_Membership5.DojoMembershipID)");
							break;
						case DojoTestListJournalEntryFlags.MemberInstructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor1 ON Member.Instructor1ID = Member_Instructor1.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.MemberInstructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor2 ON Member.Instructor2ID = Member_Instructor2.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.MemberInstructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor3 ON Member.Instructor3ID = Member_Instructor3.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.MemberRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Member_Rank ON Member.RankID = Member_Rank.DojoRankID)");
							break;
						case DojoTestListJournalEntryFlags.MemberUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Member_UserAccount ON Member.UserAccountID = Member_UserAccount.GreyFoxUserID)");
							break;
						case DojoTestListJournalEntryFlags.MemberCustomer:
							query.Append(" LEFT JOIN RH_Customers AS Member_Customer ON Member.CustomerID = Member_Customer.RHCustomerID)");
							break;
						case DojoTestListJournalEntryFlags.EntryType:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS EntryType ON DojoTestListJournalEntry.EntryTypeID = EntryType.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnRemovedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS EntryType_OnRemovedStatus ON EntryType.OnRemovedStatusID = EntryType_OnRemovedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnFailedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS EntryType_OnFailedStatus ON EntryType.OnFailedStatusID = EntryType_OnFailedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnPassedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS EntryType_OnPassedStatus ON EntryType.OnPassedStatusID = EntryType_OnPassedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnPromotedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS EntryType_OnPromotedStatus ON EntryType.OnPromotedStatusID = EntryType_OnPromotedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnCertificateRequestedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS EntryType_OnCertificateRequestedStatus ON EntryType.OnCertificateRequestedStatusID = EntryType_OnCertificateRequestedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnCertificatePendingStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS EntryType_OnCertificatePendingStatus ON EntryType.OnCertificatePendingStatusID = EntryType_OnCertificatePendingStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryFlags.EntryTypeOnCertificateReceivedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS EntryType_OnCertificateReceivedStatus ON EntryType.OnCertificateReceivedStatusID = EntryType_OnCertificateReceivedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryFlags.Editor:
							query.Append(" LEFT JOIN kitTessen_Members AS Editor ON DojoTestListJournalEntry.EditorID = Editor.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.EditorPrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Editor_PrivateContact ON Editor.PrivateContactID = Editor_PrivateContact.GreyFoxContactID)");
							break;
						case DojoTestListJournalEntryFlags.EditorEmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Editor_EmergencyContact ON Editor.EmergencyContactID = Editor_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoTestListJournalEntryFlags.EditorPublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Editor_PublicContact ON Editor.PublicContactID = Editor_PublicContact.GreyFoxContactID)");
							break;
						case DojoTestListJournalEntryFlags.EditorParent:
							query.Append(" LEFT JOIN kitTessen_Members AS Editor_Parent ON Editor.ParentID = Editor_Parent.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.EditorRoot:
							query.Append(" LEFT JOIN kitTessen_Members AS Editor_Root ON Editor.RootID = Editor_Root.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.EditorMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Editor_MemberType ON Editor.MemberTypeID = Editor_MemberType.DojoMemberTypeID)");
							break;
						case DojoTestListJournalEntryFlags.EditorMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Editor_MemberTypeTemplate ON Editor.MemberTypeTemplateID = Editor_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoTestListJournalEntryFlags.EditorMembership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Editor_Membership1 ON Editor.Membership1ID = Editor_Membership1.DojoMembershipID)");
							break;
						case DojoTestListJournalEntryFlags.EditorMembership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Editor_Membership2 ON Editor.Membership2ID = Editor_Membership2.DojoMembershipID)");
							break;
						case DojoTestListJournalEntryFlags.EditorMembership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Editor_Membership3 ON Editor.Membership3ID = Editor_Membership3.DojoMembershipID)");
							break;
						case DojoTestListJournalEntryFlags.EditorMembership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Editor_Membership4 ON Editor.Membership4ID = Editor_Membership4.DojoMembershipID)");
							break;
						case DojoTestListJournalEntryFlags.EditorMembership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Editor_Membership5 ON Editor.Membership5ID = Editor_Membership5.DojoMembershipID)");
							break;
						case DojoTestListJournalEntryFlags.EditorInstructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Editor_Instructor1 ON Editor.Instructor1ID = Editor_Instructor1.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.EditorInstructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Editor_Instructor2 ON Editor.Instructor2ID = Editor_Instructor2.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.EditorInstructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Editor_Instructor3 ON Editor.Instructor3ID = Editor_Instructor3.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.EditorRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Editor_Rank ON Editor.RankID = Editor_Rank.DojoRankID)");
							break;
						case DojoTestListJournalEntryFlags.EditorUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Editor_UserAccount ON Editor.UserAccountID = Editor_UserAccount.GreyFoxUserID)");
							break;
						case DojoTestListJournalEntryFlags.EditorCustomer:
							query.Append(" LEFT JOIN RH_Customers AS Editor_Customer ON Editor.CustomerID = Editor_Customer.RHCustomerID)");
							break;
						case DojoTestListJournalEntryFlags.Promotion:
							query.Append(" LEFT JOIN kitTessen_Promotions AS Promotion ON DojoTestListJournalEntry.PromotionID = Promotion.DojoPromotionID)");
							break;
						case DojoTestListJournalEntryFlags.PromotionMember:
							query.Append(" LEFT JOIN kitTessen_Members AS Promotion_Member ON Promotion.MemberID = Promotion_Member.DojoMemberID)");
							break;
						case DojoTestListJournalEntryFlags.PromotionTest:
							query.Append(" LEFT JOIN kitTessen_Tests AS Promotion_Test ON Promotion.TestID = Promotion_Test.DojoTestID)");
							break;
						case DojoTestListJournalEntryFlags.PromotionPromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Promotion_PromotionRank ON Promotion.PromotionRankID = Promotion_PromotionRank.DojoRankID)");
							break;
						case DojoTestListJournalEntryFlags.PromotionLastRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Promotion_LastRank ON Promotion.LastRankID = Promotion_LastRank.DojoRankID)");
							break;
						case DojoTestListJournalEntryFlags.PromotionStatus:
							query.Append(" LEFT JOIN kitTessen_PromotionStatuses AS Promotion_Status ON Promotion.StatusID = Promotion_Status.DojoPromotionStatusID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoTestListJournalEntryCollection = new DojoTestListJournalEntryCollection();

			while(r.Read())
			{
				DojoTestListJournalEntry dojoTestListJournalEntry = ParseFromReader(r, 0, 1);

				// Fill TestList
				if(testListOffset != -1 && !r.IsDBNull(testListOffset))
				{
					DojoTestListManager.FillFromReader(dojoTestListJournalEntry.testList, r, testListOffset, testListOffset+1);

					// Fill Test
					if(testListTestOffset != -1 && !r.IsDBNull(testListTestOffset))
						DojoTestManager.FillFromReader(dojoTestListJournalEntry.testList.Test, r, testListTestOffset, testListTestOffset+1);

					// Fill 
					if(testListStatusOffset != -1 && !r.IsDBNull(testListStatusOffset))
						DojoTestListStatusManager.FillFromReader(dojoTestListJournalEntry.testList.Status, r, testListStatusOffset, testListStatusOffset+1);

					// Fill 
					if(testListEditorOffset != -1 && !r.IsDBNull(testListEditorOffset))
						DojoMemberManager.FillFromReader(dojoTestListJournalEntry.testList.Editor, r, testListEditorOffset, testListEditorOffset+1);

				}

				// Fill Member
				if(memberOffset != -1 && !r.IsDBNull(memberOffset))
				{
					DojoMemberManager.FillFromReader(dojoTestListJournalEntry.member, r, memberOffset, memberOffset+1);

					// Fill 
					if(memberPrivateContactOffset != -1 && !r.IsDBNull(memberPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoTestListJournalEntry.member.PrivateContact, "kitTessen_Members_PrivateContacts", r, memberPrivateContactOffset, memberPrivateContactOffset+1);

					// Fill 
					if(memberEmergencyContactOffset != -1 && !r.IsDBNull(memberEmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoTestListJournalEntry.member.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, memberEmergencyContactOffset, memberEmergencyContactOffset+1);

					// Fill 
					if(memberPublicContactOffset != -1 && !r.IsDBNull(memberPublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoTestListJournalEntry.member.PublicContact, "kitTessen_Members_PublicContacts", r, memberPublicContactOffset, memberPublicContactOffset+1);

					// Fill 
					if(memberParentOffset != -1 && !r.IsDBNull(memberParentOffset))
						DojoMemberManager.FillFromReader(dojoTestListJournalEntry.member.Parent, r, memberParentOffset, memberParentOffset+1);

					// Fill 
					if(memberRootOffset != -1 && !r.IsDBNull(memberRootOffset))
						DojoMemberManager.FillFromReader(dojoTestListJournalEntry.member.Root, r, memberRootOffset, memberRootOffset+1);

					// Fill 
					if(memberMemberTypeOffset != -1 && !r.IsDBNull(memberMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoTestListJournalEntry.member.MemberType, r, memberMemberTypeOffset, memberMemberTypeOffset+1);

					// Fill 
					if(memberMemberTypeTemplateOffset != -1 && !r.IsDBNull(memberMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoTestListJournalEntry.member.MemberTypeTemplate, r, memberMemberTypeTemplateOffset, memberMemberTypeTemplateOffset+1);

					// Fill 
					if(memberMembership1Offset != -1 && !r.IsDBNull(memberMembership1Offset))
						DojoMembershipManager.FillFromReader(dojoTestListJournalEntry.member.Membership1, r, memberMembership1Offset, memberMembership1Offset+1);

					// Fill 
					if(memberMembership2Offset != -1 && !r.IsDBNull(memberMembership2Offset))
						DojoMembershipManager.FillFromReader(dojoTestListJournalEntry.member.Membership2, r, memberMembership2Offset, memberMembership2Offset+1);

					// Fill 
					if(memberMembership3Offset != -1 && !r.IsDBNull(memberMembership3Offset))
						DojoMembershipManager.FillFromReader(dojoTestListJournalEntry.member.Membership3, r, memberMembership3Offset, memberMembership3Offset+1);

					// Fill 
					if(memberMembership4Offset != -1 && !r.IsDBNull(memberMembership4Offset))
						DojoMembershipManager.FillFromReader(dojoTestListJournalEntry.member.Membership4, r, memberMembership4Offset, memberMembership4Offset+1);

					// Fill 
					if(memberMembership5Offset != -1 && !r.IsDBNull(memberMembership5Offset))
						DojoMembershipManager.FillFromReader(dojoTestListJournalEntry.member.Membership5, r, memberMembership5Offset, memberMembership5Offset+1);

					// Fill 
					if(memberInstructor1Offset != -1 && !r.IsDBNull(memberInstructor1Offset))
						DojoMemberManager.FillFromReader(dojoTestListJournalEntry.member.Instructor1, r, memberInstructor1Offset, memberInstructor1Offset+1);

					// Fill 
					if(memberInstructor2Offset != -1 && !r.IsDBNull(memberInstructor2Offset))
						DojoMemberManager.FillFromReader(dojoTestListJournalEntry.member.Instructor2, r, memberInstructor2Offset, memberInstructor2Offset+1);

					// Fill 
					if(memberInstructor3Offset != -1 && !r.IsDBNull(memberInstructor3Offset))
						DojoMemberManager.FillFromReader(dojoTestListJournalEntry.member.Instructor3, r, memberInstructor3Offset, memberInstructor3Offset+1);

					// Fill 
					if(memberRankOffset != -1 && !r.IsDBNull(memberRankOffset))
						DojoRankManager.FillFromReader(dojoTestListJournalEntry.member.Rank, r, memberRankOffset, memberRankOffset+1);

					// Fill 
					if(memberUserAccountOffset != -1 && !r.IsDBNull(memberUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoTestListJournalEntry.member.UserAccount, r, memberUserAccountOffset, memberUserAccountOffset+1);

					// Fill 
					if(memberCustomerOffset != -1 && !r.IsDBNull(memberCustomerOffset))
						RHCustomerManager.FillFromReader(dojoTestListJournalEntry.member.Customer, r, memberCustomerOffset, memberCustomerOffset+1);

				}

				// Fill EntryType
				if(entryTypeOffset != -1 && !r.IsDBNull(entryTypeOffset))
				{
					DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntry.entryType, r, entryTypeOffset, entryTypeOffset+1);

					// Fill 
					if(entryTypeOnRemovedStatusOffset != -1 && !r.IsDBNull(entryTypeOnRemovedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntry.entryType.OnRemovedStatus, r, entryTypeOnRemovedStatusOffset, entryTypeOnRemovedStatusOffset+1);

					// Fill 
					if(entryTypeOnFailedStatusOffset != -1 && !r.IsDBNull(entryTypeOnFailedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntry.entryType.OnFailedStatus, r, entryTypeOnFailedStatusOffset, entryTypeOnFailedStatusOffset+1);

					// Fill 
					if(entryTypeOnPassedStatusOffset != -1 && !r.IsDBNull(entryTypeOnPassedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntry.entryType.OnPassedStatus, r, entryTypeOnPassedStatusOffset, entryTypeOnPassedStatusOffset+1);

					// Fill 
					if(entryTypeOnPromotedStatusOffset != -1 && !r.IsDBNull(entryTypeOnPromotedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntry.entryType.OnPromotedStatus, r, entryTypeOnPromotedStatusOffset, entryTypeOnPromotedStatusOffset+1);

					// Fill 
					if(entryTypeOnCertificateRequestedStatusOffset != -1 && !r.IsDBNull(entryTypeOnCertificateRequestedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntry.entryType.OnCertificateRequestedStatus, r, entryTypeOnCertificateRequestedStatusOffset, entryTypeOnCertificateRequestedStatusOffset+1);

					// Fill 
					if(entryTypeOnCertificatePendingStatusOffset != -1 && !r.IsDBNull(entryTypeOnCertificatePendingStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntry.entryType.OnCertificatePendingStatus, r, entryTypeOnCertificatePendingStatusOffset, entryTypeOnCertificatePendingStatusOffset+1);

					// Fill 
					if(entryTypeOnCertificateReceivedStatusOffset != -1 && !r.IsDBNull(entryTypeOnCertificateReceivedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntry.entryType.OnCertificateReceivedStatus, r, entryTypeOnCertificateReceivedStatusOffset, entryTypeOnCertificateReceivedStatusOffset+1);

				}

				// Fill Editor
				if(editorOffset != -1 && !r.IsDBNull(editorOffset))
				{
					DojoMemberManager.FillFromReader(dojoTestListJournalEntry.editor, r, editorOffset, editorOffset+1);

					// Fill 
					if(editorPrivateContactOffset != -1 && !r.IsDBNull(editorPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoTestListJournalEntry.editor.PrivateContact, "kitTessen_Members_PrivateContacts", r, editorPrivateContactOffset, editorPrivateContactOffset+1);

					// Fill 
					if(editorEmergencyContactOffset != -1 && !r.IsDBNull(editorEmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoTestListJournalEntry.editor.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, editorEmergencyContactOffset, editorEmergencyContactOffset+1);

					// Fill 
					if(editorPublicContactOffset != -1 && !r.IsDBNull(editorPublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoTestListJournalEntry.editor.PublicContact, "kitTessen_Members_PublicContacts", r, editorPublicContactOffset, editorPublicContactOffset+1);

					// Fill 
					if(editorParentOffset != -1 && !r.IsDBNull(editorParentOffset))
						DojoMemberManager.FillFromReader(dojoTestListJournalEntry.editor.Parent, r, editorParentOffset, editorParentOffset+1);

					// Fill 
					if(editorRootOffset != -1 && !r.IsDBNull(editorRootOffset))
						DojoMemberManager.FillFromReader(dojoTestListJournalEntry.editor.Root, r, editorRootOffset, editorRootOffset+1);

					// Fill 
					if(editorMemberTypeOffset != -1 && !r.IsDBNull(editorMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoTestListJournalEntry.editor.MemberType, r, editorMemberTypeOffset, editorMemberTypeOffset+1);

					// Fill 
					if(editorMemberTypeTemplateOffset != -1 && !r.IsDBNull(editorMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoTestListJournalEntry.editor.MemberTypeTemplate, r, editorMemberTypeTemplateOffset, editorMemberTypeTemplateOffset+1);

					// Fill 
					if(editorMembership1Offset != -1 && !r.IsDBNull(editorMembership1Offset))
						DojoMembershipManager.FillFromReader(dojoTestListJournalEntry.editor.Membership1, r, editorMembership1Offset, editorMembership1Offset+1);

					// Fill 
					if(editorMembership2Offset != -1 && !r.IsDBNull(editorMembership2Offset))
						DojoMembershipManager.FillFromReader(dojoTestListJournalEntry.editor.Membership2, r, editorMembership2Offset, editorMembership2Offset+1);

					// Fill 
					if(editorMembership3Offset != -1 && !r.IsDBNull(editorMembership3Offset))
						DojoMembershipManager.FillFromReader(dojoTestListJournalEntry.editor.Membership3, r, editorMembership3Offset, editorMembership3Offset+1);

					// Fill 
					if(editorMembership4Offset != -1 && !r.IsDBNull(editorMembership4Offset))
						DojoMembershipManager.FillFromReader(dojoTestListJournalEntry.editor.Membership4, r, editorMembership4Offset, editorMembership4Offset+1);

					// Fill 
					if(editorMembership5Offset != -1 && !r.IsDBNull(editorMembership5Offset))
						DojoMembershipManager.FillFromReader(dojoTestListJournalEntry.editor.Membership5, r, editorMembership5Offset, editorMembership5Offset+1);

					// Fill 
					if(editorInstructor1Offset != -1 && !r.IsDBNull(editorInstructor1Offset))
						DojoMemberManager.FillFromReader(dojoTestListJournalEntry.editor.Instructor1, r, editorInstructor1Offset, editorInstructor1Offset+1);

					// Fill 
					if(editorInstructor2Offset != -1 && !r.IsDBNull(editorInstructor2Offset))
						DojoMemberManager.FillFromReader(dojoTestListJournalEntry.editor.Instructor2, r, editorInstructor2Offset, editorInstructor2Offset+1);

					// Fill 
					if(editorInstructor3Offset != -1 && !r.IsDBNull(editorInstructor3Offset))
						DojoMemberManager.FillFromReader(dojoTestListJournalEntry.editor.Instructor3, r, editorInstructor3Offset, editorInstructor3Offset+1);

					// Fill 
					if(editorRankOffset != -1 && !r.IsDBNull(editorRankOffset))
						DojoRankManager.FillFromReader(dojoTestListJournalEntry.editor.Rank, r, editorRankOffset, editorRankOffset+1);

					// Fill 
					if(editorUserAccountOffset != -1 && !r.IsDBNull(editorUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoTestListJournalEntry.editor.UserAccount, r, editorUserAccountOffset, editorUserAccountOffset+1);

					// Fill 
					if(editorCustomerOffset != -1 && !r.IsDBNull(editorCustomerOffset))
						RHCustomerManager.FillFromReader(dojoTestListJournalEntry.editor.Customer, r, editorCustomerOffset, editorCustomerOffset+1);

				}

				// Fill Promotion
				if(promotionOffset != -1 && !r.IsDBNull(promotionOffset))
				{
					DojoPromotionManager.FillFromReader(dojoTestListJournalEntry.promotion, r, promotionOffset, promotionOffset+1);

					// Fill 
					if(promotionMemberOffset != -1 && !r.IsDBNull(promotionMemberOffset))
						DojoMemberManager.FillFromReader(dojoTestListJournalEntry.promotion.Member, r, promotionMemberOffset, promotionMemberOffset+1);

					// Fill 
					if(promotionTestOffset != -1 && !r.IsDBNull(promotionTestOffset))
						DojoTestManager.FillFromReader(dojoTestListJournalEntry.promotion.Test, r, promotionTestOffset, promotionTestOffset+1);

					// Fill 
					if(promotionPromotionRankOffset != -1 && !r.IsDBNull(promotionPromotionRankOffset))
						DojoRankManager.FillFromReader(dojoTestListJournalEntry.promotion.PromotionRank, r, promotionPromotionRankOffset, promotionPromotionRankOffset+1);

					// Fill 
					if(promotionLastRankOffset != -1 && !r.IsDBNull(promotionLastRankOffset))
						DojoRankManager.FillFromReader(dojoTestListJournalEntry.promotion.LastRank, r, promotionLastRankOffset, promotionLastRankOffset+1);

					// Fill 
					if(promotionStatusOffset != -1 && !r.IsDBNull(promotionStatusOffset))
						DojoPromotionStatusManager.FillFromReader(dojoTestListJournalEntry.promotion.Status, r, promotionStatusOffset, promotionStatusOffset+1);

				}

				dojoTestListJournalEntryCollection.Add(dojoTestListJournalEntry);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoTestListJournalEntryCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoTestListJournalEntry ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoTestListJournalEntry dojoTestListJournalEntry = new DojoTestListJournalEntry();
			FillFromReader(dojoTestListJournalEntry, r, idOffset, dataOffset);
			return dojoTestListJournalEntry;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoTestListJournalEntry dojoTestListJournalEntry, IDataReader r, int idOffset, int dataOffset)
		{
			dojoTestListJournalEntry.iD = r.GetInt32(idOffset);
			dojoTestListJournalEntry.isSynced = true;
			dojoTestListJournalEntry.isPlaceHolder = false;

			if(!r.IsDBNull(0+dataOffset) && r.GetInt32(0+dataOffset) > 0)
			{
				dojoTestListJournalEntry.testList = DojoTestList.NewPlaceHolder(r.GetInt32(0+dataOffset));
			}
			if(!r.IsDBNull(1+dataOffset) && r.GetInt32(1+dataOffset) > 0)
			{
				dojoTestListJournalEntry.member = DojoMember.NewPlaceHolder(r.GetInt32(1+dataOffset));
			}
			if(!r.IsDBNull(2+dataOffset) && r.GetInt32(2+dataOffset) > 0)
			{
				dojoTestListJournalEntry.entryType = DojoTestListJournalEntryType.NewPlaceHolder(r.GetInt32(2+dataOffset));
			}
			dojoTestListJournalEntry.createDate = r.GetDateTime(3+dataOffset);
			if(!r.IsDBNull(4+dataOffset) && r.GetInt32(4+dataOffset) > 0)
			{
				dojoTestListJournalEntry.editor = DojoMember.NewPlaceHolder(r.GetInt32(4+dataOffset));
			}
			dojoTestListJournalEntry.comment = r.GetString(5+dataOffset);
			if(!r.IsDBNull(6+dataOffset) && r.GetInt32(6+dataOffset) > 0)
			{
				dojoTestListJournalEntry.promotion = DojoPromotion.NewPlaceHolder(r.GetInt32(6+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_DojoTestListJournal WHERE DojoTestListJournalEntryID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_DojoTestListJournal ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_DojoTestListJournal_TestList FOREIGN KEY (TestListID) REFERENCES kitTessen_TestLists (DojoTestListID),");
			query.Append(" CONSTRAINT FK_kitTessen_DojoTestListJournal_Member FOREIGN KEY (MemberID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_DojoTestListJournal_EntryType FOREIGN KEY (EntryTypeID) REFERENCES kitTessen_TestListJournalEntryTypes (DojoTestListJournalEntryTypeID),");
			query.Append(" CONSTRAINT FK_kitTessen_DojoTestListJournal_Editor FOREIGN KEY (EditorID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_DojoTestListJournal_Promotion FOREIGN KEY (PromotionID) REFERENCES kitTessen_Promotions (DojoPromotionID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_DojoTestListJournal ");
				query.Append(" (DojoTestListJournalEntryID COUNTER(1,1) CONSTRAINT PK_kitTessen_DojoTestListJournal PRIMARY KEY, " +
					"TestListID LONG," +
					"MemberID LONG," +
					"EntryTypeID LONG," +
					"CreateDate DATETIME," +
					"EditorID LONG," +
					"Comment MEMO," +
					"PromotionID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_DojoTestListJournal ");
				query.Append(" (DojoTestListJournalEntryID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_DojoTestListJournal PRIMARY KEY, " +
					"TestListID INT," +
					"MemberID INT," +
					"EntryTypeID INT," +
					"CreateDate DATETIME," +
					"EditorID INT," +
					"Comment NTEXT," +
					"PromotionID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoTestListJournalEntry dojoTestListJournalEntry)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_DojoTestListJournal_" + dojoTestListJournalEntry.iD.ToString(), dojoTestListJournalEntry);
		}

		private static DojoTestListJournalEntry cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_DojoTestListJournal_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoTestListJournalEntry)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_DojoTestListJournal_" + id.ToString());
		}

		#endregion

	}
}

