/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	/// <summary>
	/// DojoRank
	/// </summary>
	public class DojoRank : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal string name;
		internal TimeSpan promotionTimeInRank;
		internal TimeSpan promotionTimeFromLastTest;
		internal string promotionRequirements;
		internal decimal promotionFee;
		internal DojoRank promotionRank;
		internal bool promotionResetIP;
		internal int orderNum;
		internal string description;
		internal RHItem item;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoRank Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoRank as a Placeholder. Placeholders only contain 
		/// a DojoRank ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Name
		{
			get
			{
				EnsurePreLoad();
				return name;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= name == value;
				name = value;
			}
		}

		/// <summary>
		/// </summary>
		public TimeSpan PromotionTimeInRank
		{
			get
			{
				EnsurePreLoad();
				return promotionTimeInRank;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= promotionTimeInRank == value;
				promotionTimeInRank = value;
			}
		}

		/// <summary>
		/// </summary>
		public TimeSpan PromotionTimeFromLastTest
		{
			get
			{
				EnsurePreLoad();
				return promotionTimeFromLastTest;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= promotionTimeFromLastTest == value;
				promotionTimeFromLastTest = value;
			}
		}

		/// <summary>
		/// </summary>
		public string PromotionRequirements
		{
			get
			{
				EnsurePreLoad();
				return promotionRequirements;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= promotionRequirements == value;
				promotionRequirements = value;
			}
		}

		/// <summary>
		/// </summary>
		public decimal PromotionFee
		{
			get
			{
				EnsurePreLoad();
				return promotionFee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= promotionFee == value;
				promotionFee = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoRank PromotionRank
		{
			get
			{
				EnsurePreLoad();
				return promotionRank;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(promotionRank == null)
					{
						return;
					}
					else
					{
						promotionRank = value;
						isSynced = false;
					}
				}
				else
				{
					if(promotionRank != null && value.ID == promotionRank.ID)
					{
						return; 
					}
					else
					{
						promotionRank = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// Resets IsPromotable if promotion is applied.
		/// </summary>
		public bool PromotionResetIP
		{
			get
			{
				EnsurePreLoad();
				return promotionResetIP;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= promotionResetIP == value;
				promotionResetIP = value;
			}
		}

		/// <summary>
		/// </summary>
		public int OrderNum
		{
			get
			{
				EnsurePreLoad();
				return orderNum;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= orderNum == value;
				orderNum = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Description
		{
			get
			{
				EnsurePreLoad();
				return description;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= description == value;
				description = value;
			}
		}

		/// <summary>
		/// </summary>
		public RHItem Item
		{
			get
			{
				EnsurePreLoad();
				return item;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(item == null)
					{
						return;
					}
					else
					{
						item = value;
						isSynced = false;
					}
				}
				else
				{
					if(item != null && value.ID == item.ID)
					{
						return; 
					}
					else
					{
						item = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoRank.
		/// </summary>
		public DojoRank()
		{
			description = string.Empty;
		}

		public DojoRank(int id)
		{
			this.iD = id;
			isSynced = DojoRankManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoRankManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoRank object state to the database.
		/// </summary>
		public int Save()
		{
			if(promotionRank != null)
				promotionRank.Save();

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoRankManager._insert(this);
			else
				DojoRankManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoRankManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoRank object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoRank object reflecting the replicated DojoRank object.</returns>
		public DojoRank Duplicate()
		{
			DojoRank clonedDojoRank = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoRank.iD = DojoRankManager._insert(clonedDojoRank);
			clonedDojoRank.isSynced = true;
			return clonedDojoRank;
		}

		/// <summary>
		/// Overwrites and existing DojoRank object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoRankManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoRank object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoRank object reflecting the replicated DojoRank object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoRank object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoRank object reflecting the replicated DojoRank object.</returns>
		public DojoRank Clone()
		{
			DojoRank clonedDojoRank = new DojoRank();
			clonedDojoRank.iD = iD;
			clonedDojoRank.isSynced = isSynced;
			clonedDojoRank.name = name;
			clonedDojoRank.promotionTimeInRank = promotionTimeInRank;
			clonedDojoRank.promotionTimeFromLastTest = promotionTimeFromLastTest;
			clonedDojoRank.promotionRequirements = promotionRequirements;
			clonedDojoRank.promotionFee = promotionFee;
			clonedDojoRank.promotionResetIP = promotionResetIP;
			clonedDojoRank.orderNum = orderNum;
			clonedDojoRank.description = description;


			if(promotionRank != null)
				clonedDojoRank.promotionRank = promotionRank;

			if(item != null)
				clonedDojoRank.item = item;

			return clonedDojoRank;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoRank.
		/// </summary>
		/// <returns> A new DojoRank object reflecting the cloned DojoRank object.</returns>
		public DojoRank Copy()
		{
			DojoRank dojoRank = new DojoRank();
			CopyTo(dojoRank);
			return dojoRank;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoRank.
		/// </summary>
		/// <returns> A new DojoRank object reflecting the cloned DojoRank object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoRank from its children.</param>
		public DojoRank Copy(bool isolation)
		{
			DojoRank dojoRank = new DojoRank();
			CopyTo(dojoRank, isolation);
			return dojoRank;
		}

		/// <summary>
		/// Deep copies the current DojoRank to another instance of DojoRank.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoRank">The DojoRank to copy to.</param>
		public void CopyTo(DojoRank dojoRank)
		{
			CopyTo(dojoRank, false);
		}

		/// <summary>
		/// Deep copies the current DojoRank to another instance of DojoRank.
		/// </summary>
		/// <param name="DojoRank">The DojoRank to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoRank from its children.</param>
		public void CopyTo(DojoRank dojoRank, bool isolation)
		{
			dojoRank.iD = iD;
			dojoRank.isPlaceHolder = isPlaceHolder;
			dojoRank.isSynced = isSynced;
			dojoRank.name = name;
			dojoRank.promotionTimeInRank = promotionTimeInRank;
			dojoRank.promotionTimeFromLastTest = promotionTimeFromLastTest;
			dojoRank.promotionRequirements = promotionRequirements;
			dojoRank.promotionFee = promotionFee;
			if(promotionRank != null)
			{
				if(isolation)
				{
					dojoRank.promotionRank = promotionRank.NewPlaceHolder();
				}
				else
				{
					dojoRank.promotionRank = promotionRank.Copy(false);
				}
			}
			dojoRank.promotionResetIP = promotionResetIP;
			dojoRank.orderNum = orderNum;
			dojoRank.description = description;
			if(item != null)
			{
				if(isolation)
				{
					dojoRank.item = item.NewPlaceHolder();
				}
				else
				{
					dojoRank.item = item.Copy(false);
				}
			}
		}

		public DojoRank NewPlaceHolder()
		{
			DojoRank dojoRank = new DojoRank();
			dojoRank.iD = iD;
			dojoRank.isPlaceHolder = true;
			dojoRank.isSynced = true;
			return dojoRank;
		}

		public static DojoRank NewPlaceHolder(int iD)
		{
			DojoRank dojoRank = new DojoRank();
			dojoRank.iD = iD;
			dojoRank.isPlaceHolder = true;
			dojoRank.isSynced = true;
			return dojoRank;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoRank dojoRank = (DojoRank) obj;
			return this.iD - dojoRank.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoRank dojoRank)
		{
			return this.iD - dojoRank.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---
																																																																																																																																																
		// TODO: Optimize this by adding an IsYudansha field to database
        public bool IsYudansha
		{
			get
			{
				return Name.ToLower().IndexOf("dan") != -1;
			}
		}

		public bool IsMudansha
		{
			get
			{
				return !IsYudansha;
			}
		}
		//--- End Custom Code ---
	}
}
