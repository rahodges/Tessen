/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	/// <summary>
	/// Summary of MyClass
	/// </summary>
	public class DojoMembership : ICloneable, IComparable, Amns.Rappahanock.IRHLineExtension
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal DojoMember member;
		internal DateTime startDate;
		internal DateTime endDate;
		internal DojoOrganization organization;
		internal string organizationMemberID;
		internal DojoMembership parent;
		internal DojoMemberTypeTemplate memberTypeTemplate;
		internal DojoMembershipTemplate membershipTemplate;
		internal string sessionID;
		internal decimal fee;
		internal DojoMembership priorMembership;
		internal decimal paymentAmount;
		internal bool isProRated;
		internal DateTime createDate;
		internal DateTime modifyDate;
		internal RHInvoiceLine invoiceLine;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoMembership Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoMembership as a Placeholder. Placeholders only contain 
		/// a DojoMembership ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Member
		{
			get
			{
				EnsurePreLoad();
				return member;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(member == null)
					{
						return;
					}
					else
					{
						member = value;
						isSynced = false;
					}
				}
				else
				{
					if(member != null && value.ID == member.ID)
					{
						return; 
					}
					else
					{
						member = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DateTime StartDate
		{
			get
			{
				EnsurePreLoad();
				return startDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= startDate == value;
				startDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime EndDate
		{
			get
			{
				EnsurePreLoad();
				return endDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= endDate == value;
				endDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoOrganization Organization
		{
			get
			{
				EnsurePreLoad();
				return organization;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(organization == null)
					{
						return;
					}
					else
					{
						organization = value;
						isSynced = false;
					}
				}
				else
				{
					if(organization != null && value.ID == organization.ID)
					{
						return; 
					}
					else
					{
						organization = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public string OrganizationMemberID
		{
			get
			{
				EnsurePreLoad();
				return organizationMemberID;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= organizationMemberID == value;
				organizationMemberID = value;
			}
		}

		/// <summary>
		/// The parent membership if this membership was a sub-membership of a membership 
		/// template group.
		/// </summary>
		public DojoMembership Parent
		{
			get
			{
				EnsurePreLoad();
				return parent;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(parent == null)
					{
						return;
					}
					else
					{
						parent = value;
						isSynced = false;
					}
				}
				else
				{
					if(parent != null && value.ID == parent.ID)
					{
						return; 
					}
					else
					{
						parent = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// The parent template of this membership.
		/// </summary>
		public DojoMemberTypeTemplate MemberTypeTemplate
		{
			get
			{
				EnsurePreLoad();
				return memberTypeTemplate;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(memberTypeTemplate == null)
					{
						return;
					}
					else
					{
						memberTypeTemplate = value;
						isSynced = false;
					}
				}
				else
				{
					if(memberTypeTemplate != null && value.ID == memberTypeTemplate.ID)
					{
						return; 
					}
					else
					{
						memberTypeTemplate = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// The parent template for this membership.
		/// </summary>
		public DojoMembershipTemplate MembershipTemplate
		{
			get
			{
				EnsurePreLoad();
				return membershipTemplate;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(membershipTemplate == null)
					{
						return;
					}
					else
					{
						membershipTemplate = value;
						isSynced = false;
					}
				}
				else
				{
					if(membershipTemplate != null && value.ID == membershipTemplate.ID)
					{
						return; 
					}
					else
					{
						membershipTemplate = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// Used to store the session ID for the Registration to prevent exploits.
		/// </summary>
		public string SessionID
		{
			get
			{
				EnsurePreLoad();
				return sessionID;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= sessionID == value;
				sessionID = value;
			}
		}

		/// <summary>
		/// </summary>
		public decimal Fee
		{
			get
			{
				EnsurePreLoad();
				return fee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= fee == value;
				fee = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMembership PriorMembership
		{
			get
			{
				EnsurePreLoad();
				return priorMembership;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(priorMembership == null)
					{
						return;
					}
					else
					{
						priorMembership = value;
						isSynced = false;
					}
				}
				else
				{
					if(priorMembership != null && value.ID == priorMembership.ID)
					{
						return; 
					}
					else
					{
						priorMembership = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public decimal PaymentAmount
		{
			get
			{
				EnsurePreLoad();
				return paymentAmount;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= paymentAmount == value;
				paymentAmount = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool IsProRated
		{
			get
			{
				EnsurePreLoad();
				return isProRated;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isProRated == value;
				isProRated = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime CreateDate
		{
			get
			{
				EnsurePreLoad();
				return createDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= createDate == value;
				createDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public DateTime ModifyDate
		{
			get
			{
				EnsurePreLoad();
				return modifyDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= modifyDate == value;
				modifyDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public RHInvoiceLine InvoiceLine
		{
			get
			{
				EnsurePreLoad();
				return invoiceLine;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(invoiceLine == null)
					{
						return;
					}
					else
					{
						invoiceLine = value;
						isSynced = false;
					}
				}
				else
				{
					if(invoiceLine != null && value.ID == invoiceLine.ID)
					{
						return; 
					}
					else
					{
						invoiceLine = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoMembership.
		/// </summary>
		public DojoMembership()
		{
			sessionID = string.Empty;
			createDate = DateTime.Now;
			modifyDate = DateTime.Now;
		}

		public DojoMembership(int id)
		{
			this.iD = id;
			isSynced = DojoMembershipManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoMembershipManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoMembership object state to the database.
		/// </summary>
		public int Save()
		{

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoMembershipManager._insert(this);
			else
				DojoMembershipManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoMembershipManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoMembership object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoMembership object reflecting the replicated DojoMembership object.</returns>
		public DojoMembership Duplicate()
		{
			DojoMembership clonedDojoMembership = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoMembership.iD = DojoMembershipManager._insert(clonedDojoMembership);
			clonedDojoMembership.isSynced = true;
			return clonedDojoMembership;
		}

		/// <summary>
		/// Overwrites and existing DojoMembership object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoMembershipManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoMembership object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoMembership object reflecting the replicated DojoMembership object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoMembership object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoMembership object reflecting the replicated DojoMembership object.</returns>
		public DojoMembership Clone()
		{
			DojoMembership clonedDojoMembership = new DojoMembership();
			clonedDojoMembership.iD = iD;
			clonedDojoMembership.isSynced = isSynced;
			clonedDojoMembership.startDate = startDate;
			clonedDojoMembership.endDate = endDate;
			clonedDojoMembership.organizationMemberID = organizationMemberID;
			clonedDojoMembership.sessionID = sessionID;
			clonedDojoMembership.fee = fee;
			clonedDojoMembership.paymentAmount = paymentAmount;
			clonedDojoMembership.isProRated = isProRated;
			clonedDojoMembership.createDate = createDate;
			clonedDojoMembership.modifyDate = modifyDate;


			if(member != null)
				clonedDojoMembership.member = member;

			if(organization != null)
				clonedDojoMembership.organization = organization;

			if(parent != null)
				clonedDojoMembership.parent = parent;

			if(memberTypeTemplate != null)
				clonedDojoMembership.memberTypeTemplate = memberTypeTemplate;

			if(membershipTemplate != null)
				clonedDojoMembership.membershipTemplate = membershipTemplate;

			if(priorMembership != null)
				clonedDojoMembership.priorMembership = priorMembership;

			if(invoiceLine != null)
				clonedDojoMembership.invoiceLine = invoiceLine;

			return clonedDojoMembership;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoMembership.
		/// </summary>
		/// <returns> A new DojoMembership object reflecting the cloned DojoMembership object.</returns>
		public DojoMembership Copy()
		{
			DojoMembership dojoMembership = new DojoMembership();
			CopyTo(dojoMembership);
			return dojoMembership;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoMembership.
		/// </summary>
		/// <returns> A new DojoMembership object reflecting the cloned DojoMembership object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoMembership from its children.</param>
		public DojoMembership Copy(bool isolation)
		{
			DojoMembership dojoMembership = new DojoMembership();
			CopyTo(dojoMembership, isolation);
			return dojoMembership;
		}

		/// <summary>
		/// Deep copies the current DojoMembership to another instance of DojoMembership.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoMembership">The DojoMembership to copy to.</param>
		public void CopyTo(DojoMembership dojoMembership)
		{
			CopyTo(dojoMembership, false);
		}

		/// <summary>
		/// Deep copies the current DojoMembership to another instance of DojoMembership.
		/// </summary>
		/// <param name="DojoMembership">The DojoMembership to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoMembership from its children.</param>
		public void CopyTo(DojoMembership dojoMembership, bool isolation)
		{
			dojoMembership.iD = iD;
			dojoMembership.isPlaceHolder = isPlaceHolder;
			dojoMembership.isSynced = isSynced;
			if(member != null)
			{
				if(isolation)
				{
					dojoMembership.member = member.NewPlaceHolder();
				}
				else
				{
					dojoMembership.member = member.Copy(false);
				}
			}
			dojoMembership.startDate = startDate;
			dojoMembership.endDate = endDate;
			if(organization != null)
			{
				if(isolation)
				{
					dojoMembership.organization = organization.NewPlaceHolder();
				}
				else
				{
					dojoMembership.organization = organization.Copy(false);
				}
			}
			dojoMembership.organizationMemberID = organizationMemberID;
			if(parent != null)
			{
				if(isolation)
				{
					dojoMembership.parent = parent.NewPlaceHolder();
				}
				else
				{
					dojoMembership.parent = parent.Copy(false);
				}
			}
			if(memberTypeTemplate != null)
			{
				if(isolation)
				{
					dojoMembership.memberTypeTemplate = memberTypeTemplate.NewPlaceHolder();
				}
				else
				{
					dojoMembership.memberTypeTemplate = memberTypeTemplate.Copy(false);
				}
			}
			if(membershipTemplate != null)
			{
				if(isolation)
				{
					dojoMembership.membershipTemplate = membershipTemplate.NewPlaceHolder();
				}
				else
				{
					dojoMembership.membershipTemplate = membershipTemplate.Copy(false);
				}
			}
			dojoMembership.sessionID = sessionID;
			dojoMembership.fee = fee;
			if(priorMembership != null)
			{
				if(isolation)
				{
					dojoMembership.priorMembership = priorMembership.NewPlaceHolder();
				}
				else
				{
					dojoMembership.priorMembership = priorMembership.Copy(false);
				}
			}
			dojoMembership.paymentAmount = paymentAmount;
			dojoMembership.isProRated = isProRated;
			dojoMembership.createDate = createDate;
			dojoMembership.modifyDate = modifyDate;
			if(invoiceLine != null)
			{
				if(isolation)
				{
					dojoMembership.invoiceLine = invoiceLine.NewPlaceHolder();
				}
				else
				{
					dojoMembership.invoiceLine = invoiceLine.Copy(false);
				}
			}
		}

		public DojoMembership NewPlaceHolder()
		{
			DojoMembership dojoMembership = new DojoMembership();
			dojoMembership.iD = iD;
			dojoMembership.isPlaceHolder = true;
			dojoMembership.isSynced = true;
			return dojoMembership;
		}

		public static DojoMembership NewPlaceHolder(int iD)
		{
			DojoMembership dojoMembership = new DojoMembership();
			dojoMembership.iD = iD;
			dojoMembership.isPlaceHolder = true;
			dojoMembership.isSynced = true;
			return dojoMembership;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoMembership dojoMembership = (DojoMembership) obj;
			return this.iD - dojoMembership.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoMembership dojoMembership)
		{
			return this.iD - dojoMembership.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---

        #region Calculate Fee Methods

        /// <summary>
        /// Readonly rate for Rappahanock support.
        /// </summary>
        public Decimal Rate { get { return Fee; } }
        
        /// <summary>
        /// Readonly quantity for Rappahanock support.
        /// </summary>
        public Decimal Quantity { get { return 1; } }

        /// <summary>
        /// Payment method for Rappahanock support.
        /// </summary>
        /// <param name="amount"></param>
        public void ApplyAmount(decimal amount)
        {
            //PaymentAmount = amount;
        }

        /// <summary>
        /// Payment method for Rappahanock support.
        /// </summary>
        public void PayAmount()
        {
            PaymentAmount = fee;
        }

        public bool LineExpired { get { return DateTime.Now.ToUniversalTime() > EndDate; } }
        public bool LineCartSaveDisabled { get { return false; } }

        /// <summary>
        /// Builds a Sales Order Description for Rappahanock Sales Orders and Invoices.
        /// </summary>
        public string ToSalesOrderDescription()
        {
            System.Text.StringBuilder s = new System.Text.StringBuilder();
            s.Append(MembershipTemplate.Name);
            s.Append(" for ");
            s.Append(member.PrivateContact.FullName);
            return s.ToString();
        }

        #endregion

		//--- End Custom Code ---
	}
}
