/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	/// <summary>
	/// Seminar Option
	/// </summary>
	public class DojoSeminarOption : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal string name;
		internal string description;
		internal decimal fee;
		internal int maxQuantity;
		internal RHItem item;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoSeminarOption Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoSeminarOption as a Placeholder. Placeholders only contain 
		/// a DojoSeminarOption ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Name
		{
			get
			{
				EnsurePreLoad();
				return name;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= name == value;
				name = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Description
		{
			get
			{
				EnsurePreLoad();
				return description;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= description == value;
				description = value;
			}
		}

		/// <summary>
		/// </summary>
		public decimal Fee
		{
			get
			{
				EnsurePreLoad();
				return fee;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= fee == value;
				fee = value;
			}
		}

		/// <summary>
		/// </summary>
		public int MaxQuantity
		{
			get
			{
				EnsurePreLoad();
				return maxQuantity;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= maxQuantity == value;
				maxQuantity = value;
			}
		}

		/// <summary>
		/// </summary>
		public RHItem Item
		{
			get
			{
				EnsurePreLoad();
				return item;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(item == null)
					{
						return;
					}
					else
					{
						item = value;
						isSynced = false;
					}
				}
				else
				{
					if(item != null && value.ID == item.ID)
					{
						return; 
					}
					else
					{
						item = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoSeminarOption.
		/// </summary>
		public DojoSeminarOption()
		{
		}

		public DojoSeminarOption(int id)
		{
			this.iD = id;
			isSynced = DojoSeminarOptionManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoSeminarOptionManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoSeminarOption object state to the database.
		/// </summary>
		public int Save()
		{

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoSeminarOptionManager._insert(this);
			else
				DojoSeminarOptionManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoSeminarOptionManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoSeminarOption object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoSeminarOption object reflecting the replicated DojoSeminarOption object.</returns>
		public DojoSeminarOption Duplicate()
		{
			DojoSeminarOption clonedDojoSeminarOption = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoSeminarOption.iD = DojoSeminarOptionManager._insert(clonedDojoSeminarOption);
			clonedDojoSeminarOption.isSynced = true;
			return clonedDojoSeminarOption;
		}

		/// <summary>
		/// Overwrites and existing DojoSeminarOption object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoSeminarOptionManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoSeminarOption object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoSeminarOption object reflecting the replicated DojoSeminarOption object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoSeminarOption object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoSeminarOption object reflecting the replicated DojoSeminarOption object.</returns>
		public DojoSeminarOption Clone()
		{
			DojoSeminarOption clonedDojoSeminarOption = new DojoSeminarOption();
			clonedDojoSeminarOption.iD = iD;
			clonedDojoSeminarOption.isSynced = isSynced;
			clonedDojoSeminarOption.name = name;
			clonedDojoSeminarOption.description = description;
			clonedDojoSeminarOption.fee = fee;
			clonedDojoSeminarOption.maxQuantity = maxQuantity;


			if(item != null)
				clonedDojoSeminarOption.item = item;

			return clonedDojoSeminarOption;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoSeminarOption.
		/// </summary>
		/// <returns> A new DojoSeminarOption object reflecting the cloned DojoSeminarOption object.</returns>
		public DojoSeminarOption Copy()
		{
			DojoSeminarOption dojoSeminarOption = new DojoSeminarOption();
			CopyTo(dojoSeminarOption);
			return dojoSeminarOption;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoSeminarOption.
		/// </summary>
		/// <returns> A new DojoSeminarOption object reflecting the cloned DojoSeminarOption object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoSeminarOption from its children.</param>
		public DojoSeminarOption Copy(bool isolation)
		{
			DojoSeminarOption dojoSeminarOption = new DojoSeminarOption();
			CopyTo(dojoSeminarOption, isolation);
			return dojoSeminarOption;
		}

		/// <summary>
		/// Deep copies the current DojoSeminarOption to another instance of DojoSeminarOption.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoSeminarOption">The DojoSeminarOption to copy to.</param>
		public void CopyTo(DojoSeminarOption dojoSeminarOption)
		{
			CopyTo(dojoSeminarOption, false);
		}

		/// <summary>
		/// Deep copies the current DojoSeminarOption to another instance of DojoSeminarOption.
		/// </summary>
		/// <param name="DojoSeminarOption">The DojoSeminarOption to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoSeminarOption from its children.</param>
		public void CopyTo(DojoSeminarOption dojoSeminarOption, bool isolation)
		{
			dojoSeminarOption.iD = iD;
			dojoSeminarOption.isPlaceHolder = isPlaceHolder;
			dojoSeminarOption.isSynced = isSynced;
			dojoSeminarOption.name = name;
			dojoSeminarOption.description = description;
			dojoSeminarOption.fee = fee;
			dojoSeminarOption.maxQuantity = maxQuantity;
			if(item != null)
			{
				if(isolation)
				{
					dojoSeminarOption.item = item.NewPlaceHolder();
				}
				else
				{
					dojoSeminarOption.item = item.Copy(false);
				}
			}
		}

		public DojoSeminarOption NewPlaceHolder()
		{
			DojoSeminarOption dojoSeminarOption = new DojoSeminarOption();
			dojoSeminarOption.iD = iD;
			dojoSeminarOption.isPlaceHolder = true;
			dojoSeminarOption.isSynced = true;
			return dojoSeminarOption;
		}

		public static DojoSeminarOption NewPlaceHolder(int iD)
		{
			DojoSeminarOption dojoSeminarOption = new DojoSeminarOption();
			dojoSeminarOption.iD = iD;
			dojoSeminarOption.isPlaceHolder = true;
			dojoSeminarOption.isSynced = true;
			return dojoSeminarOption;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoSeminarOption dojoSeminarOption = (DojoSeminarOption) obj;
			return this.iD - dojoSeminarOption.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoSeminarOption dojoSeminarOption)
		{
			return this.iD - dojoSeminarOption.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

	}
}
