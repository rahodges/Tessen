/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;

namespace Amns.Tessen
{
	/// <summary>
	/// Holds information on a promotion.
	/// </summary>
	public class DojoPromotion : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal DojoMember member;
		internal DojoTest test;
		internal DateTime promotionDate;
		internal DojoRank promotionRank;
		internal DojoRank lastRank;
		internal DojoPromotionStatus status;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoPromotion Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoPromotion as a Placeholder. Placeholders only contain 
		/// a DojoPromotion ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoMember Member
		{
			get
			{
				EnsurePreLoad();
				return member;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(member == null)
					{
						return;
					}
					else
					{
						member = value;
						isSynced = false;
					}
				}
				else
				{
					if(member != null && value.ID == member.ID)
					{
						return; 
					}
					else
					{
						member = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoTest Test
		{
			get
			{
				EnsurePreLoad();
				return test;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(test == null)
					{
						return;
					}
					else
					{
						test = value;
						isSynced = false;
					}
				}
				else
				{
					if(test != null && value.ID == test.ID)
					{
						return; 
					}
					else
					{
						test = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DateTime PromotionDate
		{
			get
			{
				EnsurePreLoad();
				return promotionDate;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= promotionDate == value;
				promotionDate = value;
			}
		}

		/// <summary>
		/// </summary>
		public DojoRank PromotionRank
		{
			get
			{
				EnsurePreLoad();
				return promotionRank;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(promotionRank == null)
					{
						return;
					}
					else
					{
						promotionRank = value;
						isSynced = false;
					}
				}
				else
				{
					if(promotionRank != null && value.ID == promotionRank.ID)
					{
						return; 
					}
					else
					{
						promotionRank = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoRank LastRank
		{
			get
			{
				EnsurePreLoad();
				return lastRank;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(lastRank == null)
					{
						return;
					}
					else
					{
						lastRank = value;
						isSynced = false;
					}
				}
				else
				{
					if(lastRank != null && value.ID == lastRank.ID)
					{
						return; 
					}
					else
					{
						lastRank = value;
						isSynced = false;
					}
				}
			}
		}

		/// <summary>
		/// </summary>
		public DojoPromotionStatus Status
		{
			get
			{
				EnsurePreLoad();
				return status;
			}
			set
			{
				EnsurePreLoad();
				if(value == null)
				{
					if(status == null)
					{
						return;
					}
					else
					{
						status = value;
						isSynced = false;
					}
				}
				else
				{
					if(status != null && value.ID == status.ID)
					{
						return; 
					}
					else
					{
						status = value;
						isSynced = false;
					}
				}
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoPromotion.
		/// </summary>
		public DojoPromotion()
		{
		}

		public DojoPromotion(int id)
		{
			this.iD = id;
			isSynced = DojoPromotionManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoPromotionManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoPromotion object state to the database.
		/// </summary>
		public int Save()
		{
			if(member != null)
				member.Save();
			if(test != null)
				test.Save();
			if(promotionRank != null)
				promotionRank.Save();
			if(lastRank != null)
				lastRank.Save();

			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoPromotionManager._insert(this);
			else
				DojoPromotionManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoPromotionManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoPromotion object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoPromotion object reflecting the replicated DojoPromotion object.</returns>
		public DojoPromotion Duplicate()
		{
			DojoPromotion clonedDojoPromotion = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoPromotion.iD = DojoPromotionManager._insert(clonedDojoPromotion);
			clonedDojoPromotion.isSynced = true;
			return clonedDojoPromotion;
		}

		/// <summary>
		/// Overwrites and existing DojoPromotion object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoPromotionManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoPromotion object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoPromotion object reflecting the replicated DojoPromotion object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoPromotion object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoPromotion object reflecting the replicated DojoPromotion object.</returns>
		public DojoPromotion Clone()
		{
			DojoPromotion clonedDojoPromotion = new DojoPromotion();
			clonedDojoPromotion.iD = iD;
			clonedDojoPromotion.isSynced = isSynced;
			clonedDojoPromotion.promotionDate = promotionDate;


			if(member != null)
				clonedDojoPromotion.member = member;

			if(test != null)
				clonedDojoPromotion.test = test;

			if(promotionRank != null)
				clonedDojoPromotion.promotionRank = promotionRank;

			if(lastRank != null)
				clonedDojoPromotion.lastRank = lastRank;

			if(status != null)
				clonedDojoPromotion.status = status;

			return clonedDojoPromotion;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoPromotion.
		/// </summary>
		/// <returns> A new DojoPromotion object reflecting the cloned DojoPromotion object.</returns>
		public DojoPromotion Copy()
		{
			DojoPromotion dojoPromotion = new DojoPromotion();
			CopyTo(dojoPromotion);
			return dojoPromotion;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoPromotion.
		/// </summary>
		/// <returns> A new DojoPromotion object reflecting the cloned DojoPromotion object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoPromotion from its children.</param>
		public DojoPromotion Copy(bool isolation)
		{
			DojoPromotion dojoPromotion = new DojoPromotion();
			CopyTo(dojoPromotion, isolation);
			return dojoPromotion;
		}

		/// <summary>
		/// Deep copies the current DojoPromotion to another instance of DojoPromotion.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoPromotion">The DojoPromotion to copy to.</param>
		public void CopyTo(DojoPromotion dojoPromotion)
		{
			CopyTo(dojoPromotion, false);
		}

		/// <summary>
		/// Deep copies the current DojoPromotion to another instance of DojoPromotion.
		/// </summary>
		/// <param name="DojoPromotion">The DojoPromotion to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoPromotion from its children.</param>
		public void CopyTo(DojoPromotion dojoPromotion, bool isolation)
		{
			dojoPromotion.iD = iD;
			dojoPromotion.isPlaceHolder = isPlaceHolder;
			dojoPromotion.isSynced = isSynced;
			if(member != null)
			{
				if(isolation)
				{
					dojoPromotion.member = member.NewPlaceHolder();
				}
				else
				{
					dojoPromotion.member = member.Copy(false);
				}
			}
			if(test != null)
			{
				if(isolation)
				{
					dojoPromotion.test = test.NewPlaceHolder();
				}
				else
				{
					dojoPromotion.test = test.Copy(false);
				}
			}
			dojoPromotion.promotionDate = promotionDate;
			if(promotionRank != null)
			{
				if(isolation)
				{
					dojoPromotion.promotionRank = promotionRank.NewPlaceHolder();
				}
				else
				{
					dojoPromotion.promotionRank = promotionRank.Copy(false);
				}
			}
			if(lastRank != null)
			{
				if(isolation)
				{
					dojoPromotion.lastRank = lastRank.NewPlaceHolder();
				}
				else
				{
					dojoPromotion.lastRank = lastRank.Copy(false);
				}
			}
			if(status != null)
			{
				if(isolation)
				{
					dojoPromotion.status = status.NewPlaceHolder();
				}
				else
				{
					dojoPromotion.status = status.Copy(false);
				}
			}
		}

		public DojoPromotion NewPlaceHolder()
		{
			DojoPromotion dojoPromotion = new DojoPromotion();
			dojoPromotion.iD = iD;
			dojoPromotion.isPlaceHolder = true;
			dojoPromotion.isSynced = true;
			return dojoPromotion;
		}

		public static DojoPromotion NewPlaceHolder(int iD)
		{
			DojoPromotion dojoPromotion = new DojoPromotion();
			dojoPromotion.iD = iD;
			dojoPromotion.isPlaceHolder = true;
			dojoPromotion.isSynced = true;
			return dojoPromotion;
		}

		private void childrenCollection_Changed(object sender, System.EventArgs e)
		{
			isSynced = false;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoPromotion dojoPromotion = (DojoPromotion) obj;
			return this.iD - dojoPromotion.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoPromotion dojoPromotion)
		{
			return this.iD - dojoPromotion.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		//--- Begin Custom Code ---
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																											
		public string Name
		{
			get
			{
				return member.PrivateContact.FullName;
			}
		}
		//--- End Custom Code ---
	}
}
