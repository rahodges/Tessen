/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.People;
using Amns.GreyFox.Security;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoAttendanceEntryFlags : int { Class,
				ClassInstructor,
				ClassParentSeminar,
				ClassParentDefinition,
				ClassLocation,
				ClassAccessControlGroup,
				Member,
				MemberPrivateContact,
				MemberEmergencyContact,
				MemberPublicContact,
				MemberParent,
				MemberRoot,
				MemberMemberType,
				MemberMemberTypeTemplate,
				MemberMembership1,
				MemberMembership2,
				MemberMembership3,
				MemberMembership4,
				MemberMembership5,
				MemberInstructor1,
				MemberInstructor2,
				MemberInstructor3,
				MemberPromotionFlags,
				MemberRank,
				MemberUserAccount,
				MemberCustomer,
				Rank,
				RankPromotionRank,
				RankItem};

	#endregion

	/// <summary>
	/// Datamanager for DojoAttendanceEntry objects.
	/// </summary>
	public class DojoAttendanceEntryManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_Attendance";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoAttendanceEntryID",
			"SigninTime",
			"SignoutTime",
			"ClassID",
			"MemberID",
			"RankID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoAttendanceEntryID", "LONG", "-1" },
			{ "SigninTime", "DATETIME", "" },
			{ "SignoutTime", "DATETIME", "" },
			{ "ClassID", "LONG", "null" },
			{ "MemberID", "LONG", "null" },
			{ "RankID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoAttendanceEntryManager()
		{
		}

		public DojoAttendanceEntryManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoAttendanceEntryManager.isInitialized)
			{
				DojoAttendanceEntryManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoAttendanceEntry into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoAttendanceEntry">The DojoAttendanceEntry to insert into the database.</param>
		internal static int _insert(DojoAttendanceEntry dojoAttendanceEntry)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_Attendance " +
				"(" +
				"SigninTime," +
				"SignoutTime," +
				"ClassID," +
				"MemberID," +
				"RankID) VALUES (" +
				"@SigninTime," +
				"@SignoutTime," +
				"@ClassID," +
				"@MemberID," +
				"@RankID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoAttendanceEntry);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoAttendanceEntry);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoAttendanceEntry dojoAttendanceEntry)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_Attendance SET SigninTime=@SigninTime," +
				"SignoutTime=@SignoutTime," +
				"ClassID=@ClassID," +
				"MemberID=@MemberID," +
				"RankID=@RankID WHERE DojoAttendanceEntryID=@DojoAttendanceEntryID;");

			fillParameters(database, dbCommand, dojoAttendanceEntry);
			database.AddInParameter(dbCommand, "DojoAttendanceEntryID", DbType.Int32, dojoAttendanceEntry.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			return dojoAttendanceEntry.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoAttendanceEntry dojoAttendanceEntry)
		{
			#region Default

			addParameter(database, dbCommand, "@SigninTime", DbType.Date, dojoAttendanceEntry.signinTime);
			addParameter(database, dbCommand, "@SignoutTime", DbType.Date, dojoAttendanceEntry.signoutTime);
			if(dojoAttendanceEntry._class == null)
			{
				addParameter(database, dbCommand, "@ClassID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ClassID", DbType.Int32, dojoAttendanceEntry._class.ID);
			}
			if(dojoAttendanceEntry.member == null)
			{
				addParameter(database, dbCommand, "@MemberID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MemberID", DbType.Int32, dojoAttendanceEntry.member.ID);
			}
			if(dojoAttendanceEntry.rank == null)
			{
				addParameter(database, dbCommand, "@RankID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@RankID", DbType.Int32, dojoAttendanceEntry.rank.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoAttendanceEntry dojoAttendanceEntry)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_Attendance WHERE DojoAttendanceEntryID=");
			query.Append(dojoAttendanceEntry.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoAttendanceEntryID '{0}'.", 
					dojoAttendanceEntry.iD)));
			}

			FillFromReader(dojoAttendanceEntry, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoAttendanceEntryCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoAttendanceEntryCollection GetCollection(string whereClause, string sortClause, params DojoAttendanceEntryFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoAttendanceEntryCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoAttendanceEntryFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoAttendanceEntryCollection dojoAttendanceEntryCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoAttendanceEntry.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int _classOffset = -1;
			int _classInstructorOffset = -1;
			int _classParentSeminarOffset = -1;
			int _classParentDefinitionOffset = -1;
			int _classLocationOffset = -1;
			int _classAccessControlGroupOffset = -1;
			int memberOffset = -1;
			int memberPrivateContactOffset = -1;
			int memberEmergencyContactOffset = -1;
			int memberPublicContactOffset = -1;
			int memberParentOffset = -1;
			int memberRootOffset = -1;
			int memberMemberTypeOffset = -1;
			int memberMemberTypeTemplateOffset = -1;
			int memberMembership1Offset = -1;
			int memberMembership2Offset = -1;
			int memberMembership3Offset = -1;
			int memberMembership4Offset = -1;
			int memberMembership5Offset = -1;
			int memberInstructor1Offset = -1;
			int memberInstructor2Offset = -1;
			int memberInstructor3Offset = -1;
			int memberRankOffset = -1;
			int memberUserAccountOffset = -1;
			int memberCustomerOffset = -1;
			int rankOffset = -1;
			int rankPromotionRankOffset = -1;
			int rankItemOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoAttendanceEntryFlags.Class:
							for(int i = 0; i <= DojoClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Class.");
								query.Append(DojoClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							_classOffset = innerJoinOffset;
							innerJoinOffset = _classOffset + DojoClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.ClassInstructor:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Class_Instructor.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							_classInstructorOffset = innerJoinOffset;
							innerJoinOffset = _classInstructorOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.ClassParentSeminar:
							for(int i = 0; i <= DojoSeminarManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Class_ParentSeminar.");
								query.Append(DojoSeminarManager.InnerJoinFields[i]);
								query.Append(",");
							}
							_classParentSeminarOffset = innerJoinOffset;
							innerJoinOffset = _classParentSeminarOffset + DojoSeminarManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.ClassParentDefinition:
							for(int i = 0; i <= DojoClassDefinitionManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Class_ParentDefinition.");
								query.Append(DojoClassDefinitionManager.InnerJoinFields[i]);
								query.Append(",");
							}
							_classParentDefinitionOffset = innerJoinOffset;
							innerJoinOffset = _classParentDefinitionOffset + DojoClassDefinitionManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.ClassLocation:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Class_Location.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							_classLocationOffset = innerJoinOffset;
							innerJoinOffset = _classLocationOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.ClassAccessControlGroup:
							for(int i = 0; i <= DojoAccessControlGroupManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Class_AccessControlGroup.");
								query.Append(DojoAccessControlGroupManager.InnerJoinFields[i]);
								query.Append(",");
							}
							_classAccessControlGroupOffset = innerJoinOffset;
							innerJoinOffset = _classAccessControlGroupOffset + DojoAccessControlGroupManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberOffset = innerJoinOffset;
							innerJoinOffset = memberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = memberPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberEmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberEmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = memberEmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberPublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberPublicContactOffset = innerJoinOffset;
							innerJoinOffset = memberPublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberParent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberParentOffset = innerJoinOffset;
							innerJoinOffset = memberParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberRoot:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberRootOffset = innerJoinOffset;
							innerJoinOffset = memberRootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = memberMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = memberMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberMembership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership1Offset = innerJoinOffset;
							innerJoinOffset = memberMembership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberMembership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership2Offset = innerJoinOffset;
							innerJoinOffset = memberMembership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberMembership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership3Offset = innerJoinOffset;
							innerJoinOffset = memberMembership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberMembership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership4Offset = innerJoinOffset;
							innerJoinOffset = memberMembership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberMembership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership5Offset = innerJoinOffset;
							innerJoinOffset = memberMembership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberInstructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor1Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberInstructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor2Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberInstructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor3Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberRankOffset = innerJoinOffset;
							innerJoinOffset = memberRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberUserAccountOffset = innerJoinOffset;
							innerJoinOffset = memberUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.MemberCustomer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberCustomerOffset = innerJoinOffset;
							innerJoinOffset = memberCustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankOffset = innerJoinOffset;
							innerJoinOffset = rankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.RankPromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Rank_PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankPromotionRankOffset = innerJoinOffset;
							innerJoinOffset = rankPromotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAttendanceEntryFlags.RankItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Rank_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankItemOffset = innerJoinOffset;
							innerJoinOffset = rankItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_Attendance AS DojoAttendanceEntry");
			}
			else
			{
				query.Append(" FROM kitTessen_Attendance AS DojoAttendanceEntry");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoAttendanceEntryFlags.Class:
							query.Append(" LEFT JOIN kitTessen_Classes AS Class ON DojoAttendanceEntry.ClassID = Class.DojoClassID)");
							break;
						case DojoAttendanceEntryFlags.ClassInstructor:
							query.Append(" LEFT JOIN kitTessen_Members AS Class_Instructor ON Class.InstructorID = Class_Instructor.DojoMemberID)");
							break;
						case DojoAttendanceEntryFlags.ClassParentSeminar:
							query.Append(" LEFT JOIN kitTessen_Seminars AS Class_ParentSeminar ON Class.ParentSeminarID = Class_ParentSeminar.DojoSeminarID)");
							break;
						case DojoAttendanceEntryFlags.ClassParentDefinition:
							query.Append(" LEFT JOIN kitTessen_ClassDefinitions AS Class_ParentDefinition ON Class.ParentDefinitionID = Class_ParentDefinition.DojoClassDefinitionID)");
							break;
						case DojoAttendanceEntryFlags.ClassLocation:
							query.Append(" LEFT JOIN kitTessen_Locations AS Class_Location ON Class.LocationID = Class_Location.GreyFoxContactID)");
							break;
						case DojoAttendanceEntryFlags.ClassAccessControlGroup:
							query.Append(" LEFT JOIN kitTessen_AccessControlGroups AS Class_AccessControlGroup ON Class.AccessControlGroupID = Class_AccessControlGroup.DojoAccessControlGroupID)");
							break;
						case DojoAttendanceEntryFlags.Member:
							query.Append(" LEFT JOIN kitTessen_Members AS Member ON DojoAttendanceEntry.MemberID = Member.DojoMemberID)");
							break;
						case DojoAttendanceEntryFlags.MemberPrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Member_PrivateContact ON Member.PrivateContactID = Member_PrivateContact.GreyFoxContactID)");
							break;
						case DojoAttendanceEntryFlags.MemberEmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Member_EmergencyContact ON Member.EmergencyContactID = Member_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoAttendanceEntryFlags.MemberPublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Member_PublicContact ON Member.PublicContactID = Member_PublicContact.GreyFoxContactID)");
							break;
						case DojoAttendanceEntryFlags.MemberParent:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Parent ON Member.ParentID = Member_Parent.DojoMemberID)");
							break;
						case DojoAttendanceEntryFlags.MemberRoot:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Root ON Member.RootID = Member_Root.DojoMemberID)");
							break;
						case DojoAttendanceEntryFlags.MemberMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Member_MemberType ON Member.MemberTypeID = Member_MemberType.DojoMemberTypeID)");
							break;
						case DojoAttendanceEntryFlags.MemberMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Member_MemberTypeTemplate ON Member.MemberTypeTemplateID = Member_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoAttendanceEntryFlags.MemberMembership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership1 ON Member.Membership1ID = Member_Membership1.DojoMembershipID)");
							break;
						case DojoAttendanceEntryFlags.MemberMembership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership2 ON Member.Membership2ID = Member_Membership2.DojoMembershipID)");
							break;
						case DojoAttendanceEntryFlags.MemberMembership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership3 ON Member.Membership3ID = Member_Membership3.DojoMembershipID)");
							break;
						case DojoAttendanceEntryFlags.MemberMembership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership4 ON Member.Membership4ID = Member_Membership4.DojoMembershipID)");
							break;
						case DojoAttendanceEntryFlags.MemberMembership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership5 ON Member.Membership5ID = Member_Membership5.DojoMembershipID)");
							break;
						case DojoAttendanceEntryFlags.MemberInstructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor1 ON Member.Instructor1ID = Member_Instructor1.DojoMemberID)");
							break;
						case DojoAttendanceEntryFlags.MemberInstructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor2 ON Member.Instructor2ID = Member_Instructor2.DojoMemberID)");
							break;
						case DojoAttendanceEntryFlags.MemberInstructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor3 ON Member.Instructor3ID = Member_Instructor3.DojoMemberID)");
							break;
						case DojoAttendanceEntryFlags.MemberRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Member_Rank ON Member.RankID = Member_Rank.DojoRankID)");
							break;
						case DojoAttendanceEntryFlags.MemberUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Member_UserAccount ON Member.UserAccountID = Member_UserAccount.GreyFoxUserID)");
							break;
						case DojoAttendanceEntryFlags.MemberCustomer:
							query.Append(" LEFT JOIN RH_Customers AS Member_Customer ON Member.CustomerID = Member_Customer.RHCustomerID)");
							break;
						case DojoAttendanceEntryFlags.Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Rank ON DojoAttendanceEntry.RankID = Rank.DojoRankID)");
							break;
						case DojoAttendanceEntryFlags.RankPromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Rank_PromotionRank ON Rank.PromotionRankID = Rank_PromotionRank.DojoRankID)");
							break;
						case DojoAttendanceEntryFlags.RankItem:
							query.Append(" LEFT JOIN RH_Items AS Rank_Item ON Rank.ItemID = Rank_Item.RHItemID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoAttendanceEntryCollection = new DojoAttendanceEntryCollection();

			while(r.Read())
			{
				DojoAttendanceEntry dojoAttendanceEntry = ParseFromReader(r, 0, 1);

				// Fill Class
				if(_classOffset != -1 && !r.IsDBNull(_classOffset))
				{
					DojoClassManager.FillFromReader(dojoAttendanceEntry._class, r, _classOffset, _classOffset+1);

					// Fill 
					if(_classInstructorOffset != -1 && !r.IsDBNull(_classInstructorOffset))
						DojoMemberManager.FillFromReader(dojoAttendanceEntry._class.Instructor, r, _classInstructorOffset, _classInstructorOffset+1);

					// Fill 
					if(_classParentSeminarOffset != -1 && !r.IsDBNull(_classParentSeminarOffset))
						DojoSeminarManager.FillFromReader(dojoAttendanceEntry._class.ParentSeminar, r, _classParentSeminarOffset, _classParentSeminarOffset+1);

					// Fill 
					if(_classParentDefinitionOffset != -1 && !r.IsDBNull(_classParentDefinitionOffset))
						DojoClassDefinitionManager.FillFromReader(dojoAttendanceEntry._class.ParentDefinition, r, _classParentDefinitionOffset, _classParentDefinitionOffset+1);

					// Fill 
					if(_classLocationOffset != -1 && !r.IsDBNull(_classLocationOffset))
						GreyFoxContactManager.FillFromReader(dojoAttendanceEntry._class.Location, "kitTessen_Locations", r, _classLocationOffset, _classLocationOffset+1);

					// Fill 
					if(_classAccessControlGroupOffset != -1 && !r.IsDBNull(_classAccessControlGroupOffset))
						DojoAccessControlGroupManager.FillFromReader(dojoAttendanceEntry._class.AccessControlGroup, r, _classAccessControlGroupOffset, _classAccessControlGroupOffset+1);

				}

				// Fill Member
				if(memberOffset != -1 && !r.IsDBNull(memberOffset))
				{
					DojoMemberManager.FillFromReader(dojoAttendanceEntry.member, r, memberOffset, memberOffset+1);

					// Fill 
					if(memberPrivateContactOffset != -1 && !r.IsDBNull(memberPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoAttendanceEntry.member.PrivateContact, "kitTessen_Members_PrivateContacts", r, memberPrivateContactOffset, memberPrivateContactOffset+1);

					// Fill 
					if(memberEmergencyContactOffset != -1 && !r.IsDBNull(memberEmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoAttendanceEntry.member.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, memberEmergencyContactOffset, memberEmergencyContactOffset+1);

					// Fill 
					if(memberPublicContactOffset != -1 && !r.IsDBNull(memberPublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoAttendanceEntry.member.PublicContact, "kitTessen_Members_PublicContacts", r, memberPublicContactOffset, memberPublicContactOffset+1);

					// Fill 
					if(memberParentOffset != -1 && !r.IsDBNull(memberParentOffset))
						DojoMemberManager.FillFromReader(dojoAttendanceEntry.member.Parent, r, memberParentOffset, memberParentOffset+1);

					// Fill 
					if(memberRootOffset != -1 && !r.IsDBNull(memberRootOffset))
						DojoMemberManager.FillFromReader(dojoAttendanceEntry.member.Root, r, memberRootOffset, memberRootOffset+1);

					// Fill 
					if(memberMemberTypeOffset != -1 && !r.IsDBNull(memberMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoAttendanceEntry.member.MemberType, r, memberMemberTypeOffset, memberMemberTypeOffset+1);

					// Fill 
					if(memberMemberTypeTemplateOffset != -1 && !r.IsDBNull(memberMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoAttendanceEntry.member.MemberTypeTemplate, r, memberMemberTypeTemplateOffset, memberMemberTypeTemplateOffset+1);

					// Fill 
					if(memberMembership1Offset != -1 && !r.IsDBNull(memberMembership1Offset))
						DojoMembershipManager.FillFromReader(dojoAttendanceEntry.member.Membership1, r, memberMembership1Offset, memberMembership1Offset+1);

					// Fill 
					if(memberMembership2Offset != -1 && !r.IsDBNull(memberMembership2Offset))
						DojoMembershipManager.FillFromReader(dojoAttendanceEntry.member.Membership2, r, memberMembership2Offset, memberMembership2Offset+1);

					// Fill 
					if(memberMembership3Offset != -1 && !r.IsDBNull(memberMembership3Offset))
						DojoMembershipManager.FillFromReader(dojoAttendanceEntry.member.Membership3, r, memberMembership3Offset, memberMembership3Offset+1);

					// Fill 
					if(memberMembership4Offset != -1 && !r.IsDBNull(memberMembership4Offset))
						DojoMembershipManager.FillFromReader(dojoAttendanceEntry.member.Membership4, r, memberMembership4Offset, memberMembership4Offset+1);

					// Fill 
					if(memberMembership5Offset != -1 && !r.IsDBNull(memberMembership5Offset))
						DojoMembershipManager.FillFromReader(dojoAttendanceEntry.member.Membership5, r, memberMembership5Offset, memberMembership5Offset+1);

					// Fill 
					if(memberInstructor1Offset != -1 && !r.IsDBNull(memberInstructor1Offset))
						DojoMemberManager.FillFromReader(dojoAttendanceEntry.member.Instructor1, r, memberInstructor1Offset, memberInstructor1Offset+1);

					// Fill 
					if(memberInstructor2Offset != -1 && !r.IsDBNull(memberInstructor2Offset))
						DojoMemberManager.FillFromReader(dojoAttendanceEntry.member.Instructor2, r, memberInstructor2Offset, memberInstructor2Offset+1);

					// Fill 
					if(memberInstructor3Offset != -1 && !r.IsDBNull(memberInstructor3Offset))
						DojoMemberManager.FillFromReader(dojoAttendanceEntry.member.Instructor3, r, memberInstructor3Offset, memberInstructor3Offset+1);

					// Fill 
					if(memberRankOffset != -1 && !r.IsDBNull(memberRankOffset))
						DojoRankManager.FillFromReader(dojoAttendanceEntry.member.Rank, r, memberRankOffset, memberRankOffset+1);

					// Fill 
					if(memberUserAccountOffset != -1 && !r.IsDBNull(memberUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoAttendanceEntry.member.UserAccount, r, memberUserAccountOffset, memberUserAccountOffset+1);

					// Fill 
					if(memberCustomerOffset != -1 && !r.IsDBNull(memberCustomerOffset))
						RHCustomerManager.FillFromReader(dojoAttendanceEntry.member.Customer, r, memberCustomerOffset, memberCustomerOffset+1);

				}

				// Fill Rank
				if(rankOffset != -1 && !r.IsDBNull(rankOffset))
				{
					DojoRankManager.FillFromReader(dojoAttendanceEntry.rank, r, rankOffset, rankOffset+1);

					// Fill 
					if(rankPromotionRankOffset != -1 && !r.IsDBNull(rankPromotionRankOffset))
						DojoRankManager.FillFromReader(dojoAttendanceEntry.rank.PromotionRank, r, rankPromotionRankOffset, rankPromotionRankOffset+1);

					// Fill 
					if(rankItemOffset != -1 && !r.IsDBNull(rankItemOffset))
						RHItemManager.FillFromReader(dojoAttendanceEntry.rank.Item, r, rankItemOffset, rankItemOffset+1);

				}

				dojoAttendanceEntryCollection.Add(dojoAttendanceEntry);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoAttendanceEntryCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoAttendanceEntry ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoAttendanceEntry dojoAttendanceEntry = new DojoAttendanceEntry();
			FillFromReader(dojoAttendanceEntry, r, idOffset, dataOffset);
			return dojoAttendanceEntry;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoAttendanceEntry dojoAttendanceEntry, IDataReader r, int idOffset, int dataOffset)
		{
			dojoAttendanceEntry.iD = r.GetInt32(idOffset);
			dojoAttendanceEntry.isSynced = true;
			dojoAttendanceEntry.isPlaceHolder = false;

			dojoAttendanceEntry.signinTime = r.GetDateTime(0+dataOffset);
			if(!r.IsDBNull(1+dataOffset)) 
				dojoAttendanceEntry.signoutTime = r.GetDateTime(1+dataOffset);
			else
				dojoAttendanceEntry.signoutTime = DateTime.MinValue;
			if(!r.IsDBNull(2+dataOffset) && r.GetInt32(2+dataOffset) > 0)
			{
				dojoAttendanceEntry._class = DojoClass.NewPlaceHolder(r.GetInt32(2+dataOffset));
			}
			if(!r.IsDBNull(3+dataOffset) && r.GetInt32(3+dataOffset) > 0)
			{
				dojoAttendanceEntry.member = DojoMember.NewPlaceHolder(r.GetInt32(3+dataOffset));
			}
			if(!r.IsDBNull(4+dataOffset) && r.GetInt32(4+dataOffset) > 0)
			{
				dojoAttendanceEntry.rank = DojoRank.NewPlaceHolder(r.GetInt32(4+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_Attendance WHERE DojoAttendanceEntryID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_Attendance ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_Attendance_Class FOREIGN KEY (ClassID) REFERENCES kitTessen_Classes (DojoClassID),");
			query.Append(" CONSTRAINT FK_kitTessen_Attendance_Member FOREIGN KEY (MemberID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_Attendance_Rank FOREIGN KEY (RankID) REFERENCES kitTessen_Ranks (DojoRankID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_Attendance ");
				query.Append(" (DojoAttendanceEntryID COUNTER(1,1) CONSTRAINT PK_kitTessen_Attendance PRIMARY KEY, " +
					"SigninTime DATETIME," +
					"SignoutTime DATETIME," +
					"ClassID LONG," +
					"MemberID LONG," +
					"RankID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_Attendance ");
				query.Append(" (DojoAttendanceEntryID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_Attendance PRIMARY KEY, " +
					"SigninTime DATETIME," +
					"SignoutTime DATETIME," +
					"ClassID INT," +
					"MemberID INT," +
					"RankID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		//--- Begin Custom Code ---

        public int ClassCountByMember(int memberID)
        {
            Database database = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = database.GetSqlStringCommand("SELECT COUNT(*) " +
                "FROM kitTessen_Attendance WHERE MemberID=@MemberID;");
            database.AddInParameter(dbCommand, "@MemberID", DbType.Int32, memberID);
            int count = (int)database.ExecuteScalar(dbCommand);
            return count;
        }

		//--- End Custom Code ---
	}
}

