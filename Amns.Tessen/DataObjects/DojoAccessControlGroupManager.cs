/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoAccessControlGroupFlags : int { AllowedMemberType1,
				AllowedMemberType1Class,
				AllowedMemberType1Member,
				AllowedMemberType1Rank,
				AllowedMemberType2,
				AllowedMemberType2Class,
				AllowedMemberType2Member,
				AllowedMemberType2Rank,
				AllowedMemberType3,
				AllowedMemberType3Class,
				AllowedMemberType3Member,
				AllowedMemberType3Rank,
				AllowedMemberType4,
				AllowedMemberType4Class,
				AllowedMemberType4Member,
				AllowedMemberType4Rank,
				AllowedMemberType5,
				AllowedMemberType5Class,
				AllowedMemberType5Member,
				AllowedMemberType5Rank,
				DeniedMemberType1,
				DeniedMemberType1Class,
				DeniedMemberType1Member,
				DeniedMemberType1Rank,
				DeniedMemberType2,
				DeniedMemberType2Class,
				DeniedMemberType2Member,
				DeniedMemberType2Rank,
				DeniedMemberType3,
				DeniedMemberType3Class,
				DeniedMemberType3Member,
				DeniedMemberType3Rank,
				DeniedMemberType4,
				DeniedMemberType4Class,
				DeniedMemberType4Member,
				DeniedMemberType4Rank,
				DeniedMemberType5,
				DeniedMemberType5Class,
				DeniedMemberType5Member,
				DeniedMemberType5Rank};

	#endregion

	/// <summary>
	/// Datamanager for DojoAccessControlGroup objects.
	/// </summary>
	public class DojoAccessControlGroupManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_AccessControlGroups";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoAccessControlGroupID",
			"CreateDate",
			"ModifyDate",
			"Name",
			"Description",
			"OrderNum",
			"AllowedMemberType1ID",
			"AllowedMemberType2ID",
			"AllowedMemberType3ID",
			"AllowedMemberType4ID",
			"AllowedMemberType5ID",
			"DeniedMemberType1ID",
			"DeniedMemberType2ID",
			"DeniedMemberType3ID",
			"DeniedMemberType4ID",
			"DeniedMemberType5ID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoAccessControlGroupID", "LONG", "-1" },
			{ "CreateDate", "DATETIME", "DateTime.Now" },
			{ "ModifyDate", "DATETIME", "DateTime.Now" },
			{ "Name", "TEXT(75)", "" },
			{ "Description", "TEXT(255)", "" },
			{ "OrderNum", "LONG", "" },
			{ "AllowedMemberType1ID", "LONG", "null" },
			{ "AllowedMemberType2ID", "LONG", "null" },
			{ "AllowedMemberType3ID", "LONG", "null" },
			{ "AllowedMemberType4ID", "LONG", "null" },
			{ "AllowedMemberType5ID", "LONG", "null" },
			{ "DeniedMemberType1ID", "LONG", "null" },
			{ "DeniedMemberType2ID", "LONG", "null" },
			{ "DeniedMemberType3ID", "LONG", "null" },
			{ "DeniedMemberType4ID", "LONG", "null" },
			{ "DeniedMemberType5ID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoAccessControlGroupManager()
		{
		}

		public DojoAccessControlGroupManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoAccessControlGroupManager.isInitialized)
			{
				DojoAccessControlGroupManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoAccessControlGroup into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoAccessControlGroup">The DojoAccessControlGroup to insert into the database.</param>
		internal static int _insert(DojoAccessControlGroup dojoAccessControlGroup)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			// Set Create Date to Now
			dojoAccessControlGroup.CreateDate = DateTime.Now.ToUniversalTime();

			// Set Modify Date to Now
			dojoAccessControlGroup.ModifyDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_AccessControlGroups " +
				"(" +
				"CreateDate," +
				"ModifyDate," +
				"Name," +
				"Description," +
				"OrderNum," +
				"AllowedMemberType1ID," +
				"AllowedMemberType2ID," +
				"AllowedMemberType3ID," +
				"AllowedMemberType4ID," +
				"AllowedMemberType5ID," +
				"DeniedMemberType1ID," +
				"DeniedMemberType2ID," +
				"DeniedMemberType3ID," +
				"DeniedMemberType4ID," +
				"DeniedMemberType5ID) VALUES (" +
				"@CreateDate," +
				"@ModifyDate," +
				"@Name," +
				"@Description," +
				"@OrderNum," +
				"@AllowedMemberType1ID," +
				"@AllowedMemberType2ID," +
				"@AllowedMemberType3ID," +
				"@AllowedMemberType4ID," +
				"@AllowedMemberType5ID," +
				"@DeniedMemberType1ID," +
				"@DeniedMemberType2ID," +
				"@DeniedMemberType3ID," +
				"@DeniedMemberType4ID," +
				"@DeniedMemberType5ID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoAccessControlGroup);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoAccessControlGroup);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoAccessControlGroup in cache.
			if(cacheEnabled) cacheStore(dojoAccessControlGroup);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoAccessControlGroup dojoAccessControlGroup)
		{
			Database database;
			DbCommand dbCommand;

			// Set Modify Date to Now
			dojoAccessControlGroup.ModifyDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_AccessControlGroups SET CreateDate=@CreateDate," +
				"ModifyDate=@ModifyDate," +
				"Name=@Name," +
				"Description=@Description," +
				"OrderNum=@OrderNum," +
				"AllowedMemberType1ID=@AllowedMemberType1ID," +
				"AllowedMemberType2ID=@AllowedMemberType2ID," +
				"AllowedMemberType3ID=@AllowedMemberType3ID," +
				"AllowedMemberType4ID=@AllowedMemberType4ID," +
				"AllowedMemberType5ID=@AllowedMemberType5ID," +
				"DeniedMemberType1ID=@DeniedMemberType1ID," +
				"DeniedMemberType2ID=@DeniedMemberType2ID," +
				"DeniedMemberType3ID=@DeniedMemberType3ID," +
				"DeniedMemberType4ID=@DeniedMemberType4ID," +
				"DeniedMemberType5ID=@DeniedMemberType5ID WHERE DojoAccessControlGroupID=@DojoAccessControlGroupID;");

			fillParameters(database, dbCommand, dojoAccessControlGroup);
			database.AddInParameter(dbCommand, "DojoAccessControlGroupID", DbType.Int32, dojoAccessControlGroup.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoAccessControlGroup in cache.
			if (cacheEnabled) cacheStore(dojoAccessControlGroup);

			return dojoAccessControlGroup.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoAccessControlGroup dojoAccessControlGroup)
		{
			#region _system

			addParameter(database, dbCommand, "@CreateDate", DbType.Date, dojoAccessControlGroup.createDate);
			addParameter(database, dbCommand, "@ModifyDate", DbType.Date, dojoAccessControlGroup.modifyDate);

			#endregion

			#region General

			addParameter(database, dbCommand, "@Name", DbType.String, dojoAccessControlGroup.name);
			addParameter(database, dbCommand, "@Description", DbType.String, dojoAccessControlGroup.description);
			addParameter(database, dbCommand, "@OrderNum", DbType.Int32, dojoAccessControlGroup.orderNum);

			#endregion

			#region Allowed

			if(dojoAccessControlGroup.allowedMemberType1 == null)
			{
				addParameter(database, dbCommand, "@AllowedMemberType1ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@AllowedMemberType1ID", DbType.Int32, dojoAccessControlGroup.allowedMemberType1.ID);
			}
			if(dojoAccessControlGroup.allowedMemberType2 == null)
			{
				addParameter(database, dbCommand, "@AllowedMemberType2ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@AllowedMemberType2ID", DbType.Int32, dojoAccessControlGroup.allowedMemberType2.ID);
			}
			if(dojoAccessControlGroup.allowedMemberType3 == null)
			{
				addParameter(database, dbCommand, "@AllowedMemberType3ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@AllowedMemberType3ID", DbType.Int32, dojoAccessControlGroup.allowedMemberType3.ID);
			}
			if(dojoAccessControlGroup.allowedMemberType4 == null)
			{
				addParameter(database, dbCommand, "@AllowedMemberType4ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@AllowedMemberType4ID", DbType.Int32, dojoAccessControlGroup.allowedMemberType4.ID);
			}
			if(dojoAccessControlGroup.allowedMemberType5 == null)
			{
				addParameter(database, dbCommand, "@AllowedMemberType5ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@AllowedMemberType5ID", DbType.Int32, dojoAccessControlGroup.allowedMemberType5.ID);
			}

			#endregion

			#region Denied

			if(dojoAccessControlGroup.deniedMemberType1 == null)
			{
				addParameter(database, dbCommand, "@DeniedMemberType1ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@DeniedMemberType1ID", DbType.Int32, dojoAccessControlGroup.deniedMemberType1.ID);
			}
			if(dojoAccessControlGroup.deniedMemberType2 == null)
			{
				addParameter(database, dbCommand, "@DeniedMemberType2ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@DeniedMemberType2ID", DbType.Int32, dojoAccessControlGroup.deniedMemberType2.ID);
			}
			if(dojoAccessControlGroup.deniedMemberType3 == null)
			{
				addParameter(database, dbCommand, "@DeniedMemberType3ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@DeniedMemberType3ID", DbType.Int32, dojoAccessControlGroup.deniedMemberType3.ID);
			}
			if(dojoAccessControlGroup.deniedMemberType4 == null)
			{
				addParameter(database, dbCommand, "@DeniedMemberType4ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@DeniedMemberType4ID", DbType.Int32, dojoAccessControlGroup.deniedMemberType4.ID);
			}
			if(dojoAccessControlGroup.deniedMemberType5 == null)
			{
				addParameter(database, dbCommand, "@DeniedMemberType5ID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@DeniedMemberType5ID", DbType.Int32, dojoAccessControlGroup.deniedMemberType5.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoAccessControlGroup dojoAccessControlGroup)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoAccessControlGroup.iD);
				if(cachedObject != null)
				{
					((DojoAccessControlGroup)cachedObject).CopyTo(dojoAccessControlGroup, true);
					return dojoAccessControlGroup.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_AccessControlGroups WHERE DojoAccessControlGroupID=");
			query.Append(dojoAccessControlGroup.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoAccessControlGroupID '{0}'.", 
					dojoAccessControlGroup.iD)));
			}

			FillFromReader(dojoAccessControlGroup, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoAccessControlGroup in cache.
			if(cacheEnabled) cacheStore(dojoAccessControlGroup);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoAccessControlGroupCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoAccessControlGroupCollection GetCollection(string whereClause, string sortClause, params DojoAccessControlGroupFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoAccessControlGroupCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoAccessControlGroupFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoAccessControlGroupCollection dojoAccessControlGroupCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoAccessControlGroup.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int allowedMemberType1Offset = -1;
			int allowedMemberType1ClassOffset = -1;
			int allowedMemberType1MemberOffset = -1;
			int allowedMemberType1RankOffset = -1;
			int allowedMemberType2Offset = -1;
			int allowedMemberType2ClassOffset = -1;
			int allowedMemberType2MemberOffset = -1;
			int allowedMemberType2RankOffset = -1;
			int allowedMemberType3Offset = -1;
			int allowedMemberType3ClassOffset = -1;
			int allowedMemberType3MemberOffset = -1;
			int allowedMemberType3RankOffset = -1;
			int allowedMemberType4Offset = -1;
			int allowedMemberType4ClassOffset = -1;
			int allowedMemberType4MemberOffset = -1;
			int allowedMemberType4RankOffset = -1;
			int allowedMemberType5Offset = -1;
			int allowedMemberType5ClassOffset = -1;
			int allowedMemberType5MemberOffset = -1;
			int allowedMemberType5RankOffset = -1;
			int deniedMemberType1Offset = -1;
			int deniedMemberType1ClassOffset = -1;
			int deniedMemberType1MemberOffset = -1;
			int deniedMemberType1RankOffset = -1;
			int deniedMemberType2Offset = -1;
			int deniedMemberType2ClassOffset = -1;
			int deniedMemberType2MemberOffset = -1;
			int deniedMemberType2RankOffset = -1;
			int deniedMemberType3Offset = -1;
			int deniedMemberType3ClassOffset = -1;
			int deniedMemberType3MemberOffset = -1;
			int deniedMemberType3RankOffset = -1;
			int deniedMemberType4Offset = -1;
			int deniedMemberType4ClassOffset = -1;
			int deniedMemberType4MemberOffset = -1;
			int deniedMemberType4RankOffset = -1;
			int deniedMemberType5Offset = -1;
			int deniedMemberType5ClassOffset = -1;
			int deniedMemberType5MemberOffset = -1;
			int deniedMemberType5RankOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoAccessControlGroupFlags.AllowedMemberType1:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType1.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType1Offset = innerJoinOffset;
							innerJoinOffset = allowedMemberType1Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType1Class:
							for(int i = 0; i <= DojoClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType1_Class.");
								query.Append(DojoClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType1ClassOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType1ClassOffset + DojoClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType1Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType1_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType1MemberOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType1MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType1Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType1_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType1RankOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType1RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType2:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType2.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType2Offset = innerJoinOffset;
							innerJoinOffset = allowedMemberType2Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType2Class:
							for(int i = 0; i <= DojoClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType2_Class.");
								query.Append(DojoClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType2ClassOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType2ClassOffset + DojoClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType2Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType2_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType2MemberOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType2MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType2Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType2_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType2RankOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType2RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType3:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType3.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType3Offset = innerJoinOffset;
							innerJoinOffset = allowedMemberType3Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType3Class:
							for(int i = 0; i <= DojoClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType3_Class.");
								query.Append(DojoClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType3ClassOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType3ClassOffset + DojoClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType3Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType3_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType3MemberOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType3MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType3Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType3_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType3RankOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType3RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType4:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType4.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType4Offset = innerJoinOffset;
							innerJoinOffset = allowedMemberType4Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType4Class:
							for(int i = 0; i <= DojoClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType4_Class.");
								query.Append(DojoClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType4ClassOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType4ClassOffset + DojoClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType4Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType4_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType4MemberOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType4MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType4Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType4_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType4RankOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType4RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType5:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType5.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType5Offset = innerJoinOffset;
							innerJoinOffset = allowedMemberType5Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType5Class:
							for(int i = 0; i <= DojoClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType5_Class.");
								query.Append(DojoClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType5ClassOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType5ClassOffset + DojoClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType5Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType5_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType5MemberOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType5MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType5Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("AllowedMemberType5_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							allowedMemberType5RankOffset = innerJoinOffset;
							innerJoinOffset = allowedMemberType5RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType1:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType1.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType1Offset = innerJoinOffset;
							innerJoinOffset = deniedMemberType1Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType1Class:
							for(int i = 0; i <= DojoClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType1_Class.");
								query.Append(DojoClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType1ClassOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType1ClassOffset + DojoClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType1Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType1_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType1MemberOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType1MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType1Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType1_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType1RankOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType1RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType2:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType2.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType2Offset = innerJoinOffset;
							innerJoinOffset = deniedMemberType2Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType2Class:
							for(int i = 0; i <= DojoClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType2_Class.");
								query.Append(DojoClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType2ClassOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType2ClassOffset + DojoClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType2Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType2_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType2MemberOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType2MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType2Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType2_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType2RankOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType2RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType3:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType3.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType3Offset = innerJoinOffset;
							innerJoinOffset = deniedMemberType3Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType3Class:
							for(int i = 0; i <= DojoClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType3_Class.");
								query.Append(DojoClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType3ClassOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType3ClassOffset + DojoClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType3Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType3_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType3MemberOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType3MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType3Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType3_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType3RankOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType3RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType4:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType4.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType4Offset = innerJoinOffset;
							innerJoinOffset = deniedMemberType4Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType4Class:
							for(int i = 0; i <= DojoClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType4_Class.");
								query.Append(DojoClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType4ClassOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType4ClassOffset + DojoClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType4Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType4_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType4MemberOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType4MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType4Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType4_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType4RankOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType4RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType5:
							for(int i = 0; i <= DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType5.");
								query.Append(DojoAttendanceEntryManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType5Offset = innerJoinOffset;
							innerJoinOffset = deniedMemberType5Offset + DojoAttendanceEntryManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType5Class:
							for(int i = 0; i <= DojoClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType5_Class.");
								query.Append(DojoClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType5ClassOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType5ClassOffset + DojoClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType5Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType5_Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType5MemberOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType5MemberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType5Rank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("DeniedMemberType5_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							deniedMemberType5RankOffset = innerJoinOffset;
							innerJoinOffset = deniedMemberType5RankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_AccessControlGroups AS DojoAccessControlGroup");
			}
			else
			{
				query.Append(" FROM kitTessen_AccessControlGroups AS DojoAccessControlGroup");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoAccessControlGroupFlags.AllowedMemberType1:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AllowedMemberType1 ON DojoAccessControlGroup.AllowedMemberType1ID = AllowedMemberType1.DojoAttendanceEntryID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType1Class:
							query.Append(" LEFT JOIN kitTessen_Classes AS AllowedMemberType1_Class ON AllowedMemberType1.ClassID = AllowedMemberType1_Class.DojoClassID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType1Member:
							query.Append(" LEFT JOIN kitTessen_Members AS AllowedMemberType1_Member ON AllowedMemberType1.MemberID = AllowedMemberType1_Member.DojoMemberID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType1Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS AllowedMemberType1_Rank ON AllowedMemberType1.RankID = AllowedMemberType1_Rank.DojoRankID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType2:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AllowedMemberType2 ON DojoAccessControlGroup.AllowedMemberType2ID = AllowedMemberType2.DojoAttendanceEntryID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType2Class:
							query.Append(" LEFT JOIN kitTessen_Classes AS AllowedMemberType2_Class ON AllowedMemberType2.ClassID = AllowedMemberType2_Class.DojoClassID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType2Member:
							query.Append(" LEFT JOIN kitTessen_Members AS AllowedMemberType2_Member ON AllowedMemberType2.MemberID = AllowedMemberType2_Member.DojoMemberID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType2Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS AllowedMemberType2_Rank ON AllowedMemberType2.RankID = AllowedMemberType2_Rank.DojoRankID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType3:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AllowedMemberType3 ON DojoAccessControlGroup.AllowedMemberType3ID = AllowedMemberType3.DojoAttendanceEntryID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType3Class:
							query.Append(" LEFT JOIN kitTessen_Classes AS AllowedMemberType3_Class ON AllowedMemberType3.ClassID = AllowedMemberType3_Class.DojoClassID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType3Member:
							query.Append(" LEFT JOIN kitTessen_Members AS AllowedMemberType3_Member ON AllowedMemberType3.MemberID = AllowedMemberType3_Member.DojoMemberID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType3Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS AllowedMemberType3_Rank ON AllowedMemberType3.RankID = AllowedMemberType3_Rank.DojoRankID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType4:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AllowedMemberType4 ON DojoAccessControlGroup.AllowedMemberType4ID = AllowedMemberType4.DojoAttendanceEntryID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType4Class:
							query.Append(" LEFT JOIN kitTessen_Classes AS AllowedMemberType4_Class ON AllowedMemberType4.ClassID = AllowedMemberType4_Class.DojoClassID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType4Member:
							query.Append(" LEFT JOIN kitTessen_Members AS AllowedMemberType4_Member ON AllowedMemberType4.MemberID = AllowedMemberType4_Member.DojoMemberID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType4Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS AllowedMemberType4_Rank ON AllowedMemberType4.RankID = AllowedMemberType4_Rank.DojoRankID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType5:
							query.Append(" LEFT JOIN kitTessen_Attendance AS AllowedMemberType5 ON DojoAccessControlGroup.AllowedMemberType5ID = AllowedMemberType5.DojoAttendanceEntryID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType5Class:
							query.Append(" LEFT JOIN kitTessen_Classes AS AllowedMemberType5_Class ON AllowedMemberType5.ClassID = AllowedMemberType5_Class.DojoClassID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType5Member:
							query.Append(" LEFT JOIN kitTessen_Members AS AllowedMemberType5_Member ON AllowedMemberType5.MemberID = AllowedMemberType5_Member.DojoMemberID)");
							break;
						case DojoAccessControlGroupFlags.AllowedMemberType5Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS AllowedMemberType5_Rank ON AllowedMemberType5.RankID = AllowedMemberType5_Rank.DojoRankID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType1:
							query.Append(" LEFT JOIN kitTessen_Attendance AS DeniedMemberType1 ON DojoAccessControlGroup.DeniedMemberType1ID = DeniedMemberType1.DojoAttendanceEntryID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType1Class:
							query.Append(" LEFT JOIN kitTessen_Classes AS DeniedMemberType1_Class ON DeniedMemberType1.ClassID = DeniedMemberType1_Class.DojoClassID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType1Member:
							query.Append(" LEFT JOIN kitTessen_Members AS DeniedMemberType1_Member ON DeniedMemberType1.MemberID = DeniedMemberType1_Member.DojoMemberID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType1Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS DeniedMemberType1_Rank ON DeniedMemberType1.RankID = DeniedMemberType1_Rank.DojoRankID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType2:
							query.Append(" LEFT JOIN kitTessen_Attendance AS DeniedMemberType2 ON DojoAccessControlGroup.DeniedMemberType2ID = DeniedMemberType2.DojoAttendanceEntryID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType2Class:
							query.Append(" LEFT JOIN kitTessen_Classes AS DeniedMemberType2_Class ON DeniedMemberType2.ClassID = DeniedMemberType2_Class.DojoClassID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType2Member:
							query.Append(" LEFT JOIN kitTessen_Members AS DeniedMemberType2_Member ON DeniedMemberType2.MemberID = DeniedMemberType2_Member.DojoMemberID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType2Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS DeniedMemberType2_Rank ON DeniedMemberType2.RankID = DeniedMemberType2_Rank.DojoRankID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType3:
							query.Append(" LEFT JOIN kitTessen_Attendance AS DeniedMemberType3 ON DojoAccessControlGroup.DeniedMemberType3ID = DeniedMemberType3.DojoAttendanceEntryID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType3Class:
							query.Append(" LEFT JOIN kitTessen_Classes AS DeniedMemberType3_Class ON DeniedMemberType3.ClassID = DeniedMemberType3_Class.DojoClassID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType3Member:
							query.Append(" LEFT JOIN kitTessen_Members AS DeniedMemberType3_Member ON DeniedMemberType3.MemberID = DeniedMemberType3_Member.DojoMemberID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType3Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS DeniedMemberType3_Rank ON DeniedMemberType3.RankID = DeniedMemberType3_Rank.DojoRankID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType4:
							query.Append(" LEFT JOIN kitTessen_Attendance AS DeniedMemberType4 ON DojoAccessControlGroup.DeniedMemberType4ID = DeniedMemberType4.DojoAttendanceEntryID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType4Class:
							query.Append(" LEFT JOIN kitTessen_Classes AS DeniedMemberType4_Class ON DeniedMemberType4.ClassID = DeniedMemberType4_Class.DojoClassID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType4Member:
							query.Append(" LEFT JOIN kitTessen_Members AS DeniedMemberType4_Member ON DeniedMemberType4.MemberID = DeniedMemberType4_Member.DojoMemberID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType4Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS DeniedMemberType4_Rank ON DeniedMemberType4.RankID = DeniedMemberType4_Rank.DojoRankID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType5:
							query.Append(" LEFT JOIN kitTessen_Attendance AS DeniedMemberType5 ON DojoAccessControlGroup.DeniedMemberType5ID = DeniedMemberType5.DojoAttendanceEntryID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType5Class:
							query.Append(" LEFT JOIN kitTessen_Classes AS DeniedMemberType5_Class ON DeniedMemberType5.ClassID = DeniedMemberType5_Class.DojoClassID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType5Member:
							query.Append(" LEFT JOIN kitTessen_Members AS DeniedMemberType5_Member ON DeniedMemberType5.MemberID = DeniedMemberType5_Member.DojoMemberID)");
							break;
						case DojoAccessControlGroupFlags.DeniedMemberType5Rank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS DeniedMemberType5_Rank ON DeniedMemberType5.RankID = DeniedMemberType5_Rank.DojoRankID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoAccessControlGroupCollection = new DojoAccessControlGroupCollection();

			while(r.Read())
			{
				DojoAccessControlGroup dojoAccessControlGroup = ParseFromReader(r, 0, 1);

				// Fill AllowedMemberType1
				if(allowedMemberType1Offset != -1 && !r.IsDBNull(allowedMemberType1Offset))
				{
					DojoAttendanceEntryManager.FillFromReader(dojoAccessControlGroup.allowedMemberType1, r, allowedMemberType1Offset, allowedMemberType1Offset+1);

					// Fill 
					if(allowedMemberType1ClassOffset != -1 && !r.IsDBNull(allowedMemberType1ClassOffset))
						DojoClassManager.FillFromReader(dojoAccessControlGroup.allowedMemberType1.Class, r, allowedMemberType1ClassOffset, allowedMemberType1ClassOffset+1);

					// Fill 
					if(allowedMemberType1MemberOffset != -1 && !r.IsDBNull(allowedMemberType1MemberOffset))
						DojoMemberManager.FillFromReader(dojoAccessControlGroup.allowedMemberType1.Member, r, allowedMemberType1MemberOffset, allowedMemberType1MemberOffset+1);

					// Fill 
					if(allowedMemberType1RankOffset != -1 && !r.IsDBNull(allowedMemberType1RankOffset))
						DojoRankManager.FillFromReader(dojoAccessControlGroup.allowedMemberType1.Rank, r, allowedMemberType1RankOffset, allowedMemberType1RankOffset+1);

				}

				// Fill AllowedMemberType2
				if(allowedMemberType2Offset != -1 && !r.IsDBNull(allowedMemberType2Offset))
				{
					DojoAttendanceEntryManager.FillFromReader(dojoAccessControlGroup.allowedMemberType2, r, allowedMemberType2Offset, allowedMemberType2Offset+1);

					// Fill 
					if(allowedMemberType2ClassOffset != -1 && !r.IsDBNull(allowedMemberType2ClassOffset))
						DojoClassManager.FillFromReader(dojoAccessControlGroup.allowedMemberType2.Class, r, allowedMemberType2ClassOffset, allowedMemberType2ClassOffset+1);

					// Fill 
					if(allowedMemberType2MemberOffset != -1 && !r.IsDBNull(allowedMemberType2MemberOffset))
						DojoMemberManager.FillFromReader(dojoAccessControlGroup.allowedMemberType2.Member, r, allowedMemberType2MemberOffset, allowedMemberType2MemberOffset+1);

					// Fill 
					if(allowedMemberType2RankOffset != -1 && !r.IsDBNull(allowedMemberType2RankOffset))
						DojoRankManager.FillFromReader(dojoAccessControlGroup.allowedMemberType2.Rank, r, allowedMemberType2RankOffset, allowedMemberType2RankOffset+1);

				}

				// Fill AllowedMemberType3
				if(allowedMemberType3Offset != -1 && !r.IsDBNull(allowedMemberType3Offset))
				{
					DojoAttendanceEntryManager.FillFromReader(dojoAccessControlGroup.allowedMemberType3, r, allowedMemberType3Offset, allowedMemberType3Offset+1);

					// Fill 
					if(allowedMemberType3ClassOffset != -1 && !r.IsDBNull(allowedMemberType3ClassOffset))
						DojoClassManager.FillFromReader(dojoAccessControlGroup.allowedMemberType3.Class, r, allowedMemberType3ClassOffset, allowedMemberType3ClassOffset+1);

					// Fill 
					if(allowedMemberType3MemberOffset != -1 && !r.IsDBNull(allowedMemberType3MemberOffset))
						DojoMemberManager.FillFromReader(dojoAccessControlGroup.allowedMemberType3.Member, r, allowedMemberType3MemberOffset, allowedMemberType3MemberOffset+1);

					// Fill 
					if(allowedMemberType3RankOffset != -1 && !r.IsDBNull(allowedMemberType3RankOffset))
						DojoRankManager.FillFromReader(dojoAccessControlGroup.allowedMemberType3.Rank, r, allowedMemberType3RankOffset, allowedMemberType3RankOffset+1);

				}

				// Fill AllowedMemberType4
				if(allowedMemberType4Offset != -1 && !r.IsDBNull(allowedMemberType4Offset))
				{
					DojoAttendanceEntryManager.FillFromReader(dojoAccessControlGroup.allowedMemberType4, r, allowedMemberType4Offset, allowedMemberType4Offset+1);

					// Fill 
					if(allowedMemberType4ClassOffset != -1 && !r.IsDBNull(allowedMemberType4ClassOffset))
						DojoClassManager.FillFromReader(dojoAccessControlGroup.allowedMemberType4.Class, r, allowedMemberType4ClassOffset, allowedMemberType4ClassOffset+1);

					// Fill 
					if(allowedMemberType4MemberOffset != -1 && !r.IsDBNull(allowedMemberType4MemberOffset))
						DojoMemberManager.FillFromReader(dojoAccessControlGroup.allowedMemberType4.Member, r, allowedMemberType4MemberOffset, allowedMemberType4MemberOffset+1);

					// Fill 
					if(allowedMemberType4RankOffset != -1 && !r.IsDBNull(allowedMemberType4RankOffset))
						DojoRankManager.FillFromReader(dojoAccessControlGroup.allowedMemberType4.Rank, r, allowedMemberType4RankOffset, allowedMemberType4RankOffset+1);

				}

				// Fill AllowedMemberType5
				if(allowedMemberType5Offset != -1 && !r.IsDBNull(allowedMemberType5Offset))
				{
					DojoAttendanceEntryManager.FillFromReader(dojoAccessControlGroup.allowedMemberType5, r, allowedMemberType5Offset, allowedMemberType5Offset+1);

					// Fill 
					if(allowedMemberType5ClassOffset != -1 && !r.IsDBNull(allowedMemberType5ClassOffset))
						DojoClassManager.FillFromReader(dojoAccessControlGroup.allowedMemberType5.Class, r, allowedMemberType5ClassOffset, allowedMemberType5ClassOffset+1);

					// Fill 
					if(allowedMemberType5MemberOffset != -1 && !r.IsDBNull(allowedMemberType5MemberOffset))
						DojoMemberManager.FillFromReader(dojoAccessControlGroup.allowedMemberType5.Member, r, allowedMemberType5MemberOffset, allowedMemberType5MemberOffset+1);

					// Fill 
					if(allowedMemberType5RankOffset != -1 && !r.IsDBNull(allowedMemberType5RankOffset))
						DojoRankManager.FillFromReader(dojoAccessControlGroup.allowedMemberType5.Rank, r, allowedMemberType5RankOffset, allowedMemberType5RankOffset+1);

				}

				// Fill DeniedMemberType1
				if(deniedMemberType1Offset != -1 && !r.IsDBNull(deniedMemberType1Offset))
				{
					DojoAttendanceEntryManager.FillFromReader(dojoAccessControlGroup.deniedMemberType1, r, deniedMemberType1Offset, deniedMemberType1Offset+1);

					// Fill 
					if(deniedMemberType1ClassOffset != -1 && !r.IsDBNull(deniedMemberType1ClassOffset))
						DojoClassManager.FillFromReader(dojoAccessControlGroup.deniedMemberType1.Class, r, deniedMemberType1ClassOffset, deniedMemberType1ClassOffset+1);

					// Fill 
					if(deniedMemberType1MemberOffset != -1 && !r.IsDBNull(deniedMemberType1MemberOffset))
						DojoMemberManager.FillFromReader(dojoAccessControlGroup.deniedMemberType1.Member, r, deniedMemberType1MemberOffset, deniedMemberType1MemberOffset+1);

					// Fill 
					if(deniedMemberType1RankOffset != -1 && !r.IsDBNull(deniedMemberType1RankOffset))
						DojoRankManager.FillFromReader(dojoAccessControlGroup.deniedMemberType1.Rank, r, deniedMemberType1RankOffset, deniedMemberType1RankOffset+1);

				}

				// Fill DeniedMemberType2
				if(deniedMemberType2Offset != -1 && !r.IsDBNull(deniedMemberType2Offset))
				{
					DojoAttendanceEntryManager.FillFromReader(dojoAccessControlGroup.deniedMemberType2, r, deniedMemberType2Offset, deniedMemberType2Offset+1);

					// Fill 
					if(deniedMemberType2ClassOffset != -1 && !r.IsDBNull(deniedMemberType2ClassOffset))
						DojoClassManager.FillFromReader(dojoAccessControlGroup.deniedMemberType2.Class, r, deniedMemberType2ClassOffset, deniedMemberType2ClassOffset+1);

					// Fill 
					if(deniedMemberType2MemberOffset != -1 && !r.IsDBNull(deniedMemberType2MemberOffset))
						DojoMemberManager.FillFromReader(dojoAccessControlGroup.deniedMemberType2.Member, r, deniedMemberType2MemberOffset, deniedMemberType2MemberOffset+1);

					// Fill 
					if(deniedMemberType2RankOffset != -1 && !r.IsDBNull(deniedMemberType2RankOffset))
						DojoRankManager.FillFromReader(dojoAccessControlGroup.deniedMemberType2.Rank, r, deniedMemberType2RankOffset, deniedMemberType2RankOffset+1);

				}

				// Fill DeniedMemberType3
				if(deniedMemberType3Offset != -1 && !r.IsDBNull(deniedMemberType3Offset))
				{
					DojoAttendanceEntryManager.FillFromReader(dojoAccessControlGroup.deniedMemberType3, r, deniedMemberType3Offset, deniedMemberType3Offset+1);

					// Fill 
					if(deniedMemberType3ClassOffset != -1 && !r.IsDBNull(deniedMemberType3ClassOffset))
						DojoClassManager.FillFromReader(dojoAccessControlGroup.deniedMemberType3.Class, r, deniedMemberType3ClassOffset, deniedMemberType3ClassOffset+1);

					// Fill 
					if(deniedMemberType3MemberOffset != -1 && !r.IsDBNull(deniedMemberType3MemberOffset))
						DojoMemberManager.FillFromReader(dojoAccessControlGroup.deniedMemberType3.Member, r, deniedMemberType3MemberOffset, deniedMemberType3MemberOffset+1);

					// Fill 
					if(deniedMemberType3RankOffset != -1 && !r.IsDBNull(deniedMemberType3RankOffset))
						DojoRankManager.FillFromReader(dojoAccessControlGroup.deniedMemberType3.Rank, r, deniedMemberType3RankOffset, deniedMemberType3RankOffset+1);

				}

				// Fill DeniedMemberType4
				if(deniedMemberType4Offset != -1 && !r.IsDBNull(deniedMemberType4Offset))
				{
					DojoAttendanceEntryManager.FillFromReader(dojoAccessControlGroup.deniedMemberType4, r, deniedMemberType4Offset, deniedMemberType4Offset+1);

					// Fill 
					if(deniedMemberType4ClassOffset != -1 && !r.IsDBNull(deniedMemberType4ClassOffset))
						DojoClassManager.FillFromReader(dojoAccessControlGroup.deniedMemberType4.Class, r, deniedMemberType4ClassOffset, deniedMemberType4ClassOffset+1);

					// Fill 
					if(deniedMemberType4MemberOffset != -1 && !r.IsDBNull(deniedMemberType4MemberOffset))
						DojoMemberManager.FillFromReader(dojoAccessControlGroup.deniedMemberType4.Member, r, deniedMemberType4MemberOffset, deniedMemberType4MemberOffset+1);

					// Fill 
					if(deniedMemberType4RankOffset != -1 && !r.IsDBNull(deniedMemberType4RankOffset))
						DojoRankManager.FillFromReader(dojoAccessControlGroup.deniedMemberType4.Rank, r, deniedMemberType4RankOffset, deniedMemberType4RankOffset+1);

				}

				// Fill DeniedMemberType5
				if(deniedMemberType5Offset != -1 && !r.IsDBNull(deniedMemberType5Offset))
				{
					DojoAttendanceEntryManager.FillFromReader(dojoAccessControlGroup.deniedMemberType5, r, deniedMemberType5Offset, deniedMemberType5Offset+1);

					// Fill 
					if(deniedMemberType5ClassOffset != -1 && !r.IsDBNull(deniedMemberType5ClassOffset))
						DojoClassManager.FillFromReader(dojoAccessControlGroup.deniedMemberType5.Class, r, deniedMemberType5ClassOffset, deniedMemberType5ClassOffset+1);

					// Fill 
					if(deniedMemberType5MemberOffset != -1 && !r.IsDBNull(deniedMemberType5MemberOffset))
						DojoMemberManager.FillFromReader(dojoAccessControlGroup.deniedMemberType5.Member, r, deniedMemberType5MemberOffset, deniedMemberType5MemberOffset+1);

					// Fill 
					if(deniedMemberType5RankOffset != -1 && !r.IsDBNull(deniedMemberType5RankOffset))
						DojoRankManager.FillFromReader(dojoAccessControlGroup.deniedMemberType5.Rank, r, deniedMemberType5RankOffset, deniedMemberType5RankOffset+1);

				}

				dojoAccessControlGroupCollection.Add(dojoAccessControlGroup);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoAccessControlGroupCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoAccessControlGroup ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoAccessControlGroup dojoAccessControlGroup = new DojoAccessControlGroup();
			FillFromReader(dojoAccessControlGroup, r, idOffset, dataOffset);
			return dojoAccessControlGroup;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoAccessControlGroup dojoAccessControlGroup, IDataReader r, int idOffset, int dataOffset)
		{
			dojoAccessControlGroup.iD = r.GetInt32(idOffset);
			dojoAccessControlGroup.isSynced = true;
			dojoAccessControlGroup.isPlaceHolder = false;

			dojoAccessControlGroup.createDate = r.GetDateTime(0+dataOffset);
			dojoAccessControlGroup.modifyDate = r.GetDateTime(1+dataOffset);
			dojoAccessControlGroup.name = r.GetString(2+dataOffset);
			dojoAccessControlGroup.description = r.GetString(3+dataOffset);
			dojoAccessControlGroup.orderNum = r.GetInt32(4+dataOffset);
			if(!r.IsDBNull(5+dataOffset) && r.GetInt32(5+dataOffset) > 0)
			{
				dojoAccessControlGroup.allowedMemberType1 = DojoAttendanceEntry.NewPlaceHolder(r.GetInt32(5+dataOffset));
			}
			if(!r.IsDBNull(6+dataOffset) && r.GetInt32(6+dataOffset) > 0)
			{
				dojoAccessControlGroup.allowedMemberType2 = DojoAttendanceEntry.NewPlaceHolder(r.GetInt32(6+dataOffset));
			}
			if(!r.IsDBNull(7+dataOffset) && r.GetInt32(7+dataOffset) > 0)
			{
				dojoAccessControlGroup.allowedMemberType3 = DojoAttendanceEntry.NewPlaceHolder(r.GetInt32(7+dataOffset));
			}
			if(!r.IsDBNull(8+dataOffset) && r.GetInt32(8+dataOffset) > 0)
			{
				dojoAccessControlGroup.allowedMemberType4 = DojoAttendanceEntry.NewPlaceHolder(r.GetInt32(8+dataOffset));
			}
			if(!r.IsDBNull(9+dataOffset) && r.GetInt32(9+dataOffset) > 0)
			{
				dojoAccessControlGroup.allowedMemberType5 = DojoAttendanceEntry.NewPlaceHolder(r.GetInt32(9+dataOffset));
			}
			if(!r.IsDBNull(10+dataOffset) && r.GetInt32(10+dataOffset) > 0)
			{
				dojoAccessControlGroup.deniedMemberType1 = DojoAttendanceEntry.NewPlaceHolder(r.GetInt32(10+dataOffset));
			}
			if(!r.IsDBNull(11+dataOffset) && r.GetInt32(11+dataOffset) > 0)
			{
				dojoAccessControlGroup.deniedMemberType2 = DojoAttendanceEntry.NewPlaceHolder(r.GetInt32(11+dataOffset));
			}
			if(!r.IsDBNull(12+dataOffset) && r.GetInt32(12+dataOffset) > 0)
			{
				dojoAccessControlGroup.deniedMemberType3 = DojoAttendanceEntry.NewPlaceHolder(r.GetInt32(12+dataOffset));
			}
			if(!r.IsDBNull(13+dataOffset) && r.GetInt32(13+dataOffset) > 0)
			{
				dojoAccessControlGroup.deniedMemberType4 = DojoAttendanceEntry.NewPlaceHolder(r.GetInt32(13+dataOffset));
			}
			if(!r.IsDBNull(14+dataOffset) && r.GetInt32(14+dataOffset) > 0)
			{
				dojoAccessControlGroup.deniedMemberType5 = DojoAttendanceEntry.NewPlaceHolder(r.GetInt32(14+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_AccessControlGroups WHERE DojoAccessControlGroupID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_AccessControlGroups ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_AccessControlGroups_AllowedMemberType1 FOREIGN KEY (AllowedMemberType1ID) REFERENCES kitTessen_Attendance (DojoAttendanceEntryID),");
			query.Append(" CONSTRAINT FK_kitTessen_AccessControlGroups_AllowedMemberType2 FOREIGN KEY (AllowedMemberType2ID) REFERENCES kitTessen_Attendance (DojoAttendanceEntryID),");
			query.Append(" CONSTRAINT FK_kitTessen_AccessControlGroups_AllowedMemberType3 FOREIGN KEY (AllowedMemberType3ID) REFERENCES kitTessen_Attendance (DojoAttendanceEntryID),");
			query.Append(" CONSTRAINT FK_kitTessen_AccessControlGroups_AllowedMemberType4 FOREIGN KEY (AllowedMemberType4ID) REFERENCES kitTessen_Attendance (DojoAttendanceEntryID),");
			query.Append(" CONSTRAINT FK_kitTessen_AccessControlGroups_AllowedMemberType5 FOREIGN KEY (AllowedMemberType5ID) REFERENCES kitTessen_Attendance (DojoAttendanceEntryID),");
			query.Append(" CONSTRAINT FK_kitTessen_AccessControlGroups_DeniedMemberType1 FOREIGN KEY (DeniedMemberType1ID) REFERENCES kitTessen_Attendance (DojoAttendanceEntryID),");
			query.Append(" CONSTRAINT FK_kitTessen_AccessControlGroups_DeniedMemberType2 FOREIGN KEY (DeniedMemberType2ID) REFERENCES kitTessen_Attendance (DojoAttendanceEntryID),");
			query.Append(" CONSTRAINT FK_kitTessen_AccessControlGroups_DeniedMemberType3 FOREIGN KEY (DeniedMemberType3ID) REFERENCES kitTessen_Attendance (DojoAttendanceEntryID),");
			query.Append(" CONSTRAINT FK_kitTessen_AccessControlGroups_DeniedMemberType4 FOREIGN KEY (DeniedMemberType4ID) REFERENCES kitTessen_Attendance (DojoAttendanceEntryID),");
			query.Append(" CONSTRAINT FK_kitTessen_AccessControlGroups_DeniedMemberType5 FOREIGN KEY (DeniedMemberType5ID) REFERENCES kitTessen_Attendance (DojoAttendanceEntryID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_AccessControlGroups ");
				query.Append(" (DojoAccessControlGroupID COUNTER(1,1) CONSTRAINT PK_kitTessen_AccessControlGroups PRIMARY KEY, " +
					"CreateDate DATETIME," +
					"ModifyDate DATETIME," +
					"Name TEXT(75)," +
					"Description TEXT(255)," +
					"OrderNum LONG," +
					"AllowedMemberType1ID LONG," +
					"AllowedMemberType2ID LONG," +
					"AllowedMemberType3ID LONG," +
					"AllowedMemberType4ID LONG," +
					"AllowedMemberType5ID LONG," +
					"DeniedMemberType1ID LONG," +
					"DeniedMemberType2ID LONG," +
					"DeniedMemberType3ID LONG," +
					"DeniedMemberType4ID LONG," +
					"DeniedMemberType5ID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_AccessControlGroups ");
				query.Append(" (DojoAccessControlGroupID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_AccessControlGroups PRIMARY KEY, " +
					"CreateDate DATETIME," +
					"ModifyDate DATETIME," +
					"Name NVARCHAR(75)," +
					"Description NVARCHAR(255)," +
					"OrderNum INT," +
					"AllowedMemberType1ID INT," +
					"AllowedMemberType2ID INT," +
					"AllowedMemberType3ID INT," +
					"AllowedMemberType4ID INT," +
					"AllowedMemberType5ID INT," +
					"DeniedMemberType1ID INT," +
					"DeniedMemberType2ID INT," +
					"DeniedMemberType3ID INT," +
					"DeniedMemberType4ID INT," +
					"DeniedMemberType5ID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoAccessControlGroup dojoAccessControlGroup)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_AccessControlGroups_" + dojoAccessControlGroup.iD.ToString(), dojoAccessControlGroup);
		}

		private static DojoAccessControlGroup cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_AccessControlGroups_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoAccessControlGroup)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_AccessControlGroups_" + id.ToString());
		}

		#endregion

	}
}

