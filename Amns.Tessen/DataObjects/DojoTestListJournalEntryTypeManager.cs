/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoTestListJournalEntryTypeFlags : int { OnRemovedStatus,
				OnRemovedStatusOnRemovedStatus,
				OnRemovedStatusOnFailedStatus,
				OnRemovedStatusOnPassedStatus,
				OnRemovedStatusOnPromotedStatus,
				OnRemovedStatusOnCertificateRequestedStatus,
				OnRemovedStatusOnCertificatePendingStatus,
				OnRemovedStatusOnCertificateReceivedStatus,
				OnFailedStatus,
				OnFailedStatusOnRemovedStatus,
				OnFailedStatusOnFailedStatus,
				OnFailedStatusOnPassedStatus,
				OnFailedStatusOnPromotedStatus,
				OnFailedStatusOnCertificateRequestedStatus,
				OnFailedStatusOnCertificatePendingStatus,
				OnFailedStatusOnCertificateReceivedStatus,
				OnPassedStatus,
				OnPassedStatusOnRemovedStatus,
				OnPassedStatusOnFailedStatus,
				OnPassedStatusOnPassedStatus,
				OnPassedStatusOnPromotedStatus,
				OnPassedStatusOnCertificateRequestedStatus,
				OnPassedStatusOnCertificatePendingStatus,
				OnPassedStatusOnCertificateReceivedStatus,
				OnPromotedStatus,
				OnPromotedStatusOnRemovedStatus,
				OnPromotedStatusOnFailedStatus,
				OnPromotedStatusOnPassedStatus,
				OnPromotedStatusOnPromotedStatus,
				OnPromotedStatusOnCertificateRequestedStatus,
				OnPromotedStatusOnCertificatePendingStatus,
				OnPromotedStatusOnCertificateReceivedStatus,
				OnCertificateRequestedStatus,
				OnCertificateRequestedStatusOnRemovedStatus,
				OnCertificateRequestedStatusOnFailedStatus,
				OnCertificateRequestedStatusOnPassedStatus,
				OnCertificateRequestedStatusOnPromotedStatus,
				OnCertificateRequestedStatusOnCertificateRequestedStatus,
				OnCertificateRequestedStatusOnCertificatePendingStatus,
				OnCertificateRequestedStatusOnCertificateReceivedStatus,
				OnCertificatePendingStatus,
				OnCertificatePendingStatusOnRemovedStatus,
				OnCertificatePendingStatusOnFailedStatus,
				OnCertificatePendingStatusOnPassedStatus,
				OnCertificatePendingStatusOnPromotedStatus,
				OnCertificatePendingStatusOnCertificateRequestedStatus,
				OnCertificatePendingStatusOnCertificatePendingStatus,
				OnCertificatePendingStatusOnCertificateReceivedStatus,
				OnCertificateReceivedStatus,
				OnCertificateReceivedStatusOnRemovedStatus,
				OnCertificateReceivedStatusOnFailedStatus,
				OnCertificateReceivedStatusOnPassedStatus,
				OnCertificateReceivedStatusOnPromotedStatus,
				OnCertificateReceivedStatusOnCertificateRequestedStatus,
				OnCertificateReceivedStatusOnCertificatePendingStatus,
				OnCertificateReceivedStatusOnCertificateReceivedStatus};

	#endregion

	/// <summary>
	/// Datamanager for DojoTestListJournalEntryType objects.
	/// </summary>
	public class DojoTestListJournalEntryTypeManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_TestListJournalEntryTypes";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoTestListJournalEntryTypeID",
			"Name",
			"Description",
			"OrderNum",
			"Eligible",
			"Failed",
			"Passed",
			"CertificateRequest",
			"CertificatePending",
			"CertificateReceived",
			"Ineligible",
			"OnRemovedStatusID",
			"OnFailedStatusID",
			"OnPassedStatusID",
			"OnPromotedStatusID",
			"OnCertificateRequestedStatusID",
			"OnCertificatePendingStatusID",
			"OnCertificateReceivedStatusID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoTestListJournalEntryTypeID", "LONG", "-1" },
			{ "Name", "TEXT(75)", "" },
			{ "Description", "TEXT(255)", "" },
			{ "OrderNum", "LONG", "" },
			{ "Eligible", "BIT", "" },
			{ "Failed", "BIT", "" },
			{ "Passed", "BIT", "" },
			{ "CertificateRequest", "BIT", "" },
			{ "CertificatePending", "BIT", "" },
			{ "CertificateReceived", "BIT", "" },
			{ "Ineligible", "BIT", "" },
			{ "OnRemovedStatusID", "LONG", "null" },
			{ "OnFailedStatusID", "LONG", "null" },
			{ "OnPassedStatusID", "LONG", "null" },
			{ "OnPromotedStatusID", "LONG", "null" },
			{ "OnCertificateRequestedStatusID", "LONG", "null" },
			{ "OnCertificatePendingStatusID", "LONG", "null" },
			{ "OnCertificateReceivedStatusID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoTestListJournalEntryTypeManager()
		{
		}

		public DojoTestListJournalEntryTypeManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoTestListJournalEntryTypeManager.isInitialized)
			{
				DojoTestListJournalEntryTypeManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoTestListJournalEntryType into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoTestListJournalEntryType">The DojoTestListJournalEntryType to insert into the database.</param>
		internal static int _insert(DojoTestListJournalEntryType dojoTestListJournalEntryType)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_TestListJournalEntryTypes " +
				"(" +
				"Name," +
				"Description," +
				"OrderNum," +
				"Eligible," +
				"Failed," +
				"Passed," +
				"CertificateRequest," +
				"CertificatePending," +
				"CertificateReceived," +
				"Ineligible," +
				"OnRemovedStatusID," +
				"OnFailedStatusID," +
				"OnPassedStatusID," +
				"OnPromotedStatusID," +
				"OnCertificateRequestedStatusID," +
				"OnCertificatePendingStatusID," +
				"OnCertificateReceivedStatusID) VALUES (" +
				"@Name," +
				"@Description," +
				"@OrderNum," +
				"@Eligible," +
				"@Failed," +
				"@Passed," +
				"@CertificateRequest," +
				"@CertificatePending," +
				"@CertificateReceived," +
				"@Ineligible," +
				"@OnRemovedStatusID," +
				"@OnFailedStatusID," +
				"@OnPassedStatusID," +
				"@OnPromotedStatusID," +
				"@OnCertificateRequestedStatusID," +
				"@OnCertificatePendingStatusID," +
				"@OnCertificateReceivedStatusID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoTestListJournalEntryType);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoTestListJournalEntryType);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoTestListJournalEntryType in cache.
			if(cacheEnabled) cacheStore(dojoTestListJournalEntryType);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoTestListJournalEntryType dojoTestListJournalEntryType)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_TestListJournalEntryTypes SET Name=@Name," +
				"Description=@Description," +
				"OrderNum=@OrderNum," +
				"Eligible=@Eligible," +
				"Failed=@Failed," +
				"Passed=@Passed," +
				"CertificateRequest=@CertificateRequest," +
				"CertificatePending=@CertificatePending," +
				"CertificateReceived=@CertificateReceived," +
				"Ineligible=@Ineligible," +
				"OnRemovedStatusID=@OnRemovedStatusID," +
				"OnFailedStatusID=@OnFailedStatusID," +
				"OnPassedStatusID=@OnPassedStatusID," +
				"OnPromotedStatusID=@OnPromotedStatusID," +
				"OnCertificateRequestedStatusID=@OnCertificateRequestedStatusID," +
				"OnCertificatePendingStatusID=@OnCertificatePendingStatusID," +
				"OnCertificateReceivedStatusID=@OnCertificateReceivedStatusID WHERE DojoTestListJournalEntryTypeID=@DojoTestListJournalEntryTypeID;");

			fillParameters(database, dbCommand, dojoTestListJournalEntryType);
			database.AddInParameter(dbCommand, "DojoTestListJournalEntryTypeID", DbType.Int32, dojoTestListJournalEntryType.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoTestListJournalEntryType in cache.
			if (cacheEnabled) cacheStore(dojoTestListJournalEntryType);

			return dojoTestListJournalEntryType.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoTestListJournalEntryType dojoTestListJournalEntryType)
		{
			#region General

			addParameter(database, dbCommand, "@Name", DbType.String, dojoTestListJournalEntryType.name);
			addParameter(database, dbCommand, "@Description", DbType.String, dojoTestListJournalEntryType.description);
			addParameter(database, dbCommand, "@OrderNum", DbType.Int32, dojoTestListJournalEntryType.orderNum);

			#endregion

			#region Flags

			addParameter(database, dbCommand, "@Eligible", DbType.Boolean, dojoTestListJournalEntryType.eligible);
			addParameter(database, dbCommand, "@Failed", DbType.Boolean, dojoTestListJournalEntryType.failed);
			addParameter(database, dbCommand, "@Passed", DbType.Boolean, dojoTestListJournalEntryType.passed);
			addParameter(database, dbCommand, "@CertificateRequest", DbType.Boolean, dojoTestListJournalEntryType.certificateRequest);
			addParameter(database, dbCommand, "@CertificatePending", DbType.Boolean, dojoTestListJournalEntryType.certificatePending);
			addParameter(database, dbCommand, "@CertificateReceived", DbType.Boolean, dojoTestListJournalEntryType.certificateReceived);
			addParameter(database, dbCommand, "@Ineligible", DbType.Boolean, dojoTestListJournalEntryType.ineligible);

			#endregion

			#region Status Changes

			if(dojoTestListJournalEntryType.onRemovedStatus == null)
			{
				addParameter(database, dbCommand, "@OnRemovedStatusID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@OnRemovedStatusID", DbType.Int32, dojoTestListJournalEntryType.onRemovedStatus.ID);
			}
			if(dojoTestListJournalEntryType.onFailedStatus == null)
			{
				addParameter(database, dbCommand, "@OnFailedStatusID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@OnFailedStatusID", DbType.Int32, dojoTestListJournalEntryType.onFailedStatus.ID);
			}
			if(dojoTestListJournalEntryType.onPassedStatus == null)
			{
				addParameter(database, dbCommand, "@OnPassedStatusID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@OnPassedStatusID", DbType.Int32, dojoTestListJournalEntryType.onPassedStatus.ID);
			}
			if(dojoTestListJournalEntryType.onPromotedStatus == null)
			{
				addParameter(database, dbCommand, "@OnPromotedStatusID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@OnPromotedStatusID", DbType.Int32, dojoTestListJournalEntryType.onPromotedStatus.ID);
			}
			if(dojoTestListJournalEntryType.onCertificateRequestedStatus == null)
			{
				addParameter(database, dbCommand, "@OnCertificateRequestedStatusID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@OnCertificateRequestedStatusID", DbType.Int32, dojoTestListJournalEntryType.onCertificateRequestedStatus.ID);
			}
			if(dojoTestListJournalEntryType.onCertificatePendingStatus == null)
			{
				addParameter(database, dbCommand, "@OnCertificatePendingStatusID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@OnCertificatePendingStatusID", DbType.Int32, dojoTestListJournalEntryType.onCertificatePendingStatus.ID);
			}
			if(dojoTestListJournalEntryType.onCertificateReceivedStatus == null)
			{
				addParameter(database, dbCommand, "@OnCertificateReceivedStatusID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@OnCertificateReceivedStatusID", DbType.Int32, dojoTestListJournalEntryType.onCertificateReceivedStatus.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoTestListJournalEntryType dojoTestListJournalEntryType)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoTestListJournalEntryType.iD);
				if(cachedObject != null)
				{
					((DojoTestListJournalEntryType)cachedObject).CopyTo(dojoTestListJournalEntryType, true);
					return dojoTestListJournalEntryType.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_TestListJournalEntryTypes WHERE DojoTestListJournalEntryTypeID=");
			query.Append(dojoTestListJournalEntryType.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoTestListJournalEntryTypeID '{0}'.", 
					dojoTestListJournalEntryType.iD)));
			}

			FillFromReader(dojoTestListJournalEntryType, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoTestListJournalEntryType in cache.
			if(cacheEnabled) cacheStore(dojoTestListJournalEntryType);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoTestListJournalEntryTypeCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoTestListJournalEntryTypeCollection GetCollection(string whereClause, string sortClause, params DojoTestListJournalEntryTypeFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoTestListJournalEntryTypeCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoTestListJournalEntryTypeFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoTestListJournalEntryTypeCollection dojoTestListJournalEntryTypeCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoTestListJournalEntryType.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int onRemovedStatusOffset = -1;
			int onRemovedStatusOnRemovedStatusOffset = -1;
			int onRemovedStatusOnFailedStatusOffset = -1;
			int onRemovedStatusOnPassedStatusOffset = -1;
			int onRemovedStatusOnPromotedStatusOffset = -1;
			int onRemovedStatusOnCertificateRequestedStatusOffset = -1;
			int onRemovedStatusOnCertificatePendingStatusOffset = -1;
			int onRemovedStatusOnCertificateReceivedStatusOffset = -1;
			int onFailedStatusOffset = -1;
			int onFailedStatusOnRemovedStatusOffset = -1;
			int onFailedStatusOnFailedStatusOffset = -1;
			int onFailedStatusOnPassedStatusOffset = -1;
			int onFailedStatusOnPromotedStatusOffset = -1;
			int onFailedStatusOnCertificateRequestedStatusOffset = -1;
			int onFailedStatusOnCertificatePendingStatusOffset = -1;
			int onFailedStatusOnCertificateReceivedStatusOffset = -1;
			int onPassedStatusOffset = -1;
			int onPassedStatusOnRemovedStatusOffset = -1;
			int onPassedStatusOnFailedStatusOffset = -1;
			int onPassedStatusOnPassedStatusOffset = -1;
			int onPassedStatusOnPromotedStatusOffset = -1;
			int onPassedStatusOnCertificateRequestedStatusOffset = -1;
			int onPassedStatusOnCertificatePendingStatusOffset = -1;
			int onPassedStatusOnCertificateReceivedStatusOffset = -1;
			int onPromotedStatusOffset = -1;
			int onPromotedStatusOnRemovedStatusOffset = -1;
			int onPromotedStatusOnFailedStatusOffset = -1;
			int onPromotedStatusOnPassedStatusOffset = -1;
			int onPromotedStatusOnPromotedStatusOffset = -1;
			int onPromotedStatusOnCertificateRequestedStatusOffset = -1;
			int onPromotedStatusOnCertificatePendingStatusOffset = -1;
			int onPromotedStatusOnCertificateReceivedStatusOffset = -1;
			int onCertificateRequestedStatusOffset = -1;
			int onCertificateRequestedStatusOnRemovedStatusOffset = -1;
			int onCertificateRequestedStatusOnFailedStatusOffset = -1;
			int onCertificateRequestedStatusOnPassedStatusOffset = -1;
			int onCertificateRequestedStatusOnPromotedStatusOffset = -1;
			int onCertificateRequestedStatusOnCertificateRequestedStatusOffset = -1;
			int onCertificateRequestedStatusOnCertificatePendingStatusOffset = -1;
			int onCertificateRequestedStatusOnCertificateReceivedStatusOffset = -1;
			int onCertificatePendingStatusOffset = -1;
			int onCertificatePendingStatusOnRemovedStatusOffset = -1;
			int onCertificatePendingStatusOnFailedStatusOffset = -1;
			int onCertificatePendingStatusOnPassedStatusOffset = -1;
			int onCertificatePendingStatusOnPromotedStatusOffset = -1;
			int onCertificatePendingStatusOnCertificateRequestedStatusOffset = -1;
			int onCertificatePendingStatusOnCertificatePendingStatusOffset = -1;
			int onCertificatePendingStatusOnCertificateReceivedStatusOffset = -1;
			int onCertificateReceivedStatusOffset = -1;
			int onCertificateReceivedStatusOnRemovedStatusOffset = -1;
			int onCertificateReceivedStatusOnFailedStatusOffset = -1;
			int onCertificateReceivedStatusOnPassedStatusOffset = -1;
			int onCertificateReceivedStatusOnPromotedStatusOffset = -1;
			int onCertificateReceivedStatusOnCertificateRequestedStatusOffset = -1;
			int onCertificateReceivedStatusOnCertificatePendingStatusOffset = -1;
			int onCertificateReceivedStatusOnCertificateReceivedStatusOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnRemovedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onRemovedStatusOffset = innerJoinOffset;
							innerJoinOffset = onRemovedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnRemovedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnRemovedStatus_OnRemovedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onRemovedStatusOnRemovedStatusOffset = innerJoinOffset;
							innerJoinOffset = onRemovedStatusOnRemovedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnFailedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnRemovedStatus_OnFailedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onRemovedStatusOnFailedStatusOffset = innerJoinOffset;
							innerJoinOffset = onRemovedStatusOnFailedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnPassedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnRemovedStatus_OnPassedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onRemovedStatusOnPassedStatusOffset = innerJoinOffset;
							innerJoinOffset = onRemovedStatusOnPassedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnPromotedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnRemovedStatus_OnPromotedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onRemovedStatusOnPromotedStatusOffset = innerJoinOffset;
							innerJoinOffset = onRemovedStatusOnPromotedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnCertificateRequestedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnRemovedStatus_OnCertificateRequestedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onRemovedStatusOnCertificateRequestedStatusOffset = innerJoinOffset;
							innerJoinOffset = onRemovedStatusOnCertificateRequestedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnCertificatePendingStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnRemovedStatus_OnCertificatePendingStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onRemovedStatusOnCertificatePendingStatusOffset = innerJoinOffset;
							innerJoinOffset = onRemovedStatusOnCertificatePendingStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnCertificateReceivedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnRemovedStatus_OnCertificateReceivedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onRemovedStatusOnCertificateReceivedStatusOffset = innerJoinOffset;
							innerJoinOffset = onRemovedStatusOnCertificateReceivedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnFailedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onFailedStatusOffset = innerJoinOffset;
							innerJoinOffset = onFailedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnRemovedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnFailedStatus_OnRemovedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onFailedStatusOnRemovedStatusOffset = innerJoinOffset;
							innerJoinOffset = onFailedStatusOnRemovedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnFailedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnFailedStatus_OnFailedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onFailedStatusOnFailedStatusOffset = innerJoinOffset;
							innerJoinOffset = onFailedStatusOnFailedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnPassedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnFailedStatus_OnPassedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onFailedStatusOnPassedStatusOffset = innerJoinOffset;
							innerJoinOffset = onFailedStatusOnPassedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnPromotedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnFailedStatus_OnPromotedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onFailedStatusOnPromotedStatusOffset = innerJoinOffset;
							innerJoinOffset = onFailedStatusOnPromotedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnCertificateRequestedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnFailedStatus_OnCertificateRequestedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onFailedStatusOnCertificateRequestedStatusOffset = innerJoinOffset;
							innerJoinOffset = onFailedStatusOnCertificateRequestedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnCertificatePendingStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnFailedStatus_OnCertificatePendingStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onFailedStatusOnCertificatePendingStatusOffset = innerJoinOffset;
							innerJoinOffset = onFailedStatusOnCertificatePendingStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnCertificateReceivedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnFailedStatus_OnCertificateReceivedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onFailedStatusOnCertificateReceivedStatusOffset = innerJoinOffset;
							innerJoinOffset = onFailedStatusOnCertificateReceivedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPassedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPassedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPassedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnRemovedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPassedStatus_OnRemovedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPassedStatusOnRemovedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPassedStatusOnRemovedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnFailedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPassedStatus_OnFailedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPassedStatusOnFailedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPassedStatusOnFailedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnPassedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPassedStatus_OnPassedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPassedStatusOnPassedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPassedStatusOnPassedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnPromotedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPassedStatus_OnPromotedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPassedStatusOnPromotedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPassedStatusOnPromotedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnCertificateRequestedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPassedStatus_OnCertificateRequestedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPassedStatusOnCertificateRequestedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPassedStatusOnCertificateRequestedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnCertificatePendingStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPassedStatus_OnCertificatePendingStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPassedStatusOnCertificatePendingStatusOffset = innerJoinOffset;
							innerJoinOffset = onPassedStatusOnCertificatePendingStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnCertificateReceivedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPassedStatus_OnCertificateReceivedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPassedStatusOnCertificateReceivedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPassedStatusOnCertificateReceivedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPromotedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPromotedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPromotedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnRemovedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPromotedStatus_OnRemovedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPromotedStatusOnRemovedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPromotedStatusOnRemovedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnFailedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPromotedStatus_OnFailedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPromotedStatusOnFailedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPromotedStatusOnFailedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnPassedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPromotedStatus_OnPassedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPromotedStatusOnPassedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPromotedStatusOnPassedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnPromotedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPromotedStatus_OnPromotedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPromotedStatusOnPromotedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPromotedStatusOnPromotedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnCertificateRequestedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPromotedStatus_OnCertificateRequestedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPromotedStatusOnCertificateRequestedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPromotedStatusOnCertificateRequestedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnCertificatePendingStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPromotedStatus_OnCertificatePendingStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPromotedStatusOnCertificatePendingStatusOffset = innerJoinOffset;
							innerJoinOffset = onPromotedStatusOnCertificatePendingStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnCertificateReceivedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnPromotedStatus_OnCertificateReceivedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onPromotedStatusOnCertificateReceivedStatusOffset = innerJoinOffset;
							innerJoinOffset = onPromotedStatusOnCertificateReceivedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateRequestedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateRequestedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateRequestedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnRemovedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateRequestedStatus_OnRemovedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateRequestedStatusOnRemovedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateRequestedStatusOnRemovedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnFailedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateRequestedStatus_OnFailedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateRequestedStatusOnFailedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateRequestedStatusOnFailedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnPassedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateRequestedStatus_OnPassedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateRequestedStatusOnPassedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateRequestedStatusOnPassedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnPromotedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateRequestedStatus_OnPromotedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateRequestedStatusOnPromotedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateRequestedStatusOnPromotedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnCertificateRequestedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateRequestedStatus_OnCertificateRequestedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateRequestedStatusOnCertificateRequestedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateRequestedStatusOnCertificateRequestedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnCertificatePendingStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateRequestedStatus_OnCertificatePendingStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateRequestedStatusOnCertificatePendingStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateRequestedStatusOnCertificatePendingStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnCertificateReceivedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateRequestedStatus_OnCertificateReceivedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateRequestedStatusOnCertificateReceivedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateRequestedStatusOnCertificateReceivedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificatePendingStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificatePendingStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificatePendingStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnRemovedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificatePendingStatus_OnRemovedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificatePendingStatusOnRemovedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificatePendingStatusOnRemovedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnFailedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificatePendingStatus_OnFailedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificatePendingStatusOnFailedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificatePendingStatusOnFailedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnPassedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificatePendingStatus_OnPassedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificatePendingStatusOnPassedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificatePendingStatusOnPassedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnPromotedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificatePendingStatus_OnPromotedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificatePendingStatusOnPromotedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificatePendingStatusOnPromotedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnCertificateRequestedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificatePendingStatus_OnCertificateRequestedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificatePendingStatusOnCertificateRequestedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificatePendingStatusOnCertificateRequestedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnCertificatePendingStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificatePendingStatus_OnCertificatePendingStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificatePendingStatusOnCertificatePendingStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificatePendingStatusOnCertificatePendingStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnCertificateReceivedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificatePendingStatus_OnCertificateReceivedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificatePendingStatusOnCertificateReceivedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificatePendingStatusOnCertificateReceivedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateReceivedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateReceivedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateReceivedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnRemovedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateReceivedStatus_OnRemovedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateReceivedStatusOnRemovedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateReceivedStatusOnRemovedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnFailedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateReceivedStatus_OnFailedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateReceivedStatusOnFailedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateReceivedStatusOnFailedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnPassedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateReceivedStatus_OnPassedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateReceivedStatusOnPassedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateReceivedStatusOnPassedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnPromotedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateReceivedStatus_OnPromotedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateReceivedStatusOnPromotedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateReceivedStatusOnPromotedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnCertificateRequestedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateReceivedStatus_OnCertificateRequestedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateReceivedStatusOnCertificateRequestedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateReceivedStatusOnCertificateRequestedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnCertificatePendingStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateReceivedStatus_OnCertificatePendingStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateReceivedStatusOnCertificatePendingStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateReceivedStatusOnCertificatePendingStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnCertificateReceivedStatus:
							for(int i = 0; i <= DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("OnCertificateReceivedStatus_OnCertificateReceivedStatus.");
								query.Append(DojoTestListJournalEntryTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							onCertificateReceivedStatusOnCertificateReceivedStatusOffset = innerJoinOffset;
							innerJoinOffset = onCertificateReceivedStatusOnCertificateReceivedStatusOffset + DojoTestListJournalEntryTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_TestListJournalEntryTypes AS DojoTestListJournalEntryType");
			}
			else
			{
				query.Append(" FROM kitTessen_TestListJournalEntryTypes AS DojoTestListJournalEntryType");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnRemovedStatus ON DojoTestListJournalEntryType.OnRemovedStatusID = OnRemovedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnRemovedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnRemovedStatus_OnRemovedStatus ON OnRemovedStatus.OnRemovedStatusID = OnRemovedStatus_OnRemovedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnFailedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnRemovedStatus_OnFailedStatus ON OnRemovedStatus.OnFailedStatusID = OnRemovedStatus_OnFailedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnPassedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnRemovedStatus_OnPassedStatus ON OnRemovedStatus.OnPassedStatusID = OnRemovedStatus_OnPassedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnPromotedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnRemovedStatus_OnPromotedStatus ON OnRemovedStatus.OnPromotedStatusID = OnRemovedStatus_OnPromotedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnCertificateRequestedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnRemovedStatus_OnCertificateRequestedStatus ON OnRemovedStatus.OnCertificateRequestedStatusID = OnRemovedStatus_OnCertificateRequestedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnCertificatePendingStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnRemovedStatus_OnCertificatePendingStatus ON OnRemovedStatus.OnCertificatePendingStatusID = OnRemovedStatus_OnCertificatePendingStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnRemovedStatusOnCertificateReceivedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnRemovedStatus_OnCertificateReceivedStatus ON OnRemovedStatus.OnCertificateReceivedStatusID = OnRemovedStatus_OnCertificateReceivedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnFailedStatus ON DojoTestListJournalEntryType.OnFailedStatusID = OnFailedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnRemovedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnFailedStatus_OnRemovedStatus ON OnFailedStatus.OnRemovedStatusID = OnFailedStatus_OnRemovedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnFailedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnFailedStatus_OnFailedStatus ON OnFailedStatus.OnFailedStatusID = OnFailedStatus_OnFailedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnPassedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnFailedStatus_OnPassedStatus ON OnFailedStatus.OnPassedStatusID = OnFailedStatus_OnPassedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnPromotedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnFailedStatus_OnPromotedStatus ON OnFailedStatus.OnPromotedStatusID = OnFailedStatus_OnPromotedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnCertificateRequestedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnFailedStatus_OnCertificateRequestedStatus ON OnFailedStatus.OnCertificateRequestedStatusID = OnFailedStatus_OnCertificateRequestedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnCertificatePendingStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnFailedStatus_OnCertificatePendingStatus ON OnFailedStatus.OnCertificatePendingStatusID = OnFailedStatus_OnCertificatePendingStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnFailedStatusOnCertificateReceivedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnFailedStatus_OnCertificateReceivedStatus ON OnFailedStatus.OnCertificateReceivedStatusID = OnFailedStatus_OnCertificateReceivedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPassedStatus ON DojoTestListJournalEntryType.OnPassedStatusID = OnPassedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnRemovedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPassedStatus_OnRemovedStatus ON OnPassedStatus.OnRemovedStatusID = OnPassedStatus_OnRemovedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnFailedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPassedStatus_OnFailedStatus ON OnPassedStatus.OnFailedStatusID = OnPassedStatus_OnFailedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnPassedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPassedStatus_OnPassedStatus ON OnPassedStatus.OnPassedStatusID = OnPassedStatus_OnPassedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnPromotedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPassedStatus_OnPromotedStatus ON OnPassedStatus.OnPromotedStatusID = OnPassedStatus_OnPromotedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnCertificateRequestedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPassedStatus_OnCertificateRequestedStatus ON OnPassedStatus.OnCertificateRequestedStatusID = OnPassedStatus_OnCertificateRequestedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnCertificatePendingStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPassedStatus_OnCertificatePendingStatus ON OnPassedStatus.OnCertificatePendingStatusID = OnPassedStatus_OnCertificatePendingStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPassedStatusOnCertificateReceivedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPassedStatus_OnCertificateReceivedStatus ON OnPassedStatus.OnCertificateReceivedStatusID = OnPassedStatus_OnCertificateReceivedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPromotedStatus ON DojoTestListJournalEntryType.OnPromotedStatusID = OnPromotedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnRemovedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPromotedStatus_OnRemovedStatus ON OnPromotedStatus.OnRemovedStatusID = OnPromotedStatus_OnRemovedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnFailedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPromotedStatus_OnFailedStatus ON OnPromotedStatus.OnFailedStatusID = OnPromotedStatus_OnFailedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnPassedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPromotedStatus_OnPassedStatus ON OnPromotedStatus.OnPassedStatusID = OnPromotedStatus_OnPassedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnPromotedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPromotedStatus_OnPromotedStatus ON OnPromotedStatus.OnPromotedStatusID = OnPromotedStatus_OnPromotedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnCertificateRequestedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPromotedStatus_OnCertificateRequestedStatus ON OnPromotedStatus.OnCertificateRequestedStatusID = OnPromotedStatus_OnCertificateRequestedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnCertificatePendingStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPromotedStatus_OnCertificatePendingStatus ON OnPromotedStatus.OnCertificatePendingStatusID = OnPromotedStatus_OnCertificatePendingStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnPromotedStatusOnCertificateReceivedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnPromotedStatus_OnCertificateReceivedStatus ON OnPromotedStatus.OnCertificateReceivedStatusID = OnPromotedStatus_OnCertificateReceivedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateRequestedStatus ON DojoTestListJournalEntryType.OnCertificateRequestedStatusID = OnCertificateRequestedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnRemovedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateRequestedStatus_OnRemovedStatus ON OnCertificateRequestedStatus.OnRemovedStatusID = OnCertificateRequestedStatus_OnRemovedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnFailedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateRequestedStatus_OnFailedStatus ON OnCertificateRequestedStatus.OnFailedStatusID = OnCertificateRequestedStatus_OnFailedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnPassedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateRequestedStatus_OnPassedStatus ON OnCertificateRequestedStatus.OnPassedStatusID = OnCertificateRequestedStatus_OnPassedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnPromotedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateRequestedStatus_OnPromotedStatus ON OnCertificateRequestedStatus.OnPromotedStatusID = OnCertificateRequestedStatus_OnPromotedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnCertificateRequestedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateRequestedStatus_OnCertificateRequestedStatus ON OnCertificateRequestedStatus.OnCertificateRequestedStatusID = OnCertificateRequestedStatus_OnCertificateRequestedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnCertificatePendingStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateRequestedStatus_OnCertificatePendingStatus ON OnCertificateRequestedStatus.OnCertificatePendingStatusID = OnCertificateRequestedStatus_OnCertificatePendingStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateRequestedStatusOnCertificateReceivedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateRequestedStatus_OnCertificateReceivedStatus ON OnCertificateRequestedStatus.OnCertificateReceivedStatusID = OnCertificateRequestedStatus_OnCertificateReceivedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificatePendingStatus ON DojoTestListJournalEntryType.OnCertificatePendingStatusID = OnCertificatePendingStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnRemovedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificatePendingStatus_OnRemovedStatus ON OnCertificatePendingStatus.OnRemovedStatusID = OnCertificatePendingStatus_OnRemovedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnFailedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificatePendingStatus_OnFailedStatus ON OnCertificatePendingStatus.OnFailedStatusID = OnCertificatePendingStatus_OnFailedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnPassedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificatePendingStatus_OnPassedStatus ON OnCertificatePendingStatus.OnPassedStatusID = OnCertificatePendingStatus_OnPassedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnPromotedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificatePendingStatus_OnPromotedStatus ON OnCertificatePendingStatus.OnPromotedStatusID = OnCertificatePendingStatus_OnPromotedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnCertificateRequestedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificatePendingStatus_OnCertificateRequestedStatus ON OnCertificatePendingStatus.OnCertificateRequestedStatusID = OnCertificatePendingStatus_OnCertificateRequestedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnCertificatePendingStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificatePendingStatus_OnCertificatePendingStatus ON OnCertificatePendingStatus.OnCertificatePendingStatusID = OnCertificatePendingStatus_OnCertificatePendingStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificatePendingStatusOnCertificateReceivedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificatePendingStatus_OnCertificateReceivedStatus ON OnCertificatePendingStatus.OnCertificateReceivedStatusID = OnCertificatePendingStatus_OnCertificateReceivedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateReceivedStatus ON DojoTestListJournalEntryType.OnCertificateReceivedStatusID = OnCertificateReceivedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnRemovedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateReceivedStatus_OnRemovedStatus ON OnCertificateReceivedStatus.OnRemovedStatusID = OnCertificateReceivedStatus_OnRemovedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnFailedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateReceivedStatus_OnFailedStatus ON OnCertificateReceivedStatus.OnFailedStatusID = OnCertificateReceivedStatus_OnFailedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnPassedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateReceivedStatus_OnPassedStatus ON OnCertificateReceivedStatus.OnPassedStatusID = OnCertificateReceivedStatus_OnPassedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnPromotedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateReceivedStatus_OnPromotedStatus ON OnCertificateReceivedStatus.OnPromotedStatusID = OnCertificateReceivedStatus_OnPromotedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnCertificateRequestedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateReceivedStatus_OnCertificateRequestedStatus ON OnCertificateReceivedStatus.OnCertificateRequestedStatusID = OnCertificateReceivedStatus_OnCertificateRequestedStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnCertificatePendingStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateReceivedStatus_OnCertificatePendingStatus ON OnCertificateReceivedStatus.OnCertificatePendingStatusID = OnCertificateReceivedStatus_OnCertificatePendingStatus.DojoTestListJournalEntryTypeID)");
							break;
						case DojoTestListJournalEntryTypeFlags.OnCertificateReceivedStatusOnCertificateReceivedStatus:
							query.Append(" LEFT JOIN kitTessen_TestListJournalEntryTypes AS OnCertificateReceivedStatus_OnCertificateReceivedStatus ON OnCertificateReceivedStatus.OnCertificateReceivedStatusID = OnCertificateReceivedStatus_OnCertificateReceivedStatus.DojoTestListJournalEntryTypeID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoTestListJournalEntryTypeCollection = new DojoTestListJournalEntryTypeCollection();

			while(r.Read())
			{
				DojoTestListJournalEntryType dojoTestListJournalEntryType = ParseFromReader(r, 0, 1);

				// Fill OnRemovedStatus
				if(onRemovedStatusOffset != -1 && !r.IsDBNull(onRemovedStatusOffset))
				{
					DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onRemovedStatus, r, onRemovedStatusOffset, onRemovedStatusOffset+1);

					// Fill 
					if(onRemovedStatusOnRemovedStatusOffset != -1 && !r.IsDBNull(onRemovedStatusOnRemovedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onRemovedStatus.OnRemovedStatus, r, onRemovedStatusOnRemovedStatusOffset, onRemovedStatusOnRemovedStatusOffset+1);

					// Fill 
					if(onRemovedStatusOnFailedStatusOffset != -1 && !r.IsDBNull(onRemovedStatusOnFailedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onRemovedStatus.OnFailedStatus, r, onRemovedStatusOnFailedStatusOffset, onRemovedStatusOnFailedStatusOffset+1);

					// Fill 
					if(onRemovedStatusOnPassedStatusOffset != -1 && !r.IsDBNull(onRemovedStatusOnPassedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onRemovedStatus.OnPassedStatus, r, onRemovedStatusOnPassedStatusOffset, onRemovedStatusOnPassedStatusOffset+1);

					// Fill 
					if(onRemovedStatusOnPromotedStatusOffset != -1 && !r.IsDBNull(onRemovedStatusOnPromotedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onRemovedStatus.OnPromotedStatus, r, onRemovedStatusOnPromotedStatusOffset, onRemovedStatusOnPromotedStatusOffset+1);

					// Fill 
					if(onRemovedStatusOnCertificateRequestedStatusOffset != -1 && !r.IsDBNull(onRemovedStatusOnCertificateRequestedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onRemovedStatus.OnCertificateRequestedStatus, r, onRemovedStatusOnCertificateRequestedStatusOffset, onRemovedStatusOnCertificateRequestedStatusOffset+1);

					// Fill 
					if(onRemovedStatusOnCertificatePendingStatusOffset != -1 && !r.IsDBNull(onRemovedStatusOnCertificatePendingStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onRemovedStatus.OnCertificatePendingStatus, r, onRemovedStatusOnCertificatePendingStatusOffset, onRemovedStatusOnCertificatePendingStatusOffset+1);

					// Fill 
					if(onRemovedStatusOnCertificateReceivedStatusOffset != -1 && !r.IsDBNull(onRemovedStatusOnCertificateReceivedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onRemovedStatus.OnCertificateReceivedStatus, r, onRemovedStatusOnCertificateReceivedStatusOffset, onRemovedStatusOnCertificateReceivedStatusOffset+1);

				}

				// Fill OnFailedStatus
				if(onFailedStatusOffset != -1 && !r.IsDBNull(onFailedStatusOffset))
				{
					DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onFailedStatus, r, onFailedStatusOffset, onFailedStatusOffset+1);

					// Fill 
					if(onFailedStatusOnRemovedStatusOffset != -1 && !r.IsDBNull(onFailedStatusOnRemovedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onFailedStatus.OnRemovedStatus, r, onFailedStatusOnRemovedStatusOffset, onFailedStatusOnRemovedStatusOffset+1);

					// Fill 
					if(onFailedStatusOnFailedStatusOffset != -1 && !r.IsDBNull(onFailedStatusOnFailedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onFailedStatus.OnFailedStatus, r, onFailedStatusOnFailedStatusOffset, onFailedStatusOnFailedStatusOffset+1);

					// Fill 
					if(onFailedStatusOnPassedStatusOffset != -1 && !r.IsDBNull(onFailedStatusOnPassedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onFailedStatus.OnPassedStatus, r, onFailedStatusOnPassedStatusOffset, onFailedStatusOnPassedStatusOffset+1);

					// Fill 
					if(onFailedStatusOnPromotedStatusOffset != -1 && !r.IsDBNull(onFailedStatusOnPromotedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onFailedStatus.OnPromotedStatus, r, onFailedStatusOnPromotedStatusOffset, onFailedStatusOnPromotedStatusOffset+1);

					// Fill 
					if(onFailedStatusOnCertificateRequestedStatusOffset != -1 && !r.IsDBNull(onFailedStatusOnCertificateRequestedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onFailedStatus.OnCertificateRequestedStatus, r, onFailedStatusOnCertificateRequestedStatusOffset, onFailedStatusOnCertificateRequestedStatusOffset+1);

					// Fill 
					if(onFailedStatusOnCertificatePendingStatusOffset != -1 && !r.IsDBNull(onFailedStatusOnCertificatePendingStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onFailedStatus.OnCertificatePendingStatus, r, onFailedStatusOnCertificatePendingStatusOffset, onFailedStatusOnCertificatePendingStatusOffset+1);

					// Fill 
					if(onFailedStatusOnCertificateReceivedStatusOffset != -1 && !r.IsDBNull(onFailedStatusOnCertificateReceivedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onFailedStatus.OnCertificateReceivedStatus, r, onFailedStatusOnCertificateReceivedStatusOffset, onFailedStatusOnCertificateReceivedStatusOffset+1);

				}

				// Fill OnPassedStatus
				if(onPassedStatusOffset != -1 && !r.IsDBNull(onPassedStatusOffset))
				{
					DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPassedStatus, r, onPassedStatusOffset, onPassedStatusOffset+1);

					// Fill 
					if(onPassedStatusOnRemovedStatusOffset != -1 && !r.IsDBNull(onPassedStatusOnRemovedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPassedStatus.OnRemovedStatus, r, onPassedStatusOnRemovedStatusOffset, onPassedStatusOnRemovedStatusOffset+1);

					// Fill 
					if(onPassedStatusOnFailedStatusOffset != -1 && !r.IsDBNull(onPassedStatusOnFailedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPassedStatus.OnFailedStatus, r, onPassedStatusOnFailedStatusOffset, onPassedStatusOnFailedStatusOffset+1);

					// Fill 
					if(onPassedStatusOnPassedStatusOffset != -1 && !r.IsDBNull(onPassedStatusOnPassedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPassedStatus.OnPassedStatus, r, onPassedStatusOnPassedStatusOffset, onPassedStatusOnPassedStatusOffset+1);

					// Fill 
					if(onPassedStatusOnPromotedStatusOffset != -1 && !r.IsDBNull(onPassedStatusOnPromotedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPassedStatus.OnPromotedStatus, r, onPassedStatusOnPromotedStatusOffset, onPassedStatusOnPromotedStatusOffset+1);

					// Fill 
					if(onPassedStatusOnCertificateRequestedStatusOffset != -1 && !r.IsDBNull(onPassedStatusOnCertificateRequestedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPassedStatus.OnCertificateRequestedStatus, r, onPassedStatusOnCertificateRequestedStatusOffset, onPassedStatusOnCertificateRequestedStatusOffset+1);

					// Fill 
					if(onPassedStatusOnCertificatePendingStatusOffset != -1 && !r.IsDBNull(onPassedStatusOnCertificatePendingStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPassedStatus.OnCertificatePendingStatus, r, onPassedStatusOnCertificatePendingStatusOffset, onPassedStatusOnCertificatePendingStatusOffset+1);

					// Fill 
					if(onPassedStatusOnCertificateReceivedStatusOffset != -1 && !r.IsDBNull(onPassedStatusOnCertificateReceivedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPassedStatus.OnCertificateReceivedStatus, r, onPassedStatusOnCertificateReceivedStatusOffset, onPassedStatusOnCertificateReceivedStatusOffset+1);

				}

				// Fill OnPromotedStatus
				if(onPromotedStatusOffset != -1 && !r.IsDBNull(onPromotedStatusOffset))
				{
					DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPromotedStatus, r, onPromotedStatusOffset, onPromotedStatusOffset+1);

					// Fill 
					if(onPromotedStatusOnRemovedStatusOffset != -1 && !r.IsDBNull(onPromotedStatusOnRemovedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPromotedStatus.OnRemovedStatus, r, onPromotedStatusOnRemovedStatusOffset, onPromotedStatusOnRemovedStatusOffset+1);

					// Fill 
					if(onPromotedStatusOnFailedStatusOffset != -1 && !r.IsDBNull(onPromotedStatusOnFailedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPromotedStatus.OnFailedStatus, r, onPromotedStatusOnFailedStatusOffset, onPromotedStatusOnFailedStatusOffset+1);

					// Fill 
					if(onPromotedStatusOnPassedStatusOffset != -1 && !r.IsDBNull(onPromotedStatusOnPassedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPromotedStatus.OnPassedStatus, r, onPromotedStatusOnPassedStatusOffset, onPromotedStatusOnPassedStatusOffset+1);

					// Fill 
					if(onPromotedStatusOnPromotedStatusOffset != -1 && !r.IsDBNull(onPromotedStatusOnPromotedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPromotedStatus.OnPromotedStatus, r, onPromotedStatusOnPromotedStatusOffset, onPromotedStatusOnPromotedStatusOffset+1);

					// Fill 
					if(onPromotedStatusOnCertificateRequestedStatusOffset != -1 && !r.IsDBNull(onPromotedStatusOnCertificateRequestedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPromotedStatus.OnCertificateRequestedStatus, r, onPromotedStatusOnCertificateRequestedStatusOffset, onPromotedStatusOnCertificateRequestedStatusOffset+1);

					// Fill 
					if(onPromotedStatusOnCertificatePendingStatusOffset != -1 && !r.IsDBNull(onPromotedStatusOnCertificatePendingStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPromotedStatus.OnCertificatePendingStatus, r, onPromotedStatusOnCertificatePendingStatusOffset, onPromotedStatusOnCertificatePendingStatusOffset+1);

					// Fill 
					if(onPromotedStatusOnCertificateReceivedStatusOffset != -1 && !r.IsDBNull(onPromotedStatusOnCertificateReceivedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onPromotedStatus.OnCertificateReceivedStatus, r, onPromotedStatusOnCertificateReceivedStatusOffset, onPromotedStatusOnCertificateReceivedStatusOffset+1);

				}

				// Fill OnCertificateRequestedStatus
				if(onCertificateRequestedStatusOffset != -1 && !r.IsDBNull(onCertificateRequestedStatusOffset))
				{
					DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateRequestedStatus, r, onCertificateRequestedStatusOffset, onCertificateRequestedStatusOffset+1);

					// Fill 
					if(onCertificateRequestedStatusOnRemovedStatusOffset != -1 && !r.IsDBNull(onCertificateRequestedStatusOnRemovedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateRequestedStatus.OnRemovedStatus, r, onCertificateRequestedStatusOnRemovedStatusOffset, onCertificateRequestedStatusOnRemovedStatusOffset+1);

					// Fill 
					if(onCertificateRequestedStatusOnFailedStatusOffset != -1 && !r.IsDBNull(onCertificateRequestedStatusOnFailedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateRequestedStatus.OnFailedStatus, r, onCertificateRequestedStatusOnFailedStatusOffset, onCertificateRequestedStatusOnFailedStatusOffset+1);

					// Fill 
					if(onCertificateRequestedStatusOnPassedStatusOffset != -1 && !r.IsDBNull(onCertificateRequestedStatusOnPassedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateRequestedStatus.OnPassedStatus, r, onCertificateRequestedStatusOnPassedStatusOffset, onCertificateRequestedStatusOnPassedStatusOffset+1);

					// Fill 
					if(onCertificateRequestedStatusOnPromotedStatusOffset != -1 && !r.IsDBNull(onCertificateRequestedStatusOnPromotedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateRequestedStatus.OnPromotedStatus, r, onCertificateRequestedStatusOnPromotedStatusOffset, onCertificateRequestedStatusOnPromotedStatusOffset+1);

					// Fill 
					if(onCertificateRequestedStatusOnCertificateRequestedStatusOffset != -1 && !r.IsDBNull(onCertificateRequestedStatusOnCertificateRequestedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateRequestedStatus.OnCertificateRequestedStatus, r, onCertificateRequestedStatusOnCertificateRequestedStatusOffset, onCertificateRequestedStatusOnCertificateRequestedStatusOffset+1);

					// Fill 
					if(onCertificateRequestedStatusOnCertificatePendingStatusOffset != -1 && !r.IsDBNull(onCertificateRequestedStatusOnCertificatePendingStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateRequestedStatus.OnCertificatePendingStatus, r, onCertificateRequestedStatusOnCertificatePendingStatusOffset, onCertificateRequestedStatusOnCertificatePendingStatusOffset+1);

					// Fill 
					if(onCertificateRequestedStatusOnCertificateReceivedStatusOffset != -1 && !r.IsDBNull(onCertificateRequestedStatusOnCertificateReceivedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateRequestedStatus.OnCertificateReceivedStatus, r, onCertificateRequestedStatusOnCertificateReceivedStatusOffset, onCertificateRequestedStatusOnCertificateReceivedStatusOffset+1);

				}

				// Fill OnCertificatePendingStatus
				if(onCertificatePendingStatusOffset != -1 && !r.IsDBNull(onCertificatePendingStatusOffset))
				{
					DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificatePendingStatus, r, onCertificatePendingStatusOffset, onCertificatePendingStatusOffset+1);

					// Fill 
					if(onCertificatePendingStatusOnRemovedStatusOffset != -1 && !r.IsDBNull(onCertificatePendingStatusOnRemovedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificatePendingStatus.OnRemovedStatus, r, onCertificatePendingStatusOnRemovedStatusOffset, onCertificatePendingStatusOnRemovedStatusOffset+1);

					// Fill 
					if(onCertificatePendingStatusOnFailedStatusOffset != -1 && !r.IsDBNull(onCertificatePendingStatusOnFailedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificatePendingStatus.OnFailedStatus, r, onCertificatePendingStatusOnFailedStatusOffset, onCertificatePendingStatusOnFailedStatusOffset+1);

					// Fill 
					if(onCertificatePendingStatusOnPassedStatusOffset != -1 && !r.IsDBNull(onCertificatePendingStatusOnPassedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificatePendingStatus.OnPassedStatus, r, onCertificatePendingStatusOnPassedStatusOffset, onCertificatePendingStatusOnPassedStatusOffset+1);

					// Fill 
					if(onCertificatePendingStatusOnPromotedStatusOffset != -1 && !r.IsDBNull(onCertificatePendingStatusOnPromotedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificatePendingStatus.OnPromotedStatus, r, onCertificatePendingStatusOnPromotedStatusOffset, onCertificatePendingStatusOnPromotedStatusOffset+1);

					// Fill 
					if(onCertificatePendingStatusOnCertificateRequestedStatusOffset != -1 && !r.IsDBNull(onCertificatePendingStatusOnCertificateRequestedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificatePendingStatus.OnCertificateRequestedStatus, r, onCertificatePendingStatusOnCertificateRequestedStatusOffset, onCertificatePendingStatusOnCertificateRequestedStatusOffset+1);

					// Fill 
					if(onCertificatePendingStatusOnCertificatePendingStatusOffset != -1 && !r.IsDBNull(onCertificatePendingStatusOnCertificatePendingStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificatePendingStatus.OnCertificatePendingStatus, r, onCertificatePendingStatusOnCertificatePendingStatusOffset, onCertificatePendingStatusOnCertificatePendingStatusOffset+1);

					// Fill 
					if(onCertificatePendingStatusOnCertificateReceivedStatusOffset != -1 && !r.IsDBNull(onCertificatePendingStatusOnCertificateReceivedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificatePendingStatus.OnCertificateReceivedStatus, r, onCertificatePendingStatusOnCertificateReceivedStatusOffset, onCertificatePendingStatusOnCertificateReceivedStatusOffset+1);

				}

				// Fill OnCertificateReceivedStatus
				if(onCertificateReceivedStatusOffset != -1 && !r.IsDBNull(onCertificateReceivedStatusOffset))
				{
					DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateReceivedStatus, r, onCertificateReceivedStatusOffset, onCertificateReceivedStatusOffset+1);

					// Fill 
					if(onCertificateReceivedStatusOnRemovedStatusOffset != -1 && !r.IsDBNull(onCertificateReceivedStatusOnRemovedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateReceivedStatus.OnRemovedStatus, r, onCertificateReceivedStatusOnRemovedStatusOffset, onCertificateReceivedStatusOnRemovedStatusOffset+1);

					// Fill 
					if(onCertificateReceivedStatusOnFailedStatusOffset != -1 && !r.IsDBNull(onCertificateReceivedStatusOnFailedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateReceivedStatus.OnFailedStatus, r, onCertificateReceivedStatusOnFailedStatusOffset, onCertificateReceivedStatusOnFailedStatusOffset+1);

					// Fill 
					if(onCertificateReceivedStatusOnPassedStatusOffset != -1 && !r.IsDBNull(onCertificateReceivedStatusOnPassedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateReceivedStatus.OnPassedStatus, r, onCertificateReceivedStatusOnPassedStatusOffset, onCertificateReceivedStatusOnPassedStatusOffset+1);

					// Fill 
					if(onCertificateReceivedStatusOnPromotedStatusOffset != -1 && !r.IsDBNull(onCertificateReceivedStatusOnPromotedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateReceivedStatus.OnPromotedStatus, r, onCertificateReceivedStatusOnPromotedStatusOffset, onCertificateReceivedStatusOnPromotedStatusOffset+1);

					// Fill 
					if(onCertificateReceivedStatusOnCertificateRequestedStatusOffset != -1 && !r.IsDBNull(onCertificateReceivedStatusOnCertificateRequestedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateReceivedStatus.OnCertificateRequestedStatus, r, onCertificateReceivedStatusOnCertificateRequestedStatusOffset, onCertificateReceivedStatusOnCertificateRequestedStatusOffset+1);

					// Fill 
					if(onCertificateReceivedStatusOnCertificatePendingStatusOffset != -1 && !r.IsDBNull(onCertificateReceivedStatusOnCertificatePendingStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateReceivedStatus.OnCertificatePendingStatus, r, onCertificateReceivedStatusOnCertificatePendingStatusOffset, onCertificateReceivedStatusOnCertificatePendingStatusOffset+1);

					// Fill 
					if(onCertificateReceivedStatusOnCertificateReceivedStatusOffset != -1 && !r.IsDBNull(onCertificateReceivedStatusOnCertificateReceivedStatusOffset))
						DojoTestListJournalEntryTypeManager.FillFromReader(dojoTestListJournalEntryType.onCertificateReceivedStatus.OnCertificateReceivedStatus, r, onCertificateReceivedStatusOnCertificateReceivedStatusOffset, onCertificateReceivedStatusOnCertificateReceivedStatusOffset+1);

				}

				dojoTestListJournalEntryTypeCollection.Add(dojoTestListJournalEntryType);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoTestListJournalEntryTypeCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoTestListJournalEntryType ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoTestListJournalEntryType dojoTestListJournalEntryType = new DojoTestListJournalEntryType();
			FillFromReader(dojoTestListJournalEntryType, r, idOffset, dataOffset);
			return dojoTestListJournalEntryType;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoTestListJournalEntryType dojoTestListJournalEntryType, IDataReader r, int idOffset, int dataOffset)
		{
			dojoTestListJournalEntryType.iD = r.GetInt32(idOffset);
			dojoTestListJournalEntryType.isSynced = true;
			dojoTestListJournalEntryType.isPlaceHolder = false;

			dojoTestListJournalEntryType.name = r.GetString(0+dataOffset);
			dojoTestListJournalEntryType.description = r.GetString(1+dataOffset);
			dojoTestListJournalEntryType.orderNum = r.GetInt32(2+dataOffset);
			dojoTestListJournalEntryType.eligible = r.GetBoolean(3+dataOffset);
			dojoTestListJournalEntryType.failed = r.GetBoolean(4+dataOffset);
			dojoTestListJournalEntryType.passed = r.GetBoolean(5+dataOffset);
			dojoTestListJournalEntryType.certificateRequest = r.GetBoolean(6+dataOffset);
			dojoTestListJournalEntryType.certificatePending = r.GetBoolean(7+dataOffset);
			dojoTestListJournalEntryType.certificateReceived = r.GetBoolean(8+dataOffset);
			dojoTestListJournalEntryType.ineligible = r.GetBoolean(9+dataOffset);
			if(!r.IsDBNull(10+dataOffset) && r.GetInt32(10+dataOffset) > 0)
			{
				dojoTestListJournalEntryType.onRemovedStatus = DojoTestListJournalEntryType.NewPlaceHolder(r.GetInt32(10+dataOffset));
			}
			if(!r.IsDBNull(11+dataOffset) && r.GetInt32(11+dataOffset) > 0)
			{
				dojoTestListJournalEntryType.onFailedStatus = DojoTestListJournalEntryType.NewPlaceHolder(r.GetInt32(11+dataOffset));
			}
			if(!r.IsDBNull(12+dataOffset) && r.GetInt32(12+dataOffset) > 0)
			{
				dojoTestListJournalEntryType.onPassedStatus = DojoTestListJournalEntryType.NewPlaceHolder(r.GetInt32(12+dataOffset));
			}
			if(!r.IsDBNull(13+dataOffset) && r.GetInt32(13+dataOffset) > 0)
			{
				dojoTestListJournalEntryType.onPromotedStatus = DojoTestListJournalEntryType.NewPlaceHolder(r.GetInt32(13+dataOffset));
			}
			if(!r.IsDBNull(14+dataOffset) && r.GetInt32(14+dataOffset) > 0)
			{
				dojoTestListJournalEntryType.onCertificateRequestedStatus = DojoTestListJournalEntryType.NewPlaceHolder(r.GetInt32(14+dataOffset));
			}
			if(!r.IsDBNull(15+dataOffset) && r.GetInt32(15+dataOffset) > 0)
			{
				dojoTestListJournalEntryType.onCertificatePendingStatus = DojoTestListJournalEntryType.NewPlaceHolder(r.GetInt32(15+dataOffset));
			}
			if(!r.IsDBNull(16+dataOffset) && r.GetInt32(16+dataOffset) > 0)
			{
				dojoTestListJournalEntryType.onCertificateReceivedStatus = DojoTestListJournalEntryType.NewPlaceHolder(r.GetInt32(16+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_TestListJournalEntryTypes WHERE DojoTestListJournalEntryTypeID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_TestListJournalEntryTypes ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_TestListJournalEntryTypes_OnRemovedStatus FOREIGN KEY (OnRemovedStatusID) REFERENCES kitTessen_TestListJournalEntryTypes (DojoTestListJournalEntryTypeID),");
			query.Append(" CONSTRAINT FK_kitTessen_TestListJournalEntryTypes_OnFailedStatus FOREIGN KEY (OnFailedStatusID) REFERENCES kitTessen_TestListJournalEntryTypes (DojoTestListJournalEntryTypeID),");
			query.Append(" CONSTRAINT FK_kitTessen_TestListJournalEntryTypes_OnPassedStatus FOREIGN KEY (OnPassedStatusID) REFERENCES kitTessen_TestListJournalEntryTypes (DojoTestListJournalEntryTypeID),");
			query.Append(" CONSTRAINT FK_kitTessen_TestListJournalEntryTypes_OnPromotedStatus FOREIGN KEY (OnPromotedStatusID) REFERENCES kitTessen_TestListJournalEntryTypes (DojoTestListJournalEntryTypeID),");
			query.Append(" CONSTRAINT FK_kitTessen_TestListJournalEntryTypes_OnCertificateRequestedStatus FOREIGN KEY (OnCertificateRequestedStatusID) REFERENCES kitTessen_TestListJournalEntryTypes (DojoTestListJournalEntryTypeID),");
			query.Append(" CONSTRAINT FK_kitTessen_TestListJournalEntryTypes_OnCertificatePendingStatus FOREIGN KEY (OnCertificatePendingStatusID) REFERENCES kitTessen_TestListJournalEntryTypes (DojoTestListJournalEntryTypeID),");
			query.Append(" CONSTRAINT FK_kitTessen_TestListJournalEntryTypes_OnCertificateReceivedStatus FOREIGN KEY (OnCertificateReceivedStatusID) REFERENCES kitTessen_TestListJournalEntryTypes (DojoTestListJournalEntryTypeID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_TestListJournalEntryTypes ");
				query.Append(" (DojoTestListJournalEntryTypeID COUNTER(1,1) CONSTRAINT PK_kitTessen_TestListJournalEntryTypes PRIMARY KEY, " +
					"Name TEXT(75)," +
					"Description TEXT(255)," +
					"OrderNum LONG," +
					"Eligible BIT," +
					"Failed BIT," +
					"Passed BIT," +
					"CertificateRequest BIT," +
					"CertificatePending BIT," +
					"CertificateReceived BIT," +
					"Ineligible BIT," +
					"OnRemovedStatusID LONG," +
					"OnFailedStatusID LONG," +
					"OnPassedStatusID LONG," +
					"OnPromotedStatusID LONG," +
					"OnCertificateRequestedStatusID LONG," +
					"OnCertificatePendingStatusID LONG," +
					"OnCertificateReceivedStatusID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_TestListJournalEntryTypes ");
				query.Append(" (DojoTestListJournalEntryTypeID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_TestListJournalEntryTypes PRIMARY KEY, " +
					"Name NVARCHAR(75)," +
					"Description NVARCHAR(255)," +
					"OrderNum INT," +
					"Eligible BIT," +
					"Failed BIT," +
					"Passed BIT," +
					"CertificateRequest BIT," +
					"CertificatePending BIT," +
					"CertificateReceived BIT," +
					"Ineligible BIT," +
					"OnRemovedStatusID INT," +
					"OnFailedStatusID INT," +
					"OnPassedStatusID INT," +
					"OnPromotedStatusID INT," +
					"OnCertificateRequestedStatusID INT," +
					"OnCertificatePendingStatusID INT," +
					"OnCertificateReceivedStatusID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoTestListJournalEntryType dojoTestListJournalEntryType)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_TestListJournalEntryTypes_" + dojoTestListJournalEntryType.iD.ToString(), dojoTestListJournalEntryType);
		}

		private static DojoTestListJournalEntryType cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_TestListJournalEntryTypes_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoTestListJournalEntryType)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_TestListJournalEntryTypes_" + id.ToString());
		}

		#endregion

	}
}

