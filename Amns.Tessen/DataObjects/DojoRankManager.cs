/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoRankFlags : int { PromotionRank,
				PromotionRankPromotionRank,
				PromotionRankItem,
				Item,
				ItemParentItem,
				ItemPurchaseVendor,
				ItemPurchaseAccount,
				ItemInventoryAccount,
				ItemTax,
				ItemSalesIncomeAccount,
				ItemWebRelatedItems};

	#endregion

	/// <summary>
	/// Datamanager for DojoRank objects.
	/// </summary>
	public class DojoRankManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_Ranks";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoRankID",
			"Name",
			"PromotionTimeInRank",
			"PromotionTimeFromLastTest",
			"PromotionRequirements",
			"PromotionFee",
			"PromotionRankID",
			"PromotionResetIP",
			"OrderNum",
			"Description",
			"ItemID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoRankID", "LONG", "-1" },
			{ "Name", "TEXT(75)", "" },
			{ "PromotionTimeInRank", "DOUBLE", "" },
			{ "PromotionTimeFromLastTest", "DOUBLE", "" },
			{ "PromotionRequirements", "MEMO", "" },
			{ "PromotionFee", "CURRENCY", "" },
			{ "PromotionRankID", "LONG", "null" },
			{ "PromotionResetIP", "BIT", "" },
			{ "OrderNum", "LONG", "" },
			{ "Description", "TEXT(255)", "string.Empty" },
			{ "ItemID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoRankManager()
		{
		}

		public DojoRankManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoRankManager.isInitialized)
			{
				DojoRankManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoRank into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoRank">The DojoRank to insert into the database.</param>
		internal static int _insert(DojoRank dojoRank)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_Ranks " +
				"(" +
				"Name," +
				"PromotionTimeInRank," +
				"PromotionTimeFromLastTest," +
				"PromotionRequirements," +
				"PromotionFee," +
				"PromotionRankID," +
				"PromotionResetIP," +
				"OrderNum," +
				"Description," +
				"ItemID) VALUES (" +
				"@Name," +
				"@PromotionTimeInRank," +
				"@PromotionTimeFromLastTest," +
				"@PromotionRequirements," +
				"@PromotionFee," +
				"@PromotionRankID," +
				"@PromotionResetIP," +
				"@OrderNum," +
				"@Description," +
				"@ItemID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoRank);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoRank);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoRank in cache.
			if(cacheEnabled) cacheStore(dojoRank);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoRank dojoRank)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_Ranks SET Name=@Name," +
				"PromotionTimeInRank=@PromotionTimeInRank," +
				"PromotionTimeFromLastTest=@PromotionTimeFromLastTest," +
				"PromotionRequirements=@PromotionRequirements," +
				"PromotionFee=@PromotionFee," +
				"PromotionRankID=@PromotionRankID," +
				"PromotionResetIP=@PromotionResetIP," +
				"OrderNum=@OrderNum," +
				"Description=@Description," +
				"ItemID=@ItemID WHERE DojoRankID=@DojoRankID;");

			fillParameters(database, dbCommand, dojoRank);
			database.AddInParameter(dbCommand, "DojoRankID", DbType.Int32, dojoRank.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoRank in cache.
			if (cacheEnabled) cacheStore(dojoRank);

			return dojoRank.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoRank dojoRank)
		{
			#region Default

			addParameter(database, dbCommand, "@Name", DbType.String, dojoRank.name);
			addParameter(database, dbCommand, "@PromotionTimeInRank", DbType.Double, dojoRank.promotionTimeInRank.Ticks);
			addParameter(database, dbCommand, "@PromotionTimeFromLastTest", DbType.Double, dojoRank.promotionTimeFromLastTest.Ticks);
			addParameter(database, dbCommand, "@PromotionRequirements", DbType.String, dojoRank.promotionRequirements);
			addParameter(database, dbCommand, "@PromotionFee", DbType.Currency, dojoRank.promotionFee);
			if(dojoRank.promotionRank == null)
			{
				addParameter(database, dbCommand, "@PromotionRankID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@PromotionRankID", DbType.Int32, dojoRank.promotionRank.ID);
			}
			addParameter(database, dbCommand, "@PromotionResetIP", DbType.Boolean, dojoRank.promotionResetIP);
			addParameter(database, dbCommand, "@OrderNum", DbType.Int32, dojoRank.orderNum);
			addParameter(database, dbCommand, "@Description", DbType.String, dojoRank.description);

			#endregion

			#region Rappahanock

			if(dojoRank.item == null)
			{
				addParameter(database, dbCommand, "@ItemID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ItemID", DbType.Int32, dojoRank.item.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoRank dojoRank)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoRank.iD);
				if(cachedObject != null)
				{
					((DojoRank)cachedObject).CopyTo(dojoRank, true);
					return dojoRank.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_Ranks WHERE DojoRankID=");
			query.Append(dojoRank.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoRankID '{0}'.", 
					dojoRank.iD)));
			}

			FillFromReader(dojoRank, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoRank in cache.
			if(cacheEnabled) cacheStore(dojoRank);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoRankCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoRankCollection GetCollection(string whereClause, string sortClause, params DojoRankFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoRankCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoRankFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoRankCollection dojoRankCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoRank.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int promotionRankOffset = -1;
			int promotionRankPromotionRankOffset = -1;
			int promotionRankItemOffset = -1;
			int itemOffset = -1;
			int itemParentItemOffset = -1;
			int itemPurchaseVendorOffset = -1;
			int itemPurchaseAccountOffset = -1;
			int itemInventoryAccountOffset = -1;
			int itemTaxOffset = -1;
			int itemSalesIncomeAccountOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoRankFlags.PromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							promotionRankOffset = innerJoinOffset;
							innerJoinOffset = promotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoRankFlags.PromotionRankPromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PromotionRank_PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							promotionRankPromotionRankOffset = innerJoinOffset;
							innerJoinOffset = promotionRankPromotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoRankFlags.PromotionRankItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PromotionRank_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							promotionRankItemOffset = innerJoinOffset;
							innerJoinOffset = promotionRankItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoRankFlags.Item:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemOffset = innerJoinOffset;
							innerJoinOffset = itemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoRankFlags.ItemParentItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_ParentItem.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemParentItemOffset = innerJoinOffset;
							innerJoinOffset = itemParentItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoRankFlags.ItemPurchaseVendor:
							for(int i = 0; i <= RHVendorManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_PurchaseVendor.");
								query.Append(RHVendorManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemPurchaseVendorOffset = innerJoinOffset;
							innerJoinOffset = itemPurchaseVendorOffset + RHVendorManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoRankFlags.ItemPurchaseAccount:
							for(int i = 0; i <= RHAccountManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_PurchaseAccount.");
								query.Append(RHAccountManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemPurchaseAccountOffset = innerJoinOffset;
							innerJoinOffset = itemPurchaseAccountOffset + RHAccountManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoRankFlags.ItemInventoryAccount:
							for(int i = 0; i <= RHAccountManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_InventoryAccount.");
								query.Append(RHAccountManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemInventoryAccountOffset = innerJoinOffset;
							innerJoinOffset = itemInventoryAccountOffset + RHAccountManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoRankFlags.ItemTax:
							for(int i = 0; i <= RHTaxTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_Tax.");
								query.Append(RHTaxTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemTaxOffset = innerJoinOffset;
							innerJoinOffset = itemTaxOffset + RHTaxTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoRankFlags.ItemSalesIncomeAccount:
							for(int i = 0; i <= RHAccountManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_SalesIncomeAccount.");
								query.Append(RHAccountManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemSalesIncomeAccountOffset = innerJoinOffset;
							innerJoinOffset = itemSalesIncomeAccountOffset + RHAccountManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_Ranks AS DojoRank");
			}
			else
			{
				query.Append(" FROM kitTessen_Ranks AS DojoRank");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoRankFlags.PromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS PromotionRank ON DojoRank.PromotionRankID = PromotionRank.DojoRankID)");
							break;
						case DojoRankFlags.PromotionRankPromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS PromotionRank_PromotionRank ON PromotionRank.PromotionRankID = PromotionRank_PromotionRank.DojoRankID)");
							break;
						case DojoRankFlags.PromotionRankItem:
							query.Append(" LEFT JOIN RH_Items AS PromotionRank_Item ON PromotionRank.ItemID = PromotionRank_Item.RHItemID)");
							break;
						case DojoRankFlags.Item:
							query.Append(" LEFT JOIN RH_Items AS Item ON DojoRank.ItemID = Item.RHItemID)");
							break;
						case DojoRankFlags.ItemParentItem:
							query.Append(" LEFT JOIN RH_Items AS Item_ParentItem ON Item.ParentItemID = Item_ParentItem.RHItemID)");
							break;
						case DojoRankFlags.ItemPurchaseVendor:
							query.Append(" LEFT JOIN RH_Vendors AS Item_PurchaseVendor ON Item.PurchaseVendorID = Item_PurchaseVendor.RHVendorID)");
							break;
						case DojoRankFlags.ItemPurchaseAccount:
							query.Append(" LEFT JOIN RH_Accounts AS Item_PurchaseAccount ON Item.PurchaseAccountID = Item_PurchaseAccount.RHAccountID)");
							break;
						case DojoRankFlags.ItemInventoryAccount:
							query.Append(" LEFT JOIN RH_Accounts AS Item_InventoryAccount ON Item.InventoryAccountID = Item_InventoryAccount.RHAccountID)");
							break;
						case DojoRankFlags.ItemTax:
							query.Append(" LEFT JOIN RH_TaxTypes AS Item_Tax ON Item.TaxID = Item_Tax.RHTaxTypeID)");
							break;
						case DojoRankFlags.ItemSalesIncomeAccount:
							query.Append(" LEFT JOIN RH_Accounts AS Item_SalesIncomeAccount ON Item.SalesIncomeAccountID = Item_SalesIncomeAccount.RHAccountID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoRankCollection = new DojoRankCollection();

			while(r.Read())
			{
				DojoRank dojoRank = ParseFromReader(r, 0, 1);

				// Fill PromotionRank
				if(promotionRankOffset != -1 && !r.IsDBNull(promotionRankOffset))
				{
					DojoRankManager.FillFromReader(dojoRank.promotionRank, r, promotionRankOffset, promotionRankOffset+1);

					// Fill 
					if(promotionRankPromotionRankOffset != -1 && !r.IsDBNull(promotionRankPromotionRankOffset))
						DojoRankManager.FillFromReader(dojoRank.promotionRank.PromotionRank, r, promotionRankPromotionRankOffset, promotionRankPromotionRankOffset+1);

					// Fill 
					if(promotionRankItemOffset != -1 && !r.IsDBNull(promotionRankItemOffset))
						RHItemManager.FillFromReader(dojoRank.promotionRank.Item, r, promotionRankItemOffset, promotionRankItemOffset+1);

				}

				// Fill Item
				if(itemOffset != -1 && !r.IsDBNull(itemOffset))
				{
					RHItemManager.FillFromReader(dojoRank.item, r, itemOffset, itemOffset+1);

					// Fill 
					if(itemParentItemOffset != -1 && !r.IsDBNull(itemParentItemOffset))
						RHItemManager.FillFromReader(dojoRank.item.ParentItem, r, itemParentItemOffset, itemParentItemOffset+1);

					// Fill Vendor
					if(itemPurchaseVendorOffset != -1 && !r.IsDBNull(itemPurchaseVendorOffset))
						RHVendorManager.FillFromReader(dojoRank.item.PurchaseVendor, r, itemPurchaseVendorOffset, itemPurchaseVendorOffset+1);

					// Fill Purchase Account
					if(itemPurchaseAccountOffset != -1 && !r.IsDBNull(itemPurchaseAccountOffset))
						RHAccountManager.FillFromReader(dojoRank.item.PurchaseAccount, r, itemPurchaseAccountOffset, itemPurchaseAccountOffset+1);

					// Fill Asset Account
					if(itemInventoryAccountOffset != -1 && !r.IsDBNull(itemInventoryAccountOffset))
						RHAccountManager.FillFromReader(dojoRank.item.InventoryAccount, r, itemInventoryAccountOffset, itemInventoryAccountOffset+1);

					// Fill 
					if(itemTaxOffset != -1 && !r.IsDBNull(itemTaxOffset))
						RHTaxTypeManager.FillFromReader(dojoRank.item.Tax, r, itemTaxOffset, itemTaxOffset+1);

					// Fill 
					if(itemSalesIncomeAccountOffset != -1 && !r.IsDBNull(itemSalesIncomeAccountOffset))
						RHAccountManager.FillFromReader(dojoRank.item.SalesIncomeAccount, r, itemSalesIncomeAccountOffset, itemSalesIncomeAccountOffset+1);

				}

				dojoRankCollection.Add(dojoRank);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoRankCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoRank ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoRank dojoRank = new DojoRank();
			FillFromReader(dojoRank, r, idOffset, dataOffset);
			return dojoRank;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoRank dojoRank, IDataReader r, int idOffset, int dataOffset)
		{
			dojoRank.iD = r.GetInt32(idOffset);
			dojoRank.isSynced = true;
			dojoRank.isPlaceHolder = false;

			dojoRank.name = r.GetString(0+dataOffset);
			dojoRank.promotionTimeInRank = TimeSpan.FromTicks((long) r.GetDouble(1+dataOffset));
			dojoRank.promotionTimeFromLastTest = TimeSpan.FromTicks((long) r.GetDouble(2+dataOffset));
			if(!r.IsDBNull(3+dataOffset)) 
				dojoRank.promotionRequirements = r.GetString(3+dataOffset);
			else
				dojoRank.promotionRequirements = null;
			if(!r.IsDBNull(4+dataOffset)) 
				dojoRank.promotionFee = r.GetDecimal(4+dataOffset);
			if(!r.IsDBNull(5+dataOffset) && r.GetInt32(5+dataOffset) > 0)
			{
				dojoRank.promotionRank = DojoRank.NewPlaceHolder(r.GetInt32(5+dataOffset));
			}
			dojoRank.promotionResetIP = r.GetBoolean(6+dataOffset);
			dojoRank.orderNum = r.GetInt32(7+dataOffset);
			dojoRank.description = r.GetString(8+dataOffset);
			if(!r.IsDBNull(9+dataOffset) && r.GetInt32(9+dataOffset) > 0)
			{
				dojoRank.item = RHItem.NewPlaceHolder(r.GetInt32(9+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_Ranks WHERE DojoRankID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_Ranks ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_Ranks_PromotionRank FOREIGN KEY (PromotionRankID) REFERENCES kitTessen_Ranks (DojoRankID),");
			query.Append(" CONSTRAINT FK_kitTessen_Ranks_Item FOREIGN KEY (ItemID) REFERENCES RH_Items (RHItemID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_Ranks ");
				query.Append(" (DojoRankID COUNTER(1,1) CONSTRAINT PK_kitTessen_Ranks PRIMARY KEY, " +
					"Name TEXT(75)," +
					"PromotionTimeInRank DOUBLE," +
					"PromotionTimeFromLastTest DOUBLE," +
					"PromotionRequirements MEMO," +
					"PromotionFee CURRENCY," +
					"PromotionRankID LONG," +
					"PromotionResetIP BIT," +
					"OrderNum LONG," +
					"Description TEXT(255)," +
					"ItemID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_Ranks ");
				query.Append(" (DojoRankID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_Ranks PRIMARY KEY, " +
					"Name NVARCHAR(75)," +
					"PromotionTimeInRank FLOAT," +
					"PromotionTimeFromLastTest FLOAT," +
					"PromotionRequirements NTEXT," +
					"PromotionFee MONEY," +
					"PromotionRankID INT," +
					"PromotionResetIP BIT," +
					"OrderNum INT," +
					"Description NVARCHAR(255)," +
					"ItemID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoRank dojoRank)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_Ranks_" + dojoRank.iD.ToString(), dojoRank);
		}

		private static DojoRank cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_Ranks_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoRank)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_Ranks_" + id.ToString());
		}

		#endregion

		//--- Begin Custom Code ---

		//--- End Custom Code ---
	}
}

