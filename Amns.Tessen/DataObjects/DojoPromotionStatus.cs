/* ********************************************************** *
 * AMNS NitroCast v1.0 Class Object Business Tier               *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;

namespace Amns.Tessen
{
	/// <summary>
	/// Promotion Status
	/// </summary>
	public class DojoPromotionStatus : ICloneable, IComparable
	{
		#region Private Fields

		internal int iD = 0;
		internal bool isPlaceHolder;		// Placeholders only store an ID; marked as unsynced.
		internal bool isSynced;				// Shows that data is synced with database.
		internal string name;
		internal int orderNum;
		internal bool isEligible;
		internal bool isPassed;
		internal bool isFailed;
		internal bool isFiled;
		internal bool isApproved;
		internal bool isAwarded;

		#endregion

		#region Public Properties

		/// <summary>
		/// DojoPromotionStatus Record ID, assigned by database. Readonly.
		/// </summary>
		public int ID
		{
			get
			{
				return iD;
			}
		}

		/// <summary>
		/// Identifies the DojoPromotionStatus as a Placeholder. Placeholders only contain 
		/// a DojoPromotionStatus ID. Record late-binds data when it is accessed.
		/// </summary>
		public bool IsPlaceHolder
		{
			get
			{
				return isPlaceHolder;
			}
		}

		/// <summary>
		/// True if the object is synced with the database.
		/// </summary>
		public bool IsSynced
		{
			get
			{
				return isSynced;
			}
			set
			{
				if(value == true)
				{
					throw (new Exception("Cannot set IsSynced to true."));
				}
				isSynced = value;
			}
		}

		/// <summary>
		/// </summary>
		public string Name
		{
			get
			{
				EnsurePreLoad();
				return name;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= name == value;
				name = value;
			}
		}

		/// <summary>
		/// </summary>
		public int OrderNum
		{
			get
			{
				EnsurePreLoad();
				return orderNum;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= orderNum == value;
				orderNum = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool IsEligible
		{
			get
			{
				EnsurePreLoad();
				return isEligible;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isEligible == value;
				isEligible = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool IsPassed
		{
			get
			{
				EnsurePreLoad();
				return isPassed;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isPassed == value;
				isPassed = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool IsFailed
		{
			get
			{
				EnsurePreLoad();
				return isFailed;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isFailed == value;
				isFailed = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool IsFiled
		{
			get
			{
				EnsurePreLoad();
				return isFiled;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isFiled == value;
				isFiled = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool IsApproved
		{
			get
			{
				EnsurePreLoad();
				return isApproved;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isApproved == value;
				isApproved = value;
			}
		}

		/// <summary>
		/// </summary>
		public bool IsAwarded
		{
			get
			{
				EnsurePreLoad();
				return isAwarded;
			}
			set
			{
				EnsurePreLoad();
				isSynced &= isAwarded == value;
				isAwarded = value;
			}
		}

		#endregion

		#region Constructors

		/// <summary>
		/// Instantiates a new instance of DojoPromotionStatus.
		/// </summary>
		public DojoPromotionStatus()
		{
		}

		public DojoPromotionStatus(int id)
		{
			this.iD = id;
			isSynced = DojoPromotionStatusManager._fill(this);
		}
		#endregion

		#region Default NitroCast Methods

		/// <summary>
		/// Ensures that the object's fields and children are 
		/// pre-loaded before any updates or reads.
		/// </summary>
		public void EnsurePreLoad()
		{
			if(!isPlaceHolder)
				return;

			DojoPromotionStatusManager._fill(this);
			isPlaceHolder = false;
		}

		/// <summary>
		/// Saves the DojoPromotionStatus object state to the database.
		/// </summary>
		public int Save()
		{
			if(isSynced)
				return iD;

			if(iD == -1) throw (new Exception("Invalid record; cannot be saved."));
			if(iD == 0)
				iD = DojoPromotionStatusManager._insert(this);
			else
				DojoPromotionStatusManager._update(this);
			isSynced = iD != -1;
			return iD;
		}

		public void Delete()
		{
			DojoPromotionStatusManager._delete(this.iD);
			this.iD = 0;
			isSynced = false;
		}
		/// <summary>
		/// Duplicates DojoPromotionStatus object into a database; may or may not be the same database
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoPromotionStatus object reflecting the replicated DojoPromotionStatus object.</returns>
		public DojoPromotionStatus Duplicate()
		{
			DojoPromotionStatus clonedDojoPromotionStatus = this.Clone();

			// Insert must be called after children are replicated!
			clonedDojoPromotionStatus.iD = DojoPromotionStatusManager._insert(clonedDojoPromotionStatus);
			clonedDojoPromotionStatus.isSynced = true;
			return clonedDojoPromotionStatus;
		}

		/// <summary>
		/// Overwrites and existing DojoPromotionStatus object in the database.
		/// </summary>
		public void Overwrite(int id)
		{
			iD = id;
			DojoPromotionStatusManager._update(this);
			isSynced = true;
		}

		/// <summary>
		/// Clones DojoPromotionStatus object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoPromotionStatus object reflecting the replicated DojoPromotionStatus object.</returns>
		object ICloneable.Clone()
		{
			return Clone();
		}

		/// <summary>
		/// Clones DojoPromotionStatus object and clones child objects with cloning or replication.
		/// as the parent object.
		/// </summary>
		/// <returns> A new DojoPromotionStatus object reflecting the replicated DojoPromotionStatus object.</returns>
		public DojoPromotionStatus Clone()
		{
			DojoPromotionStatus clonedDojoPromotionStatus = new DojoPromotionStatus();
			clonedDojoPromotionStatus.iD = iD;
			clonedDojoPromotionStatus.isSynced = isSynced;
			clonedDojoPromotionStatus.name = name;
			clonedDojoPromotionStatus.orderNum = orderNum;
			clonedDojoPromotionStatus.isEligible = isEligible;
			clonedDojoPromotionStatus.isPassed = isPassed;
			clonedDojoPromotionStatus.isFailed = isFailed;
			clonedDojoPromotionStatus.isFiled = isFiled;
			clonedDojoPromotionStatus.isApproved = isApproved;
			clonedDojoPromotionStatus.isAwarded = isAwarded;


			return clonedDojoPromotionStatus;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoPromotionStatus.
		/// </summary>
		/// <returns> A new DojoPromotionStatus object reflecting the cloned DojoPromotionStatus object.</returns>
		public DojoPromotionStatus Copy()
		{
			DojoPromotionStatus dojoPromotionStatus = new DojoPromotionStatus();
			CopyTo(dojoPromotionStatus);
			return dojoPromotionStatus;
		}

		/// <summary>
		/// Makes a deep copy of the current DojoPromotionStatus.
		/// </summary>
		/// <returns> A new DojoPromotionStatus object reflecting the cloned DojoPromotionStatus object.</returns>
		/// <param name="isolation">Placeholders are used to isolate the DojoPromotionStatus from its children.</param>
		public DojoPromotionStatus Copy(bool isolation)
		{
			DojoPromotionStatus dojoPromotionStatus = new DojoPromotionStatus();
			CopyTo(dojoPromotionStatus, isolation);
			return dojoPromotionStatus;
		}

		/// <summary>
		/// Deep copies the current DojoPromotionStatus to another instance of DojoPromotionStatus.
		/// This method does not provide isolated copies; use overriden method for this feature.
		/// </summary>
		/// <param name="DojoPromotionStatus">The DojoPromotionStatus to copy to.</param>
		public void CopyTo(DojoPromotionStatus dojoPromotionStatus)
		{
			CopyTo(dojoPromotionStatus, false);
		}

		/// <summary>
		/// Deep copies the current DojoPromotionStatus to another instance of DojoPromotionStatus.
		/// </summary>
		/// <param name="DojoPromotionStatus">The DojoPromotionStatus to copy to.</param>
		/// <param name="isolation">Placeholders are used to isolate the DojoPromotionStatus from its children.</param>
		public void CopyTo(DojoPromotionStatus dojoPromotionStatus, bool isolation)
		{
			dojoPromotionStatus.iD = iD;
			dojoPromotionStatus.isPlaceHolder = isPlaceHolder;
			dojoPromotionStatus.isSynced = isSynced;
			dojoPromotionStatus.name = name;
			dojoPromotionStatus.orderNum = orderNum;
			dojoPromotionStatus.isEligible = isEligible;
			dojoPromotionStatus.isPassed = isPassed;
			dojoPromotionStatus.isFailed = isFailed;
			dojoPromotionStatus.isFiled = isFiled;
			dojoPromotionStatus.isApproved = isApproved;
			dojoPromotionStatus.isAwarded = isAwarded;
		}

		public DojoPromotionStatus NewPlaceHolder()
		{
			DojoPromotionStatus dojoPromotionStatus = new DojoPromotionStatus();
			dojoPromotionStatus.iD = iD;
			dojoPromotionStatus.isPlaceHolder = true;
			dojoPromotionStatus.isSynced = true;
			return dojoPromotionStatus;
		}

		public static DojoPromotionStatus NewPlaceHolder(int iD)
		{
			DojoPromotionStatus dojoPromotionStatus = new DojoPromotionStatus();
			dojoPromotionStatus.iD = iD;
			dojoPromotionStatus.isPlaceHolder = true;
			dojoPromotionStatus.isSynced = true;
			return dojoPromotionStatus;
		}

		#endregion

		#region IComparable Methods

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		int IComparable.CompareTo(object obj)
		{
			DojoPromotionStatus dojoPromotionStatus = (DojoPromotionStatus) obj;
			return this.iD - dojoPromotionStatus.iD;
		}

		/// <summary>
		/// Compares the object's ID to another object's ID.
		/// </summary>
		public int CompareTo(DojoPromotionStatus dojoPromotionStatus)
		{
			return this.iD - dojoPromotionStatus.iD;
		}

		public override int GetHashCode()
		{
			return iD.GetHashCode();
		}

		#endregion

		public override string ToString()
		{
			return Name;
		}
	}
}
