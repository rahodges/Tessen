/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.People;
using Amns.GreyFox.Security;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoPromotionFlags : int { Member,
				MemberPrivateContact,
				MemberEmergencyContact,
				MemberPublicContact,
				MemberParent,
				MemberRoot,
				MemberMemberType,
				MemberMemberTypeTemplate,
				MemberMembership1,
				MemberMembership2,
				MemberMembership3,
				MemberMembership4,
				MemberMembership5,
				MemberInstructor1,
				MemberInstructor2,
				MemberInstructor3,
				MemberPromotionFlags,
				MemberRank,
				MemberUserAccount,
				MemberCustomer,
				Test,
				TestLocation,
				TestListMemberType1,
				TestListMemberType2,
				TestListMemberType3,
				TestPanelChief,
				TestPanelMembers,
				TestStatus,
				TestActiveTestList,
				TestItem,
				PromotionRank,
				PromotionRankPromotionRank,
				PromotionRankItem,
				LastRank,
				LastRankPromotionRank,
				LastRankItem,
				Status};

	#endregion

	/// <summary>
	/// Datamanager for DojoPromotion objects.
	/// </summary>
	public class DojoPromotionManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_Promotions";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoPromotionID",
			"MemberID",
			"TestID",
			"PromotionDate",
			"PromotionRankID",
			"LastRankID",
			"StatusID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoPromotionID", "LONG", "-1" },
			{ "MemberID", "LONG", "null" },
			{ "TestID", "LONG", "null" },
			{ "PromotionDate", "DATETIME", "" },
			{ "PromotionRankID", "LONG", "null" },
			{ "LastRankID", "LONG", "null" },
			{ "StatusID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoPromotionManager()
		{
		}

		public DojoPromotionManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoPromotionManager.isInitialized)
			{
				DojoPromotionManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoPromotion into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoPromotion">The DojoPromotion to insert into the database.</param>
		internal static int _insert(DojoPromotion dojoPromotion)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_Promotions " +
				"(" +
				"MemberID," +
				"TestID," +
				"PromotionDate," +
				"PromotionRankID," +
				"LastRankID," +
				"StatusID) VALUES (" +
				"@MemberID," +
				"@TestID," +
				"@PromotionDate," +
				"@PromotionRankID," +
				"@LastRankID," +
				"@StatusID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoPromotion);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoPromotion);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoPromotion in cache.
			if(cacheEnabled) cacheStore(dojoPromotion);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoPromotion dojoPromotion)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_Promotions SET MemberID=@MemberID," +
				"TestID=@TestID," +
				"PromotionDate=@PromotionDate," +
				"PromotionRankID=@PromotionRankID," +
				"LastRankID=@LastRankID," +
				"StatusID=@StatusID WHERE DojoPromotionID=@DojoPromotionID;");

			fillParameters(database, dbCommand, dojoPromotion);
			database.AddInParameter(dbCommand, "DojoPromotionID", DbType.Int32, dojoPromotion.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoPromotion in cache.
			if (cacheEnabled) cacheStore(dojoPromotion);

			return dojoPromotion.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoPromotion dojoPromotion)
		{
			#region Default

			if(dojoPromotion.member == null)
			{
				addParameter(database, dbCommand, "@MemberID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@MemberID", DbType.Int32, dojoPromotion.member.ID);
			}
			if(dojoPromotion.test == null)
			{
				addParameter(database, dbCommand, "@TestID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@TestID", DbType.Int32, dojoPromotion.test.ID);
			}
			addParameter(database, dbCommand, "@PromotionDate", DbType.Date, dojoPromotion.promotionDate);
			if(dojoPromotion.promotionRank == null)
			{
				addParameter(database, dbCommand, "@PromotionRankID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@PromotionRankID", DbType.Int32, dojoPromotion.promotionRank.ID);
			}
			if(dojoPromotion.lastRank == null)
			{
				addParameter(database, dbCommand, "@LastRankID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@LastRankID", DbType.Int32, dojoPromotion.lastRank.ID);
			}
			if(dojoPromotion.status == null)
			{
				addParameter(database, dbCommand, "@StatusID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@StatusID", DbType.Int32, dojoPromotion.status.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoPromotion dojoPromotion)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoPromotion.iD);
				if(cachedObject != null)
				{
					((DojoPromotion)cachedObject).CopyTo(dojoPromotion, true);
					return dojoPromotion.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_Promotions WHERE DojoPromotionID=");
			query.Append(dojoPromotion.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoPromotionID '{0}'.", 
					dojoPromotion.iD)));
			}

			FillFromReader(dojoPromotion, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoPromotion in cache.
			if(cacheEnabled) cacheStore(dojoPromotion);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoPromotionCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoPromotionCollection GetCollection(string whereClause, string sortClause, params DojoPromotionFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoPromotionCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoPromotionFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoPromotionCollection dojoPromotionCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoPromotion.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int memberOffset = -1;
			int memberPrivateContactOffset = -1;
			int memberEmergencyContactOffset = -1;
			int memberPublicContactOffset = -1;
			int memberParentOffset = -1;
			int memberRootOffset = -1;
			int memberMemberTypeOffset = -1;
			int memberMemberTypeTemplateOffset = -1;
			int memberMembership1Offset = -1;
			int memberMembership2Offset = -1;
			int memberMembership3Offset = -1;
			int memberMembership4Offset = -1;
			int memberMembership5Offset = -1;
			int memberInstructor1Offset = -1;
			int memberInstructor2Offset = -1;
			int memberInstructor3Offset = -1;
			int memberRankOffset = -1;
			int memberUserAccountOffset = -1;
			int memberCustomerOffset = -1;
			int testOffset = -1;
			int testLocationOffset = -1;
			int testListMemberType1Offset = -1;
			int testListMemberType2Offset = -1;
			int testListMemberType3Offset = -1;
			int testPanelChiefOffset = -1;
			int testStatusOffset = -1;
			int testActiveTestListOffset = -1;
			int testItemOffset = -1;
			int promotionRankOffset = -1;
			int promotionRankPromotionRankOffset = -1;
			int promotionRankItemOffset = -1;
			int lastRankOffset = -1;
			int lastRankPromotionRankOffset = -1;
			int lastRankItemOffset = -1;
			int statusOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoPromotionFlags.Member:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberOffset = innerJoinOffset;
							innerJoinOffset = memberOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberPrivateContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_PrivateContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberPrivateContactOffset = innerJoinOffset;
							innerJoinOffset = memberPrivateContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberEmergencyContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_EmergencyContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberEmergencyContactOffset = innerJoinOffset;
							innerJoinOffset = memberEmergencyContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberPublicContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_PublicContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberPublicContactOffset = innerJoinOffset;
							innerJoinOffset = memberPublicContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberParent:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Parent.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberParentOffset = innerJoinOffset;
							innerJoinOffset = memberParentOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberRoot:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Root.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberRootOffset = innerJoinOffset;
							innerJoinOffset = memberRootOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_MemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = memberMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberMemberTypeTemplate:
							for(int i = 0; i <= DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_MemberTypeTemplate.");
								query.Append(DojoMemberTypeTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMemberTypeTemplateOffset = innerJoinOffset;
							innerJoinOffset = memberMemberTypeTemplateOffset + DojoMemberTypeTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberMembership1:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership1.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership1Offset = innerJoinOffset;
							innerJoinOffset = memberMembership1Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberMembership2:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership2.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership2Offset = innerJoinOffset;
							innerJoinOffset = memberMembership2Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberMembership3:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership3.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership3Offset = innerJoinOffset;
							innerJoinOffset = memberMembership3Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberMembership4:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership4.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership4Offset = innerJoinOffset;
							innerJoinOffset = memberMembership4Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberMembership5:
							for(int i = 0; i <= DojoMembershipManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Membership5.");
								query.Append(DojoMembershipManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberMembership5Offset = innerJoinOffset;
							innerJoinOffset = memberMembership5Offset + DojoMembershipManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberInstructor1:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor1.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor1Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor1Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberInstructor2:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor2.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor2Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor2Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberInstructor3:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Instructor3.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberInstructor3Offset = innerJoinOffset;
							innerJoinOffset = memberInstructor3Offset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Rank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberRankOffset = innerJoinOffset;
							innerJoinOffset = memberRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberUserAccount:
							for(int i = 0; i <= GreyFoxUserManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_UserAccount.");
								query.Append(GreyFoxUserManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberUserAccountOffset = innerJoinOffset;
							innerJoinOffset = memberUserAccountOffset + GreyFoxUserManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.MemberCustomer:
							for(int i = 0; i <= RHCustomerManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Member_Customer.");
								query.Append(RHCustomerManager.InnerJoinFields[i]);
								query.Append(",");
							}
							memberCustomerOffset = innerJoinOffset;
							innerJoinOffset = memberCustomerOffset + RHCustomerManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.Test:
							for(int i = 0; i <= DojoTestManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test.");
								query.Append(DojoTestManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testOffset = innerJoinOffset;
							innerJoinOffset = testOffset + DojoTestManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.TestLocation:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_Location.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testLocationOffset = innerJoinOffset;
							innerJoinOffset = testLocationOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.TestListMemberType1:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_ListMemberType1.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testListMemberType1Offset = innerJoinOffset;
							innerJoinOffset = testListMemberType1Offset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.TestListMemberType2:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_ListMemberType2.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testListMemberType2Offset = innerJoinOffset;
							innerJoinOffset = testListMemberType2Offset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.TestListMemberType3:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_ListMemberType3.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testListMemberType3Offset = innerJoinOffset;
							innerJoinOffset = testListMemberType3Offset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.TestPanelChief:
							for(int i = 0; i <= DojoMemberManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_PanelChief.");
								query.Append(DojoMemberManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testPanelChiefOffset = innerJoinOffset;
							innerJoinOffset = testPanelChiefOffset + DojoMemberManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.TestStatus:
							for(int i = 0; i <= DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_Status.");
								query.Append(DojoTestListStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testStatusOffset = innerJoinOffset;
							innerJoinOffset = testStatusOffset + DojoTestListStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.TestActiveTestList:
							for(int i = 0; i <= DojoTestListManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_ActiveTestList.");
								query.Append(DojoTestListManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testActiveTestListOffset = innerJoinOffset;
							innerJoinOffset = testActiveTestListOffset + DojoTestListManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.TestItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Test_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							testItemOffset = innerJoinOffset;
							innerJoinOffset = testItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.PromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							promotionRankOffset = innerJoinOffset;
							innerJoinOffset = promotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.PromotionRankPromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PromotionRank_PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							promotionRankPromotionRankOffset = innerJoinOffset;
							innerJoinOffset = promotionRankPromotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.PromotionRankItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("PromotionRank_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							promotionRankItemOffset = innerJoinOffset;
							innerJoinOffset = promotionRankItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.LastRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("LastRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							lastRankOffset = innerJoinOffset;
							innerJoinOffset = lastRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.LastRankPromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("LastRank_PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							lastRankPromotionRankOffset = innerJoinOffset;
							innerJoinOffset = lastRankPromotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.LastRankItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("LastRank_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							lastRankItemOffset = innerJoinOffset;
							innerJoinOffset = lastRankItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoPromotionFlags.Status:
							for(int i = 0; i <= DojoPromotionStatusManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Status.");
								query.Append(DojoPromotionStatusManager.InnerJoinFields[i]);
								query.Append(",");
							}
							statusOffset = innerJoinOffset;
							innerJoinOffset = statusOffset + DojoPromotionStatusManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_Promotions AS DojoPromotion");
			}
			else
			{
				query.Append(" FROM kitTessen_Promotions AS DojoPromotion");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoPromotionFlags.Member:
							query.Append(" LEFT JOIN kitTessen_Members AS Member ON DojoPromotion.MemberID = Member.DojoMemberID)");
							break;
						case DojoPromotionFlags.MemberPrivateContact:
							query.Append(" LEFT JOIN kitTessen_Members_PrivateContacts AS Member_PrivateContact ON Member.PrivateContactID = Member_PrivateContact.GreyFoxContactID)");
							break;
						case DojoPromotionFlags.MemberEmergencyContact:
							query.Append(" LEFT JOIN kitTessen_Members_EmergencyContacts AS Member_EmergencyContact ON Member.EmergencyContactID = Member_EmergencyContact.GreyFoxContactID)");
							break;
						case DojoPromotionFlags.MemberPublicContact:
							query.Append(" LEFT JOIN kitTessen_Members_PublicContacts AS Member_PublicContact ON Member.PublicContactID = Member_PublicContact.GreyFoxContactID)");
							break;
						case DojoPromotionFlags.MemberParent:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Parent ON Member.ParentID = Member_Parent.DojoMemberID)");
							break;
						case DojoPromotionFlags.MemberRoot:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Root ON Member.RootID = Member_Root.DojoMemberID)");
							break;
						case DojoPromotionFlags.MemberMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Member_MemberType ON Member.MemberTypeID = Member_MemberType.DojoMemberTypeID)");
							break;
						case DojoPromotionFlags.MemberMemberTypeTemplate:
							query.Append(" LEFT JOIN kitTessen_MemberTypeTemplates AS Member_MemberTypeTemplate ON Member.MemberTypeTemplateID = Member_MemberTypeTemplate.DojoMemberTypeTemplateID)");
							break;
						case DojoPromotionFlags.MemberMembership1:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership1 ON Member.Membership1ID = Member_Membership1.DojoMembershipID)");
							break;
						case DojoPromotionFlags.MemberMembership2:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership2 ON Member.Membership2ID = Member_Membership2.DojoMembershipID)");
							break;
						case DojoPromotionFlags.MemberMembership3:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership3 ON Member.Membership3ID = Member_Membership3.DojoMembershipID)");
							break;
						case DojoPromotionFlags.MemberMembership4:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership4 ON Member.Membership4ID = Member_Membership4.DojoMembershipID)");
							break;
						case DojoPromotionFlags.MemberMembership5:
							query.Append(" LEFT JOIN kitTessen_Memberships AS Member_Membership5 ON Member.Membership5ID = Member_Membership5.DojoMembershipID)");
							break;
						case DojoPromotionFlags.MemberInstructor1:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor1 ON Member.Instructor1ID = Member_Instructor1.DojoMemberID)");
							break;
						case DojoPromotionFlags.MemberInstructor2:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor2 ON Member.Instructor2ID = Member_Instructor2.DojoMemberID)");
							break;
						case DojoPromotionFlags.MemberInstructor3:
							query.Append(" LEFT JOIN kitTessen_Members AS Member_Instructor3 ON Member.Instructor3ID = Member_Instructor3.DojoMemberID)");
							break;
						case DojoPromotionFlags.MemberRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS Member_Rank ON Member.RankID = Member_Rank.DojoRankID)");
							break;
						case DojoPromotionFlags.MemberUserAccount:
							query.Append(" LEFT JOIN sysGlobal_Users AS Member_UserAccount ON Member.UserAccountID = Member_UserAccount.GreyFoxUserID)");
							break;
						case DojoPromotionFlags.MemberCustomer:
							query.Append(" LEFT JOIN RH_Customers AS Member_Customer ON Member.CustomerID = Member_Customer.RHCustomerID)");
							break;
						case DojoPromotionFlags.Test:
							query.Append(" LEFT JOIN kitTessen_Tests AS Test ON DojoPromotion.TestID = Test.DojoTestID)");
							break;
						case DojoPromotionFlags.TestLocation:
							query.Append(" LEFT JOIN kitTessen_Locations AS Test_Location ON Test.LocationID = Test_Location.GreyFoxContactID)");
							break;
						case DojoPromotionFlags.TestListMemberType1:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Test_ListMemberType1 ON Test.ListMemberType1ID = Test_ListMemberType1.DojoMemberTypeID)");
							break;
						case DojoPromotionFlags.TestListMemberType2:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Test_ListMemberType2 ON Test.ListMemberType2ID = Test_ListMemberType2.DojoMemberTypeID)");
							break;
						case DojoPromotionFlags.TestListMemberType3:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Test_ListMemberType3 ON Test.ListMemberType3ID = Test_ListMemberType3.DojoMemberTypeID)");
							break;
						case DojoPromotionFlags.TestPanelChief:
							query.Append(" LEFT JOIN kitTessen_Members AS Test_PanelChief ON Test.PanelChiefID = Test_PanelChief.DojoMemberID)");
							break;
						case DojoPromotionFlags.TestStatus:
							query.Append(" LEFT JOIN kitTessen_DojoTestListStatuses AS Test_Status ON Test.StatusID = Test_Status.DojoTestListStatusID)");
							break;
						case DojoPromotionFlags.TestActiveTestList:
							query.Append(" LEFT JOIN kitTessen_TestLists AS Test_ActiveTestList ON Test.ActiveTestListID = Test_ActiveTestList.DojoTestListID)");
							break;
						case DojoPromotionFlags.TestItem:
							query.Append(" LEFT JOIN RH_Items AS Test_Item ON Test.ItemID = Test_Item.RHItemID)");
							break;
						case DojoPromotionFlags.PromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS PromotionRank ON DojoPromotion.PromotionRankID = PromotionRank.DojoRankID)");
							break;
						case DojoPromotionFlags.PromotionRankPromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS PromotionRank_PromotionRank ON PromotionRank.PromotionRankID = PromotionRank_PromotionRank.DojoRankID)");
							break;
						case DojoPromotionFlags.PromotionRankItem:
							query.Append(" LEFT JOIN RH_Items AS PromotionRank_Item ON PromotionRank.ItemID = PromotionRank_Item.RHItemID)");
							break;
						case DojoPromotionFlags.LastRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS LastRank ON DojoPromotion.LastRankID = LastRank.DojoRankID)");
							break;
						case DojoPromotionFlags.LastRankPromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS LastRank_PromotionRank ON LastRank.PromotionRankID = LastRank_PromotionRank.DojoRankID)");
							break;
						case DojoPromotionFlags.LastRankItem:
							query.Append(" LEFT JOIN RH_Items AS LastRank_Item ON LastRank.ItemID = LastRank_Item.RHItemID)");
							break;
						case DojoPromotionFlags.Status:
							query.Append(" LEFT JOIN kitTessen_PromotionStatuses AS Status ON DojoPromotion.StatusID = Status.DojoPromotionStatusID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoPromotionCollection = new DojoPromotionCollection();

			while(r.Read())
			{
				DojoPromotion dojoPromotion = ParseFromReader(r, 0, 1);

				// Fill Member
				if(memberOffset != -1 && !r.IsDBNull(memberOffset))
				{
					DojoMemberManager.FillFromReader(dojoPromotion.member, r, memberOffset, memberOffset+1);

					// Fill 
					if(memberPrivateContactOffset != -1 && !r.IsDBNull(memberPrivateContactOffset))
						GreyFoxContactManager.FillFromReader(dojoPromotion.member.PrivateContact, "kitTessen_Members_PrivateContacts", r, memberPrivateContactOffset, memberPrivateContactOffset+1);

					// Fill 
					if(memberEmergencyContactOffset != -1 && !r.IsDBNull(memberEmergencyContactOffset))
						GreyFoxContactManager.FillFromReader(dojoPromotion.member.EmergencyContact, "kitTessen_Members_EmergencyContacts", r, memberEmergencyContactOffset, memberEmergencyContactOffset+1);

					// Fill 
					if(memberPublicContactOffset != -1 && !r.IsDBNull(memberPublicContactOffset))
						GreyFoxContactManager.FillFromReader(dojoPromotion.member.PublicContact, "kitTessen_Members_PublicContacts", r, memberPublicContactOffset, memberPublicContactOffset+1);

					// Fill 
					if(memberParentOffset != -1 && !r.IsDBNull(memberParentOffset))
						DojoMemberManager.FillFromReader(dojoPromotion.member.Parent, r, memberParentOffset, memberParentOffset+1);

					// Fill 
					if(memberRootOffset != -1 && !r.IsDBNull(memberRootOffset))
						DojoMemberManager.FillFromReader(dojoPromotion.member.Root, r, memberRootOffset, memberRootOffset+1);

					// Fill 
					if(memberMemberTypeOffset != -1 && !r.IsDBNull(memberMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoPromotion.member.MemberType, r, memberMemberTypeOffset, memberMemberTypeOffset+1);

					// Fill 
					if(memberMemberTypeTemplateOffset != -1 && !r.IsDBNull(memberMemberTypeTemplateOffset))
						DojoMemberTypeTemplateManager.FillFromReader(dojoPromotion.member.MemberTypeTemplate, r, memberMemberTypeTemplateOffset, memberMemberTypeTemplateOffset+1);

					// Fill 
					if(memberMembership1Offset != -1 && !r.IsDBNull(memberMembership1Offset))
						DojoMembershipManager.FillFromReader(dojoPromotion.member.Membership1, r, memberMembership1Offset, memberMembership1Offset+1);

					// Fill 
					if(memberMembership2Offset != -1 && !r.IsDBNull(memberMembership2Offset))
						DojoMembershipManager.FillFromReader(dojoPromotion.member.Membership2, r, memberMembership2Offset, memberMembership2Offset+1);

					// Fill 
					if(memberMembership3Offset != -1 && !r.IsDBNull(memberMembership3Offset))
						DojoMembershipManager.FillFromReader(dojoPromotion.member.Membership3, r, memberMembership3Offset, memberMembership3Offset+1);

					// Fill 
					if(memberMembership4Offset != -1 && !r.IsDBNull(memberMembership4Offset))
						DojoMembershipManager.FillFromReader(dojoPromotion.member.Membership4, r, memberMembership4Offset, memberMembership4Offset+1);

					// Fill 
					if(memberMembership5Offset != -1 && !r.IsDBNull(memberMembership5Offset))
						DojoMembershipManager.FillFromReader(dojoPromotion.member.Membership5, r, memberMembership5Offset, memberMembership5Offset+1);

					// Fill 
					if(memberInstructor1Offset != -1 && !r.IsDBNull(memberInstructor1Offset))
						DojoMemberManager.FillFromReader(dojoPromotion.member.Instructor1, r, memberInstructor1Offset, memberInstructor1Offset+1);

					// Fill 
					if(memberInstructor2Offset != -1 && !r.IsDBNull(memberInstructor2Offset))
						DojoMemberManager.FillFromReader(dojoPromotion.member.Instructor2, r, memberInstructor2Offset, memberInstructor2Offset+1);

					// Fill 
					if(memberInstructor3Offset != -1 && !r.IsDBNull(memberInstructor3Offset))
						DojoMemberManager.FillFromReader(dojoPromotion.member.Instructor3, r, memberInstructor3Offset, memberInstructor3Offset+1);

					// Fill 
					if(memberRankOffset != -1 && !r.IsDBNull(memberRankOffset))
						DojoRankManager.FillFromReader(dojoPromotion.member.Rank, r, memberRankOffset, memberRankOffset+1);

					// Fill 
					if(memberUserAccountOffset != -1 && !r.IsDBNull(memberUserAccountOffset))
						GreyFoxUserManager.FillFromReader(dojoPromotion.member.UserAccount, r, memberUserAccountOffset, memberUserAccountOffset+1);

					// Fill 
					if(memberCustomerOffset != -1 && !r.IsDBNull(memberCustomerOffset))
						RHCustomerManager.FillFromReader(dojoPromotion.member.Customer, r, memberCustomerOffset, memberCustomerOffset+1);

				}

				// Fill Test
				if(testOffset != -1 && !r.IsDBNull(testOffset))
				{
					DojoTestManager.FillFromReader(dojoPromotion.test, r, testOffset, testOffset+1);

					// Fill 
					if(testLocationOffset != -1 && !r.IsDBNull(testLocationOffset))
						GreyFoxContactManager.FillFromReader(dojoPromotion.test.Location, "kitTessen_Locations", r, testLocationOffset, testLocationOffset+1);

					// Fill 
					if(testListMemberType1Offset != -1 && !r.IsDBNull(testListMemberType1Offset))
						DojoMemberTypeManager.FillFromReader(dojoPromotion.test.ListMemberType1, r, testListMemberType1Offset, testListMemberType1Offset+1);

					// Fill 
					if(testListMemberType2Offset != -1 && !r.IsDBNull(testListMemberType2Offset))
						DojoMemberTypeManager.FillFromReader(dojoPromotion.test.ListMemberType2, r, testListMemberType2Offset, testListMemberType2Offset+1);

					// Fill 
					if(testListMemberType3Offset != -1 && !r.IsDBNull(testListMemberType3Offset))
						DojoMemberTypeManager.FillFromReader(dojoPromotion.test.ListMemberType3, r, testListMemberType3Offset, testListMemberType3Offset+1);

					// Fill 
					if(testPanelChiefOffset != -1 && !r.IsDBNull(testPanelChiefOffset))
						DojoMemberManager.FillFromReader(dojoPromotion.test.PanelChief, r, testPanelChiefOffset, testPanelChiefOffset+1);

					// Fill 
					if(testStatusOffset != -1 && !r.IsDBNull(testStatusOffset))
						DojoTestListStatusManager.FillFromReader(dojoPromotion.test.Status, r, testStatusOffset, testStatusOffset+1);

					// Fill 
					if(testActiveTestListOffset != -1 && !r.IsDBNull(testActiveTestListOffset))
						DojoTestListManager.FillFromReader(dojoPromotion.test.ActiveTestList, r, testActiveTestListOffset, testActiveTestListOffset+1);

					// Fill 
					if(testItemOffset != -1 && !r.IsDBNull(testItemOffset))
						RHItemManager.FillFromReader(dojoPromotion.test.Item, r, testItemOffset, testItemOffset+1);

				}

				// Fill PromotionRank
				if(promotionRankOffset != -1 && !r.IsDBNull(promotionRankOffset))
				{
					DojoRankManager.FillFromReader(dojoPromotion.promotionRank, r, promotionRankOffset, promotionRankOffset+1);

					// Fill 
					if(promotionRankPromotionRankOffset != -1 && !r.IsDBNull(promotionRankPromotionRankOffset))
						DojoRankManager.FillFromReader(dojoPromotion.promotionRank.PromotionRank, r, promotionRankPromotionRankOffset, promotionRankPromotionRankOffset+1);

					// Fill 
					if(promotionRankItemOffset != -1 && !r.IsDBNull(promotionRankItemOffset))
						RHItemManager.FillFromReader(dojoPromotion.promotionRank.Item, r, promotionRankItemOffset, promotionRankItemOffset+1);

				}

				// Fill LastRank
				if(lastRankOffset != -1 && !r.IsDBNull(lastRankOffset))
				{
					DojoRankManager.FillFromReader(dojoPromotion.lastRank, r, lastRankOffset, lastRankOffset+1);

					// Fill 
					if(lastRankPromotionRankOffset != -1 && !r.IsDBNull(lastRankPromotionRankOffset))
						DojoRankManager.FillFromReader(dojoPromotion.lastRank.PromotionRank, r, lastRankPromotionRankOffset, lastRankPromotionRankOffset+1);

					// Fill 
					if(lastRankItemOffset != -1 && !r.IsDBNull(lastRankItemOffset))
						RHItemManager.FillFromReader(dojoPromotion.lastRank.Item, r, lastRankItemOffset, lastRankItemOffset+1);

				}

				// Fill Status
				if(statusOffset != -1 && !r.IsDBNull(statusOffset))
					DojoPromotionStatusManager.FillFromReader(dojoPromotion.status, r, statusOffset, statusOffset+1);

				dojoPromotionCollection.Add(dojoPromotion);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoPromotionCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoPromotion ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoPromotion dojoPromotion = new DojoPromotion();
			FillFromReader(dojoPromotion, r, idOffset, dataOffset);
			return dojoPromotion;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoPromotion dojoPromotion, IDataReader r, int idOffset, int dataOffset)
		{
			dojoPromotion.iD = r.GetInt32(idOffset);
			dojoPromotion.isSynced = true;
			dojoPromotion.isPlaceHolder = false;

			if(!r.IsDBNull(0+dataOffset) && r.GetInt32(0+dataOffset) > 0)
			{
				dojoPromotion.member = DojoMember.NewPlaceHolder(r.GetInt32(0+dataOffset));
			}
			if(!r.IsDBNull(1+dataOffset) && r.GetInt32(1+dataOffset) > 0)
			{
				dojoPromotion.test = DojoTest.NewPlaceHolder(r.GetInt32(1+dataOffset));
			}
			dojoPromotion.promotionDate = r.GetDateTime(2+dataOffset);
			if(!r.IsDBNull(3+dataOffset) && r.GetInt32(3+dataOffset) > 0)
			{
				dojoPromotion.promotionRank = DojoRank.NewPlaceHolder(r.GetInt32(3+dataOffset));
			}
			if(!r.IsDBNull(4+dataOffset) && r.GetInt32(4+dataOffset) > 0)
			{
				dojoPromotion.lastRank = DojoRank.NewPlaceHolder(r.GetInt32(4+dataOffset));
			}
			if(!r.IsDBNull(5+dataOffset) && r.GetInt32(5+dataOffset) > 0)
			{
				dojoPromotion.status = DojoPromotionStatus.NewPlaceHolder(r.GetInt32(5+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_Promotions WHERE DojoPromotionID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_Promotions ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_Promotions_Member FOREIGN KEY (MemberID) REFERENCES kitTessen_Members (DojoMemberID),");
			query.Append(" CONSTRAINT FK_kitTessen_Promotions_Test FOREIGN KEY (TestID) REFERENCES kitTessen_Tests (DojoTestID),");
			query.Append(" CONSTRAINT FK_kitTessen_Promotions_PromotionRank FOREIGN KEY (PromotionRankID) REFERENCES kitTessen_Ranks (DojoRankID),");
			query.Append(" CONSTRAINT FK_kitTessen_Promotions_LastRank FOREIGN KEY (LastRankID) REFERENCES kitTessen_Ranks (DojoRankID),");
			query.Append(" CONSTRAINT FK_kitTessen_Promotions_Status FOREIGN KEY (StatusID) REFERENCES kitTessen_PromotionStatuses (DojoPromotionStatusID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_Promotions ");
				query.Append(" (DojoPromotionID COUNTER(1,1) CONSTRAINT PK_kitTessen_Promotions PRIMARY KEY, " +
					"MemberID LONG," +
					"TestID LONG," +
					"PromotionDate DATETIME," +
					"PromotionRankID LONG," +
					"LastRankID LONG," +
					"StatusID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_Promotions ");
				query.Append(" (DojoPromotionID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_Promotions PRIMARY KEY, " +
					"MemberID INT," +
					"TestID INT," +
					"PromotionDate DATETIME," +
					"PromotionRankID INT," +
					"LastRankID INT," +
					"StatusID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoPromotion dojoPromotion)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_Promotions_" + dojoPromotion.iD.ToString(), dojoPromotion);
		}

		private static DojoPromotion cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_Promotions_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoPromotion)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_Promotions_" + id.ToString());
		}

		#endregion

		//--- Begin Custom Code ---

		public DojoPromotion FindPromotionByMember(int memberID, int promotionRankID)
		{
            Database database = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = database.GetSqlStringCommand("SELECT " + 
                string.Join(",", InnerJoinFields) + 
				" FROM kitTessen_Promotions " +
				" WHERE MemberID=" + memberID + 
				" AND PromotionRankID=" + promotionRankID + ";");
            IDataReader r = database.ExecuteReader(dbCommand);
			DojoPromotion p = null;
			if(r.Read())
				p = DojoPromotionManager.ParseFromReader(r, 0, 1);
			return p;
		}

		//--- End Custom Code ---
	}
}

