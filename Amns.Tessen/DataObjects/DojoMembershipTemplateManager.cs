/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;
using Amns.GreyFox.People;
using Amns.Rappahanock;

namespace Amns.Tessen
{
	#region Child Flags Enumeration

	public enum DojoMembershipTemplateFlags : int { Organization,
				OrganizationLocation,
				OrganizationClassLocations,
				OrganizationAdministrativeContact,
				OrganizationDefaultMemberType,
				RootTemplate,
				RootTemplateOrganization,
				RootTemplateRootTemplate,
				RootTemplateRankMin,
				RootTemplateRankMax,
				RootTemplateItem,
				RootTemplateItemClass,
				RankMin,
				RankMinPromotionRank,
				RankMinItem,
				RankMax,
				RankMaxPromotionRank,
				RankMaxItem,
				Item,
				ItemParentItem,
				ItemPurchaseVendor,
				ItemPurchaseAccount,
				ItemInventoryAccount,
				ItemTax,
				ItemSalesIncomeAccount,
				ItemWebRelatedItems,
				ItemClass};

	#endregion

	/// <summary>
	/// Datamanager for DojoMembershipTemplate objects.
	/// </summary>
	public class DojoMembershipTemplateManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_MembershipTemplates";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoMembershipTemplateID",
			"CreateDate",
			"ModifyDate",
			"Name",
			"Description",
			"OrderNum",
			"OrganizationID",
			"IsPrimary",
			"RootTemplateID",
			"Fee",
			"StartupFee",
			"ProRateMonthA",
			"ProRateDayA",
			"ProRateFeeA",
			"ProRateEndA",
			"ProRateMonthB",
			"ProRateDayB",
			"ProRateFeeB",
			"ProRateEndB",
			"ProRateMonthC",
			"ProRateDayC",
			"ProRateFeeC",
			"ProRateEndC",
			"PrePurchaseTime",
			"AgeYearsMax",
			"AgeYearsMin",
			"MemberForMin",
			"MemberForMax",
			"RankMinID",
			"RankMaxID",
			"PurchaseRequired",
			"TestRequired",
			"AttendanceRequired",
			"MembershipStart",
			"MembershipEnd",
			"ItemID",
			"ItemClassID"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoMembershipTemplateID", "LONG", "-1" },
			{ "CreateDate", "DATETIME", "DateTime.Now" },
			{ "ModifyDate", "DATETIME", "DateTime.Now" },
			{ "Name", "TEXT(75)", "string.Empty" },
			{ "Description", "MEMO", "string.Empty" },
			{ "OrderNum", "LONG", "" },
			{ "OrganizationID", "LONG", "null" },
			{ "IsPrimary", "BIT", "" },
			{ "RootTemplateID", "LONG", "null" },
			{ "Fee", "CURRENCY", "" },
			{ "StartupFee", "CURRENCY", "" },
			{ "ProRateMonthA", "LONG", "" },
			{ "ProRateDayA", "LONG", "" },
			{ "ProRateFeeA", "CURRENCY", "" },
			{ "ProRateEndA", "BYTE", "0" },
			{ "ProRateMonthB", "LONG", "" },
			{ "ProRateDayB", "LONG", "" },
			{ "ProRateFeeB", "CURRENCY", "" },
			{ "ProRateEndB", "BYTE", "0" },
			{ "ProRateMonthC", "LONG", "" },
			{ "ProRateDayC", "LONG", "" },
			{ "ProRateFeeC", "CURRENCY", "" },
			{ "ProRateEndC", "BYTE", "0" },
			{ "PrePurchaseTime", "DOUBLE", "" },
			{ "AgeYearsMax", "LONG", "" },
			{ "AgeYearsMin", "LONG", "" },
			{ "MemberForMin", "LONG", "" },
			{ "MemberForMax", "LONG", "" },
			{ "RankMinID", "LONG", "null" },
			{ "RankMaxID", "LONG", "null" },
			{ "PurchaseRequired", "BIT", "" },
			{ "TestRequired", "BIT", "" },
			{ "AttendanceRequired", "BIT", "" },
			{ "MembershipStart", "BYTE", "0" },
			{ "MembershipEnd", "BYTE", "0" },
			{ "ItemID", "LONG", "null" },
			{ "ItemClassID", "LONG", "null" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoMembershipTemplateManager()
		{
		}

		public DojoMembershipTemplateManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoMembershipTemplateManager.isInitialized)
			{
				DojoMembershipTemplateManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoMembershipTemplate into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoMembershipTemplate">The DojoMembershipTemplate to insert into the database.</param>
		internal static int _insert(DojoMembershipTemplate dojoMembershipTemplate)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			// Set Create Date to Now
			dojoMembershipTemplate.CreateDate = DateTime.Now.ToUniversalTime();

			// Set Modify Date to Now
			dojoMembershipTemplate.ModifyDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_MembershipTemplates " +
				"(" +
				"CreateDate," +
				"ModifyDate," +
				"Name," +
				"Description," +
				"OrderNum," +
				"OrganizationID," +
				"IsPrimary," +
				"RootTemplateID," +
				"Fee," +
				"StartupFee," +
				"ProRateMonthA," +
				"ProRateDayA," +
				"ProRateFeeA," +
				"ProRateEndA," +
				"ProRateMonthB," +
				"ProRateDayB," +
				"ProRateFeeB," +
				"ProRateEndB," +
				"ProRateMonthC," +
				"ProRateDayC," +
				"ProRateFeeC," +
				"ProRateEndC," +
				"PrePurchaseTime," +
				"AgeYearsMax," +
				"AgeYearsMin," +
				"MemberForMin," +
				"MemberForMax," +
				"RankMinID," +
				"RankMaxID," +
				"PurchaseRequired," +
				"TestRequired," +
				"AttendanceRequired," +
				"MembershipStart," +
				"MembershipEnd," +
				"ItemID," +
				"ItemClassID) VALUES (" +
				"@CreateDate," +
				"@ModifyDate," +
				"@Name," +
				"@Description," +
				"@OrderNum," +
				"@OrganizationID," +
				"@IsPrimary," +
				"@RootTemplateID," +
				"@Fee," +
				"@StartupFee," +
				"@ProRateMonthA," +
				"@ProRateDayA," +
				"@ProRateFeeA," +
				"@ProRateEndA," +
				"@ProRateMonthB," +
				"@ProRateDayB," +
				"@ProRateFeeB," +
				"@ProRateEndB," +
				"@ProRateMonthC," +
				"@ProRateDayC," +
				"@ProRateFeeC," +
				"@ProRateEndC," +
				"@PrePurchaseTime," +
				"@AgeYearsMax," +
				"@AgeYearsMin," +
				"@MemberForMin," +
				"@MemberForMax," +
				"@RankMinID," +
				"@RankMaxID," +
				"@PurchaseRequired," +
				"@TestRequired," +
				"@AttendanceRequired," +
				"@MembershipStart," +
				"@MembershipEnd," +
				"@ItemID," +
				"@ItemClassID);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoMembershipTemplate);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoMembershipTemplate);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoMembershipTemplate in cache.
			if(cacheEnabled) cacheStore(dojoMembershipTemplate);
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoMembershipTemplate dojoMembershipTemplate)
		{
			Database database;
			DbCommand dbCommand;

			// Set Modify Date to Now
			dojoMembershipTemplate.ModifyDate = DateTime.Now.ToUniversalTime();

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_MembershipTemplates SET CreateDate=@CreateDate," +
				"ModifyDate=@ModifyDate," +
				"Name=@Name," +
				"Description=@Description," +
				"OrderNum=@OrderNum," +
				"OrganizationID=@OrganizationID," +
				"IsPrimary=@IsPrimary," +
				"RootTemplateID=@RootTemplateID," +
				"Fee=@Fee," +
				"StartupFee=@StartupFee," +
				"ProRateMonthA=@ProRateMonthA," +
				"ProRateDayA=@ProRateDayA," +
				"ProRateFeeA=@ProRateFeeA," +
				"ProRateEndA=@ProRateEndA," +
				"ProRateMonthB=@ProRateMonthB," +
				"ProRateDayB=@ProRateDayB," +
				"ProRateFeeB=@ProRateFeeB," +
				"ProRateEndB=@ProRateEndB," +
				"ProRateMonthC=@ProRateMonthC," +
				"ProRateDayC=@ProRateDayC," +
				"ProRateFeeC=@ProRateFeeC," +
				"ProRateEndC=@ProRateEndC," +
				"PrePurchaseTime=@PrePurchaseTime," +
				"AgeYearsMax=@AgeYearsMax," +
				"AgeYearsMin=@AgeYearsMin," +
				"MemberForMin=@MemberForMin," +
				"MemberForMax=@MemberForMax," +
				"RankMinID=@RankMinID," +
				"RankMaxID=@RankMaxID," +
				"PurchaseRequired=@PurchaseRequired," +
				"TestRequired=@TestRequired," +
				"AttendanceRequired=@AttendanceRequired," +
				"MembershipStart=@MembershipStart," +
				"MembershipEnd=@MembershipEnd," +
				"ItemID=@ItemID," +
				"ItemClassID=@ItemClassID WHERE DojoMembershipTemplateID=@DojoMembershipTemplateID;");

			fillParameters(database, dbCommand, dojoMembershipTemplate);
			database.AddInParameter(dbCommand, "DojoMembershipTemplateID", DbType.Int32, dojoMembershipTemplate.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoMembershipTemplate in cache.
			if (cacheEnabled) cacheStore(dojoMembershipTemplate);

			return dojoMembershipTemplate.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoMembershipTemplate dojoMembershipTemplate)
		{
			#region _system

			addParameter(database, dbCommand, "@CreateDate", DbType.Date, dojoMembershipTemplate.createDate);
			addParameter(database, dbCommand, "@ModifyDate", DbType.Date, dojoMembershipTemplate.modifyDate);

			#endregion

			#region General

			addParameter(database, dbCommand, "@Name", DbType.String, dojoMembershipTemplate.name);
			addParameter(database, dbCommand, "@Description", DbType.String, dojoMembershipTemplate.description);
			addParameter(database, dbCommand, "@OrderNum", DbType.Int32, dojoMembershipTemplate.orderNum);
			if(dojoMembershipTemplate.organization == null)
			{
				addParameter(database, dbCommand, "@OrganizationID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@OrganizationID", DbType.Int32, dojoMembershipTemplate.organization.ID);
			}
			addParameter(database, dbCommand, "@IsPrimary", DbType.Boolean, dojoMembershipTemplate.isPrimary);
			if(dojoMembershipTemplate.rootTemplate == null)
			{
				addParameter(database, dbCommand, "@RootTemplateID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@RootTemplateID", DbType.Int32, dojoMembershipTemplate.rootTemplate.ID);
			}

			#endregion

			#region Fee Schedule

			addParameter(database, dbCommand, "@Fee", DbType.Currency, dojoMembershipTemplate.fee);
			addParameter(database, dbCommand, "@StartupFee", DbType.Currency, dojoMembershipTemplate.startupFee);
			addParameter(database, dbCommand, "@ProRateMonthA", DbType.Int32, dojoMembershipTemplate.proRateMonthA);
			addParameter(database, dbCommand, "@ProRateDayA", DbType.Int32, dojoMembershipTemplate.proRateDayA);
			addParameter(database, dbCommand, "@ProRateFeeA", DbType.Currency, dojoMembershipTemplate.proRateFeeA);
			addParameter(database, dbCommand, "@ProRateEndA", DbType.Byte, (Byte)dojoMembershipTemplate.proRateEndA);
			addParameter(database, dbCommand, "@ProRateMonthB", DbType.Int32, dojoMembershipTemplate.proRateMonthB);
			addParameter(database, dbCommand, "@ProRateDayB", DbType.Int32, dojoMembershipTemplate.proRateDayB);
			addParameter(database, dbCommand, "@ProRateFeeB", DbType.Currency, dojoMembershipTemplate.proRateFeeB);
			addParameter(database, dbCommand, "@ProRateEndB", DbType.Byte, (Byte)dojoMembershipTemplate.proRateEndB);
			addParameter(database, dbCommand, "@ProRateMonthC", DbType.Int32, dojoMembershipTemplate.proRateMonthC);
			addParameter(database, dbCommand, "@ProRateDayC", DbType.Int32, dojoMembershipTemplate.proRateDayC);
			addParameter(database, dbCommand, "@ProRateFeeC", DbType.Currency, dojoMembershipTemplate.proRateFeeC);
			addParameter(database, dbCommand, "@ProRateEndC", DbType.Byte, (Byte)dojoMembershipTemplate.proRateEndC);
			addParameter(database, dbCommand, "@PrePurchaseTime", DbType.Double, dojoMembershipTemplate.prePurchaseTime.Ticks);

			#endregion

			#region Requirements

			addParameter(database, dbCommand, "@AgeYearsMax", DbType.Int32, dojoMembershipTemplate.ageYearsMax);
			addParameter(database, dbCommand, "@AgeYearsMin", DbType.Int32, dojoMembershipTemplate.ageYearsMin);
			addParameter(database, dbCommand, "@MemberForMin", DbType.Int32, dojoMembershipTemplate.memberForMin);
			addParameter(database, dbCommand, "@MemberForMax", DbType.Int32, dojoMembershipTemplate.memberForMax);
			if(dojoMembershipTemplate.rankMin == null)
			{
				addParameter(database, dbCommand, "@RankMinID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@RankMinID", DbType.Int32, dojoMembershipTemplate.rankMin.ID);
			}
			if(dojoMembershipTemplate.rankMax == null)
			{
				addParameter(database, dbCommand, "@RankMaxID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@RankMaxID", DbType.Int32, dojoMembershipTemplate.rankMax.ID);
			}
			addParameter(database, dbCommand, "@PurchaseRequired", DbType.Boolean, dojoMembershipTemplate.purchaseRequired);
			addParameter(database, dbCommand, "@TestRequired", DbType.Boolean, dojoMembershipTemplate.testRequired);
			addParameter(database, dbCommand, "@AttendanceRequired", DbType.Boolean, dojoMembershipTemplate.attendanceRequired);

			#endregion

			#region Membership Duration

			addParameter(database, dbCommand, "@MembershipStart", DbType.Byte, (Byte)dojoMembershipTemplate.membershipStart);
			addParameter(database, dbCommand, "@MembershipEnd", DbType.Byte, (Byte)dojoMembershipTemplate.membershipEnd);

			#endregion

			#region Rappahanock

			if(dojoMembershipTemplate.item == null)
			{
				addParameter(database, dbCommand, "@ItemID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ItemID", DbType.Int32, dojoMembershipTemplate.item.ID);
			}
			if(dojoMembershipTemplate.itemClass == null)
			{
				addParameter(database, dbCommand, "@ItemClassID", DbType.Int32, DBNull.Value);
			}
			else
			{
				addParameter(database, dbCommand, "@ItemClassID", DbType.Int32, dojoMembershipTemplate.itemClass.ID);
			}

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoMembershipTemplate dojoMembershipTemplate)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoMembershipTemplate.iD);
				if(cachedObject != null)
				{
					((DojoMembershipTemplate)cachedObject).CopyTo(dojoMembershipTemplate, true);
					return dojoMembershipTemplate.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_MembershipTemplates WHERE DojoMembershipTemplateID=");
			query.Append(dojoMembershipTemplate.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoMembershipTemplateID '{0}'.", 
					dojoMembershipTemplate.iD)));
			}

			FillFromReader(dojoMembershipTemplate, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoMembershipTemplate in cache.
			if(cacheEnabled) cacheStore(dojoMembershipTemplate);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoMembershipTemplateCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause, null);
		}

		public DojoMembershipTemplateCollection GetCollection(string whereClause, string sortClause, params DojoMembershipTemplateFlags[] optionFlags)
		{
			return GetCollection(0, whereClause, sortClause, optionFlags);
		}

		public DojoMembershipTemplateCollection GetCollection(int topCount, string whereClause, string sortClause, params DojoMembershipTemplateFlags[] optionFlags)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoMembershipTemplateCollection dojoMembershipTemplateCollection;

			int innerJoinOffset;

			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoMembershipTemplate.");
				query.Append(columnName);
				query.Append(",");
			}

			innerJoinOffset = InnerJoinFields.GetUpperBound(0) + 1;
			int organizationOffset = -1;
			int organizationLocationOffset = -1;
			int organizationAdministrativeContactOffset = -1;
			int organizationDefaultMemberTypeOffset = -1;
			int rootTemplateOffset = -1;
			int rootTemplateOrganizationOffset = -1;
			int rootTemplateRootTemplateOffset = -1;
			int rootTemplateRankMinOffset = -1;
			int rootTemplateRankMaxOffset = -1;
			int rootTemplateItemOffset = -1;
			int rootTemplateItemClassOffset = -1;
			int rankMinOffset = -1;
			int rankMinPromotionRankOffset = -1;
			int rankMinItemOffset = -1;
			int rankMaxOffset = -1;
			int rankMaxPromotionRankOffset = -1;
			int rankMaxItemOffset = -1;
			int itemOffset = -1;
			int itemParentItemOffset = -1;
			int itemPurchaseVendorOffset = -1;
			int itemPurchaseAccountOffset = -1;
			int itemInventoryAccountOffset = -1;
			int itemTaxOffset = -1;
			int itemSalesIncomeAccountOffset = -1;
			int itemClassOffset = -1;

			//
			// Append Option Flag Fields
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoMembershipTemplateFlags.Organization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							organizationOffset = innerJoinOffset;
							innerJoinOffset = organizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.OrganizationLocation:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Organization_Location.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							organizationLocationOffset = innerJoinOffset;
							innerJoinOffset = organizationLocationOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.OrganizationAdministrativeContact:
							for(int i = 0; i <= GreyFoxContactManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Organization_AdministrativeContact.");
								query.Append(GreyFoxContactManager.InnerJoinFields[i]);
								query.Append(",");
							}
							organizationAdministrativeContactOffset = innerJoinOffset;
							innerJoinOffset = organizationAdministrativeContactOffset + GreyFoxContactManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.OrganizationDefaultMemberType:
							for(int i = 0; i <= DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Organization_DefaultMemberType.");
								query.Append(DojoMemberTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							organizationDefaultMemberTypeOffset = innerJoinOffset;
							innerJoinOffset = organizationDefaultMemberTypeOffset + DojoMemberTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RootTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RootTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootTemplateOffset = innerJoinOffset;
							innerJoinOffset = rootTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RootTemplateOrganization:
							for(int i = 0; i <= DojoOrganizationManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RootTemplate_Organization.");
								query.Append(DojoOrganizationManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootTemplateOrganizationOffset = innerJoinOffset;
							innerJoinOffset = rootTemplateOrganizationOffset + DojoOrganizationManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RootTemplateRootTemplate:
							for(int i = 0; i <= DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RootTemplate_RootTemplate.");
								query.Append(DojoMembershipTemplateManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootTemplateRootTemplateOffset = innerJoinOffset;
							innerJoinOffset = rootTemplateRootTemplateOffset + DojoMembershipTemplateManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RootTemplateRankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RootTemplate_RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootTemplateRankMinOffset = innerJoinOffset;
							innerJoinOffset = rootTemplateRankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RootTemplateRankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RootTemplate_RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootTemplateRankMaxOffset = innerJoinOffset;
							innerJoinOffset = rootTemplateRankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RootTemplateItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RootTemplate_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootTemplateItemOffset = innerJoinOffset;
							innerJoinOffset = rootTemplateItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RootTemplateItemClass:
							for(int i = 0; i <= RHClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RootTemplate_ItemClass.");
								query.Append(RHClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rootTemplateItemClassOffset = innerJoinOffset;
							innerJoinOffset = rootTemplateItemClassOffset + RHClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RankMin:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RankMin.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankMinOffset = innerJoinOffset;
							innerJoinOffset = rankMinOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RankMinPromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RankMin_PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankMinPromotionRankOffset = innerJoinOffset;
							innerJoinOffset = rankMinPromotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RankMinItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RankMin_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankMinItemOffset = innerJoinOffset;
							innerJoinOffset = rankMinItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RankMax:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RankMax.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankMaxOffset = innerJoinOffset;
							innerJoinOffset = rankMaxOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RankMaxPromotionRank:
							for(int i = 0; i <= DojoRankManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RankMax_PromotionRank.");
								query.Append(DojoRankManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankMaxPromotionRankOffset = innerJoinOffset;
							innerJoinOffset = rankMaxPromotionRankOffset + DojoRankManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.RankMaxItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("RankMax_Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							rankMaxItemOffset = innerJoinOffset;
							innerJoinOffset = rankMaxItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.Item:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemOffset = innerJoinOffset;
							innerJoinOffset = itemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.ItemParentItem:
							for(int i = 0; i <= RHItemManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_ParentItem.");
								query.Append(RHItemManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemParentItemOffset = innerJoinOffset;
							innerJoinOffset = itemParentItemOffset + RHItemManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.ItemPurchaseVendor:
							for(int i = 0; i <= RHVendorManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_PurchaseVendor.");
								query.Append(RHVendorManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemPurchaseVendorOffset = innerJoinOffset;
							innerJoinOffset = itemPurchaseVendorOffset + RHVendorManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.ItemPurchaseAccount:
							for(int i = 0; i <= RHAccountManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_PurchaseAccount.");
								query.Append(RHAccountManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemPurchaseAccountOffset = innerJoinOffset;
							innerJoinOffset = itemPurchaseAccountOffset + RHAccountManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.ItemInventoryAccount:
							for(int i = 0; i <= RHAccountManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_InventoryAccount.");
								query.Append(RHAccountManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemInventoryAccountOffset = innerJoinOffset;
							innerJoinOffset = itemInventoryAccountOffset + RHAccountManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.ItemTax:
							for(int i = 0; i <= RHTaxTypeManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_Tax.");
								query.Append(RHTaxTypeManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemTaxOffset = innerJoinOffset;
							innerJoinOffset = itemTaxOffset + RHTaxTypeManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.ItemSalesIncomeAccount:
							for(int i = 0; i <= RHAccountManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("Item_SalesIncomeAccount.");
								query.Append(RHAccountManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemSalesIncomeAccountOffset = innerJoinOffset;
							innerJoinOffset = itemSalesIncomeAccountOffset + RHAccountManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
						case DojoMembershipTemplateFlags.ItemClass:
							for(int i = 0; i <= RHClassManager.InnerJoinFields.GetUpperBound(0); i++)
							{
								query.Append("ItemClass.");
								query.Append(RHClassManager.InnerJoinFields[i]);
								query.Append(",");
							}
							itemClassOffset = innerJoinOffset;
							innerJoinOffset = itemClassOffset + RHClassManager.InnerJoinFields.GetUpperBound(0) + 1;
							break;
					}
				}

			//
			// Remove trailing comma
			//
			query.Length--;
			if(optionFlags != null)
			{
				query.Append(" FROM ");

				//
				// Start INNER JOIN expressions
				//
				for(int x = 0; x < optionFlags.Length; x++)
					query.Append("(");

				query.Append("kitTessen_MembershipTemplates AS DojoMembershipTemplate");
			}
			else
			{
				query.Append(" FROM kitTessen_MembershipTemplates AS DojoMembershipTemplate");
			}
			//
			// Finish INNER JOIN expressions
			//
			if(optionFlags != null)
				for(int x = 0; x < optionFlags.Length; x++)
				{
					switch(optionFlags[x])
					{
						case DojoMembershipTemplateFlags.Organization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS Organization ON DojoMembershipTemplate.OrganizationID = Organization.DojoOrganizationID)");
							break;
						case DojoMembershipTemplateFlags.OrganizationLocation:
							query.Append(" LEFT JOIN kitTessen_Locations AS Organization_Location ON Organization.LocationID = Organization_Location.GreyFoxContactID)");
							break;
						case DojoMembershipTemplateFlags.OrganizationAdministrativeContact:
							query.Append(" LEFT JOIN sysGlobal_Contacts AS Organization_AdministrativeContact ON Organization.AdministrativeContactID = Organization_AdministrativeContact.GreyFoxContactID)");
							break;
						case DojoMembershipTemplateFlags.OrganizationDefaultMemberType:
							query.Append(" LEFT JOIN kitTessen_MemberTypes AS Organization_DefaultMemberType ON Organization.DefaultMemberTypeID = Organization_DefaultMemberType.DojoMemberTypeID)");
							break;
						case DojoMembershipTemplateFlags.RootTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS RootTemplate ON DojoMembershipTemplate.RootTemplateID = RootTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMembershipTemplateFlags.RootTemplateOrganization:
							query.Append(" LEFT JOIN kitTessen_Organizations AS RootTemplate_Organization ON RootTemplate.OrganizationID = RootTemplate_Organization.DojoOrganizationID)");
							break;
						case DojoMembershipTemplateFlags.RootTemplateRootTemplate:
							query.Append(" LEFT JOIN kitTessen_MembershipTemplates AS RootTemplate_RootTemplate ON RootTemplate.RootTemplateID = RootTemplate_RootTemplate.DojoMembershipTemplateID)");
							break;
						case DojoMembershipTemplateFlags.RootTemplateRankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS RootTemplate_RankMin ON RootTemplate.RankMinID = RootTemplate_RankMin.DojoRankID)");
							break;
						case DojoMembershipTemplateFlags.RootTemplateRankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS RootTemplate_RankMax ON RootTemplate.RankMaxID = RootTemplate_RankMax.DojoRankID)");
							break;
						case DojoMembershipTemplateFlags.RootTemplateItem:
							query.Append(" LEFT JOIN RH_Items AS RootTemplate_Item ON RootTemplate.ItemID = RootTemplate_Item.RHItemID)");
							break;
						case DojoMembershipTemplateFlags.RootTemplateItemClass:
							query.Append(" LEFT JOIN RH_Classes AS RootTemplate_ItemClass ON RootTemplate.ItemClassID = RootTemplate_ItemClass.RHClassID)");
							break;
						case DojoMembershipTemplateFlags.RankMin:
							query.Append(" LEFT JOIN kitTessen_Ranks AS RankMin ON DojoMembershipTemplate.RankMinID = RankMin.DojoRankID)");
							break;
						case DojoMembershipTemplateFlags.RankMinPromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS RankMin_PromotionRank ON RankMin.PromotionRankID = RankMin_PromotionRank.DojoRankID)");
							break;
						case DojoMembershipTemplateFlags.RankMinItem:
							query.Append(" LEFT JOIN RH_Items AS RankMin_Item ON RankMin.ItemID = RankMin_Item.RHItemID)");
							break;
						case DojoMembershipTemplateFlags.RankMax:
							query.Append(" LEFT JOIN kitTessen_Ranks AS RankMax ON DojoMembershipTemplate.RankMaxID = RankMax.DojoRankID)");
							break;
						case DojoMembershipTemplateFlags.RankMaxPromotionRank:
							query.Append(" LEFT JOIN kitTessen_Ranks AS RankMax_PromotionRank ON RankMax.PromotionRankID = RankMax_PromotionRank.DojoRankID)");
							break;
						case DojoMembershipTemplateFlags.RankMaxItem:
							query.Append(" LEFT JOIN RH_Items AS RankMax_Item ON RankMax.ItemID = RankMax_Item.RHItemID)");
							break;
						case DojoMembershipTemplateFlags.Item:
							query.Append(" LEFT JOIN RH_Items AS Item ON DojoMembershipTemplate.ItemID = Item.RHItemID)");
							break;
						case DojoMembershipTemplateFlags.ItemParentItem:
							query.Append(" LEFT JOIN RH_Items AS Item_ParentItem ON Item.ParentItemID = Item_ParentItem.RHItemID)");
							break;
						case DojoMembershipTemplateFlags.ItemPurchaseVendor:
							query.Append(" LEFT JOIN RH_Vendors AS Item_PurchaseVendor ON Item.PurchaseVendorID = Item_PurchaseVendor.RHVendorID)");
							break;
						case DojoMembershipTemplateFlags.ItemPurchaseAccount:
							query.Append(" LEFT JOIN RH_Accounts AS Item_PurchaseAccount ON Item.PurchaseAccountID = Item_PurchaseAccount.RHAccountID)");
							break;
						case DojoMembershipTemplateFlags.ItemInventoryAccount:
							query.Append(" LEFT JOIN RH_Accounts AS Item_InventoryAccount ON Item.InventoryAccountID = Item_InventoryAccount.RHAccountID)");
							break;
						case DojoMembershipTemplateFlags.ItemTax:
							query.Append(" LEFT JOIN RH_TaxTypes AS Item_Tax ON Item.TaxID = Item_Tax.RHTaxTypeID)");
							break;
						case DojoMembershipTemplateFlags.ItemSalesIncomeAccount:
							query.Append(" LEFT JOIN RH_Accounts AS Item_SalesIncomeAccount ON Item.SalesIncomeAccountID = Item_SalesIncomeAccount.RHAccountID)");
							break;
						case DojoMembershipTemplateFlags.ItemClass:
							query.Append(" LEFT JOIN RH_Classes AS ItemClass ON DojoMembershipTemplate.ItemClassID = ItemClass.RHClassID)");
							break;
					}
				}

			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoMembershipTemplateCollection = new DojoMembershipTemplateCollection();

			while(r.Read())
			{
				DojoMembershipTemplate dojoMembershipTemplate = ParseFromReader(r, 0, 1);

				// Fill Organization
				if(organizationOffset != -1 && !r.IsDBNull(organizationOffset))
				{
					DojoOrganizationManager.FillFromReader(dojoMembershipTemplate.organization, r, organizationOffset, organizationOffset+1);

					// Fill 
					if(organizationLocationOffset != -1 && !r.IsDBNull(organizationLocationOffset))
						GreyFoxContactManager.FillFromReader(dojoMembershipTemplate.organization.Location, "kitTessen_Locations", r, organizationLocationOffset, organizationLocationOffset+1);

					// Fill 
					if(organizationAdministrativeContactOffset != -1 && !r.IsDBNull(organizationAdministrativeContactOffset))
						GreyFoxContactManager.FillFromReader(dojoMembershipTemplate.organization.AdministrativeContact, "sysGlobal_Contacts", r, organizationAdministrativeContactOffset, organizationAdministrativeContactOffset+1);

					// Fill 
					if(organizationDefaultMemberTypeOffset != -1 && !r.IsDBNull(organizationDefaultMemberTypeOffset))
						DojoMemberTypeManager.FillFromReader(dojoMembershipTemplate.organization.DefaultMemberType, r, organizationDefaultMemberTypeOffset, organizationDefaultMemberTypeOffset+1);

				}

				// Fill RootTemplate
				if(rootTemplateOffset != -1 && !r.IsDBNull(rootTemplateOffset))
				{
					DojoMembershipTemplateManager.FillFromReader(dojoMembershipTemplate.rootTemplate, r, rootTemplateOffset, rootTemplateOffset+1);

					// Fill 
					if(rootTemplateOrganizationOffset != -1 && !r.IsDBNull(rootTemplateOrganizationOffset))
						DojoOrganizationManager.FillFromReader(dojoMembershipTemplate.rootTemplate.Organization, r, rootTemplateOrganizationOffset, rootTemplateOrganizationOffset+1);

					// Fill 
					if(rootTemplateRootTemplateOffset != -1 && !r.IsDBNull(rootTemplateRootTemplateOffset))
						DojoMembershipTemplateManager.FillFromReader(dojoMembershipTemplate.rootTemplate.RootTemplate, r, rootTemplateRootTemplateOffset, rootTemplateRootTemplateOffset+1);

					// Fill 
					if(rootTemplateRankMinOffset != -1 && !r.IsDBNull(rootTemplateRankMinOffset))
						DojoRankManager.FillFromReader(dojoMembershipTemplate.rootTemplate.RankMin, r, rootTemplateRankMinOffset, rootTemplateRankMinOffset+1);

					// Fill 
					if(rootTemplateRankMaxOffset != -1 && !r.IsDBNull(rootTemplateRankMaxOffset))
						DojoRankManager.FillFromReader(dojoMembershipTemplate.rootTemplate.RankMax, r, rootTemplateRankMaxOffset, rootTemplateRankMaxOffset+1);

					// Fill 
					if(rootTemplateItemOffset != -1 && !r.IsDBNull(rootTemplateItemOffset))
						RHItemManager.FillFromReader(dojoMembershipTemplate.rootTemplate.Item, r, rootTemplateItemOffset, rootTemplateItemOffset+1);

					// Fill 
					if(rootTemplateItemClassOffset != -1 && !r.IsDBNull(rootTemplateItemClassOffset))
						RHClassManager.FillFromReader(dojoMembershipTemplate.rootTemplate.ItemClass, r, rootTemplateItemClassOffset, rootTemplateItemClassOffset+1);

				}

				// Fill RankMin
				if(rankMinOffset != -1 && !r.IsDBNull(rankMinOffset))
				{
					DojoRankManager.FillFromReader(dojoMembershipTemplate.rankMin, r, rankMinOffset, rankMinOffset+1);

					// Fill 
					if(rankMinPromotionRankOffset != -1 && !r.IsDBNull(rankMinPromotionRankOffset))
						DojoRankManager.FillFromReader(dojoMembershipTemplate.rankMin.PromotionRank, r, rankMinPromotionRankOffset, rankMinPromotionRankOffset+1);

					// Fill 
					if(rankMinItemOffset != -1 && !r.IsDBNull(rankMinItemOffset))
						RHItemManager.FillFromReader(dojoMembershipTemplate.rankMin.Item, r, rankMinItemOffset, rankMinItemOffset+1);

				}

				// Fill RankMax
				if(rankMaxOffset != -1 && !r.IsDBNull(rankMaxOffset))
				{
					DojoRankManager.FillFromReader(dojoMembershipTemplate.rankMax, r, rankMaxOffset, rankMaxOffset+1);

					// Fill 
					if(rankMaxPromotionRankOffset != -1 && !r.IsDBNull(rankMaxPromotionRankOffset))
						DojoRankManager.FillFromReader(dojoMembershipTemplate.rankMax.PromotionRank, r, rankMaxPromotionRankOffset, rankMaxPromotionRankOffset+1);

					// Fill 
					if(rankMaxItemOffset != -1 && !r.IsDBNull(rankMaxItemOffset))
						RHItemManager.FillFromReader(dojoMembershipTemplate.rankMax.Item, r, rankMaxItemOffset, rankMaxItemOffset+1);

				}

				// Fill Item
				if(itemOffset != -1 && !r.IsDBNull(itemOffset))
				{
					RHItemManager.FillFromReader(dojoMembershipTemplate.item, r, itemOffset, itemOffset+1);

					// Fill 
					if(itemParentItemOffset != -1 && !r.IsDBNull(itemParentItemOffset))
						RHItemManager.FillFromReader(dojoMembershipTemplate.item.ParentItem, r, itemParentItemOffset, itemParentItemOffset+1);

					// Fill Vendor
					if(itemPurchaseVendorOffset != -1 && !r.IsDBNull(itemPurchaseVendorOffset))
						RHVendorManager.FillFromReader(dojoMembershipTemplate.item.PurchaseVendor, r, itemPurchaseVendorOffset, itemPurchaseVendorOffset+1);

					// Fill Purchase Account
					if(itemPurchaseAccountOffset != -1 && !r.IsDBNull(itemPurchaseAccountOffset))
						RHAccountManager.FillFromReader(dojoMembershipTemplate.item.PurchaseAccount, r, itemPurchaseAccountOffset, itemPurchaseAccountOffset+1);

					// Fill Asset Account
					if(itemInventoryAccountOffset != -1 && !r.IsDBNull(itemInventoryAccountOffset))
						RHAccountManager.FillFromReader(dojoMembershipTemplate.item.InventoryAccount, r, itemInventoryAccountOffset, itemInventoryAccountOffset+1);

					// Fill 
					if(itemTaxOffset != -1 && !r.IsDBNull(itemTaxOffset))
						RHTaxTypeManager.FillFromReader(dojoMembershipTemplate.item.Tax, r, itemTaxOffset, itemTaxOffset+1);

					// Fill 
					if(itemSalesIncomeAccountOffset != -1 && !r.IsDBNull(itemSalesIncomeAccountOffset))
						RHAccountManager.FillFromReader(dojoMembershipTemplate.item.SalesIncomeAccount, r, itemSalesIncomeAccountOffset, itemSalesIncomeAccountOffset+1);

				}

				// Fill ItemClass
				if(itemClassOffset != -1 && !r.IsDBNull(itemClassOffset))
					RHClassManager.FillFromReader(dojoMembershipTemplate.itemClass, r, itemClassOffset, itemClassOffset+1);

				dojoMembershipTemplateCollection.Add(dojoMembershipTemplate);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			return dojoMembershipTemplateCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoMembershipTemplate ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoMembershipTemplate dojoMembershipTemplate = new DojoMembershipTemplate();
			FillFromReader(dojoMembershipTemplate, r, idOffset, dataOffset);
			return dojoMembershipTemplate;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoMembershipTemplate dojoMembershipTemplate, IDataReader r, int idOffset, int dataOffset)
		{
			dojoMembershipTemplate.iD = r.GetInt32(idOffset);
			dojoMembershipTemplate.isSynced = true;
			dojoMembershipTemplate.isPlaceHolder = false;

			dojoMembershipTemplate.createDate = r.GetDateTime(0+dataOffset);
			dojoMembershipTemplate.modifyDate = r.GetDateTime(1+dataOffset);
			dojoMembershipTemplate.name = r.GetString(2+dataOffset);
			dojoMembershipTemplate.description = r.GetString(3+dataOffset);
			dojoMembershipTemplate.orderNum = r.GetInt32(4+dataOffset);
			if(!r.IsDBNull(5+dataOffset) && r.GetInt32(5+dataOffset) > 0)
			{
				dojoMembershipTemplate.organization = DojoOrganization.NewPlaceHolder(r.GetInt32(5+dataOffset));
			}
			dojoMembershipTemplate.isPrimary = r.GetBoolean(6+dataOffset);
			if(!r.IsDBNull(7+dataOffset) && r.GetInt32(7+dataOffset) > 0)
			{
				dojoMembershipTemplate.rootTemplate = DojoMembershipTemplate.NewPlaceHolder(r.GetInt32(7+dataOffset));
			}
			dojoMembershipTemplate.fee = r.GetDecimal(8+dataOffset);
			dojoMembershipTemplate.startupFee = r.GetDecimal(9+dataOffset);
			dojoMembershipTemplate.proRateMonthA = r.GetInt32(10+dataOffset);
			dojoMembershipTemplate.proRateDayA = r.GetInt32(11+dataOffset);
			dojoMembershipTemplate.proRateFeeA = r.GetDecimal(12+dataOffset);
			dojoMembershipTemplate.proRateEndA = (DojoMembershipDayType)r.GetByte(13+dataOffset);
			dojoMembershipTemplate.proRateMonthB = r.GetInt32(14+dataOffset);
			dojoMembershipTemplate.proRateDayB = r.GetInt32(15+dataOffset);
			dojoMembershipTemplate.proRateFeeB = r.GetDecimal(16+dataOffset);
			dojoMembershipTemplate.proRateEndB = (DojoMembershipDayType)r.GetByte(17+dataOffset);
			dojoMembershipTemplate.proRateMonthC = r.GetInt32(18+dataOffset);
			dojoMembershipTemplate.proRateDayC = r.GetInt32(19+dataOffset);
			dojoMembershipTemplate.proRateFeeC = r.GetDecimal(20+dataOffset);
			dojoMembershipTemplate.proRateEndC = (DojoMembershipDayType)r.GetByte(21+dataOffset);
			dojoMembershipTemplate.prePurchaseTime = TimeSpan.FromTicks((long) r.GetDouble(22+dataOffset));
			dojoMembershipTemplate.ageYearsMax = r.GetInt32(23+dataOffset);
			dojoMembershipTemplate.ageYearsMin = r.GetInt32(24+dataOffset);
			dojoMembershipTemplate.memberForMin = r.GetInt32(25+dataOffset);
			dojoMembershipTemplate.memberForMax = r.GetInt32(26+dataOffset);
			if(!r.IsDBNull(27+dataOffset) && r.GetInt32(27+dataOffset) > 0)
			{
				dojoMembershipTemplate.rankMin = DojoRank.NewPlaceHolder(r.GetInt32(27+dataOffset));
			}
			if(!r.IsDBNull(28+dataOffset) && r.GetInt32(28+dataOffset) > 0)
			{
				dojoMembershipTemplate.rankMax = DojoRank.NewPlaceHolder(r.GetInt32(28+dataOffset));
			}
			dojoMembershipTemplate.purchaseRequired = r.GetBoolean(29+dataOffset);
			dojoMembershipTemplate.testRequired = r.GetBoolean(30+dataOffset);
			dojoMembershipTemplate.attendanceRequired = r.GetBoolean(31+dataOffset);
			dojoMembershipTemplate.membershipStart = (DojoMembershipDayType)r.GetByte(32+dataOffset);
			dojoMembershipTemplate.membershipEnd = (DojoMembershipDayType)r.GetByte(33+dataOffset);
			if(!r.IsDBNull(34+dataOffset) && r.GetInt32(34+dataOffset) > 0)
			{
				dojoMembershipTemplate.item = RHItem.NewPlaceHolder(r.GetInt32(34+dataOffset));
			}
			if(!r.IsDBNull(35+dataOffset) && r.GetInt32(35+dataOffset) > 0)
			{
				dojoMembershipTemplate.itemClass = RHClass.NewPlaceHolder(r.GetInt32(35+dataOffset));
			}
		}

		#endregion

		#region Default NitroCast Fill Methods

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_MembershipTemplates WHERE DojoMembershipTemplateID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateReferences()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder();
			database = DatabaseFactory.CreateDatabase();
			query.Append("ALTER TABLE kitTessen_MembershipTemplates ADD ");
			query.Append(" CONSTRAINT FK_kitTessen_MembershipTemplates_Organization FOREIGN KEY (OrganizationID) REFERENCES kitTessen_Organizations (DojoOrganizationID),");
			query.Append(" CONSTRAINT FK_kitTessen_MembershipTemplates_RootTemplate FOREIGN KEY (RootTemplateID) REFERENCES kitTessen_MembershipTemplates (DojoMembershipTemplateID),");
			query.Append(" CONSTRAINT FK_kitTessen_MembershipTemplates_RankMin FOREIGN KEY (RankMinID) REFERENCES kitTessen_Ranks (DojoRankID),");
			query.Append(" CONSTRAINT FK_kitTessen_MembershipTemplates_RankMax FOREIGN KEY (RankMaxID) REFERENCES kitTessen_Ranks (DojoRankID),");
			query.Append(" CONSTRAINT FK_kitTessen_MembershipTemplates_Item FOREIGN KEY (ItemID) REFERENCES RH_Items (RHItemID),");
			query.Append(" CONSTRAINT FK_kitTessen_MembershipTemplates_ItemClass FOREIGN KEY (ItemClassID) REFERENCES RH_Classes (RHClassID);");
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);
		}

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_MembershipTemplates ");
				query.Append(" (DojoMembershipTemplateID COUNTER(1,1) CONSTRAINT PK_kitTessen_MembershipTemplates PRIMARY KEY, " +
					"CreateDate DATETIME," +
					"ModifyDate DATETIME," +
					"Name TEXT(75)," +
					"Description MEMO," +
					"OrderNum LONG," +
					"OrganizationID LONG," +
					"IsPrimary BIT," +
					"RootTemplateID LONG," +
					"Fee CURRENCY," +
					"StartupFee CURRENCY," +
					"ProRateMonthA LONG," +
					"ProRateDayA LONG," +
					"ProRateFeeA CURRENCY," +
					"ProRateEndA BYTE," +
					"ProRateMonthB LONG," +
					"ProRateDayB LONG," +
					"ProRateFeeB CURRENCY," +
					"ProRateEndB BYTE," +
					"ProRateMonthC LONG," +
					"ProRateDayC LONG," +
					"ProRateFeeC CURRENCY," +
					"ProRateEndC BYTE," +
					"PrePurchaseTime DOUBLE," +
					"AgeYearsMax LONG," +
					"AgeYearsMin LONG," +
					"MemberForMin LONG," +
					"MemberForMax LONG," +
					"RankMinID LONG," +
					"RankMaxID LONG," +
					"PurchaseRequired BIT," +
					"TestRequired BIT," +
					"AttendanceRequired BIT," +
					"MembershipStart BYTE," +
					"MembershipEnd BYTE," +
					"ItemID LONG," +
					"ItemClassID LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_MembershipTemplates ");
				query.Append(" (DojoMembershipTemplateID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_MembershipTemplates PRIMARY KEY, " +
					"CreateDate DATETIME," +
					"ModifyDate DATETIME," +
					"Name NVARCHAR(75)," +
					"Description NTEXT," +
					"OrderNum INT," +
					"OrganizationID INT," +
					"IsPrimary BIT," +
					"RootTemplateID INT," +
					"Fee MONEY," +
					"StartupFee MONEY," +
					"ProRateMonthA INT," +
					"ProRateDayA INT," +
					"ProRateFeeA MONEY," +
					"ProRateEndA TINYINT," +
					"ProRateMonthB INT," +
					"ProRateDayB INT," +
					"ProRateFeeB MONEY," +
					"ProRateEndB TINYINT," +
					"ProRateMonthC INT," +
					"ProRateDayC INT," +
					"ProRateFeeC MONEY," +
					"ProRateEndC TINYINT," +
					"PrePurchaseTime FLOAT," +
					"AgeYearsMax INT," +
					"AgeYearsMin INT," +
					"MemberForMin INT," +
					"MemberForMax INT," +
					"RankMinID INT," +
					"RankMaxID INT," +
					"PurchaseRequired BIT," +
					"TestRequired BIT," +
					"AttendanceRequired BIT," +
					"MembershipStart TINYINT," +
					"MembershipEnd TINYINT," +
					"ItemID INT," +
					"ItemClassID INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoMembershipTemplate dojoMembershipTemplate)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_MembershipTemplates_" + dojoMembershipTemplate.iD.ToString(), dojoMembershipTemplate);
		}

		private static DojoMembershipTemplate cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_MembershipTemplates_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoMembershipTemplate)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_MembershipTemplates_" + id.ToString());
		}

		#endregion

	}
}

