/* ********************************************************** *
 * AMNS NitroCast v1.0 DAABManager Data Tier                    *
 * Autogenerated by NitroCast Â© 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Caching;

namespace Amns.Tessen
{
	/// <summary>
	/// Datamanager for DojoMemberType objects.
	/// </summary>
	public class DojoMemberTypeManager
	{
		#region Manager Fields

		// Static Fields
		static bool isInitialized;

		// Private Fields
		string tableName = "kitTessen_MemberTypes";


		public string TableName
		{
			get { return tableName; }
			set { tableName = value; }
		}

		// Hashtable to cache separate tables
		static bool cacheEnabled	= true;
		public static bool CacheEnabled
		{
			get { return cacheEnabled; }
			set { cacheEnabled = value; }
		}

		#endregion

		#region Inner Join Field Array

		public static readonly string[] InnerJoinFields = new string[] {
			"DojoMemberTypeID",
			"Name",
			"Description",
			"OrderNum"
		};

		#endregion

		#region Join Field Array

		public static readonly string[,] JoinFields = new string[,] {
			{ "DojoMemberTypeID", "LONG", "-1" },
			{ "Name", "TEXT(75)", "" },
			{ "Description", "MEMO", "" },
			{ "OrderNum", "LONG", "" }
		};

		#endregion

		#region Default NitroCast Constructors

		static DojoMemberTypeManager()
		{
		}

		public DojoMemberTypeManager()
		{
		}

		#endregion

		#region Default NitroCast Constructors

		// Initialize
		public void Initialize(string connectionString)
		{
			if(!DojoMemberTypeManager.isInitialized)
			{
				DojoMemberTypeManager.isInitialized = true;
			}
		}
		#endregion

		#region Default NitroCast Insert Method

		/// <summary>
		/// Inserts a DojoMemberType into the database. All children should have been
		/// saved to the database before insertion. New children will not be
		/// related to this object in the database.
		/// </summary>
		/// <param name="_DojoMemberType">The DojoMemberType to insert into the database.</param>
		internal static int _insert(DojoMemberType dojoMemberType)
		{
			int id;
			string query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			query = "INSERT INTO kitTessen_MemberTypes " +
				"(" +
				"Name," +
				"Description," +
				"OrderNum) VALUES (" +
				"@Name," +
				"@Description," +
				"@OrderNum);";

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Access
				// Connection must remain open for IDENTITY to return correct value,
				// therefore use the dbCommand object's Connection directly to control
				// connection state.
				dbCommand = database.GetSqlStringCommand(query);
				fillParameters(database, dbCommand, dojoMemberType);
				dbCommand.Connection = database.CreateConnection();
				dbCommand.Connection.Open();
				dbCommand.ExecuteNonQuery();
				dbCommand.CommandText = "SELECT @@IDENTITY AS LastID";
				id = (int)dbCommand.ExecuteScalar();
				dbCommand.Connection.Close();
			}
			else
			{
				//// Microsoft SQL Server
				dbCommand = database.GetSqlStringCommand(query + " SELECT @LastID = SCOPE_IDENTITY();");
				fillParameters(database, dbCommand, dojoMemberType);
				database.AddOutParameter(dbCommand, "@LastID", DbType.Int32, 10);
				database.ExecuteNonQuery(dbCommand);
				id = (int)dbCommand.Parameters["@LastID"].Value;
			}
			// Store dojoMemberType in cache.
			if(cacheEnabled) cacheStore(dojoMemberType);
			// ************************* WARNING **************************** 
			// Insert operations must invalidate the cached collections.
			// Invalidation MUST invalidate any foreign cached collections that 
			// with children objects this manager provides or else the foreign 
			// caches retain invalidated and potentially corrupt data! 
			// NOTE:
			// NitroCast only allows collection caching on objects that do not 
			// have any children objects to minimize potential corruption. 
			invalidateCachedCollections();
			return id;
		}

		#endregion

		#region Default NitroCast Update Method

		internal static int _update(DojoMemberType dojoMemberType)
		{
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			dbCommand = database.GetSqlStringCommand("UPDATE kitTessen_MemberTypes SET Name=@Name," +
				"Description=@Description," +
				"OrderNum=@OrderNum WHERE DojoMemberTypeID=@DojoMemberTypeID;");

			fillParameters(database, dbCommand, dojoMemberType);
			database.AddInParameter(dbCommand, "DojoMemberTypeID", DbType.Int32, dojoMemberType.iD);
			// Abandon remaining updates if no rows have been updated by returning false immediately.
			if (database.ExecuteNonQuery(dbCommand) == 0) return -1;

			// Store dojoMemberType in cache.
			if (cacheEnabled) cacheStore(dojoMemberType);
			// ************************* WARNING **************************** 
			// Update operations must invalidate the cached collections.
			// Invalidation MUST invalidate any foreign cached collections that 
			// with children objects this manager provides or else the foreign 
			// caches retain invalidated and potentially corrupt data! 
			// NOTE:
			// NitroCast only allows collection caching on objects that do not 
			// have any children objects to minimize potential corruption. 
			// ************************* WARNING **************************** 

			invalidateCachedCollections();

			return dojoMemberType.iD;
		}

		#endregion

		#region Default NitroCast Fill Parameters Method

		private static void fillParameters(Database database, DbCommand dbCommand, DojoMemberType dojoMemberType)
		{
			#region Default

			addParameter(database, dbCommand, "@Name", DbType.String, dojoMemberType.name);
			addParameter(database, dbCommand, "@Description", DbType.String, dojoMemberType.description);
			addParameter(database, dbCommand, "@OrderNum", DbType.Int32, dojoMemberType.orderNum);

			#endregion

		}

		#endregion

		#region Parameters

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType)
		{
			database.AddInParameter(command, name, dbType);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value)
		{
			database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue)
		{
			if (value == null)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		private static void addParameter(Database database, DbCommand command,
			string name, DbType dbType, object value, object nullValue, object nullSubValue)
		{
			if (value == null || value == nullSubValue)
				database.AddInParameter(command, name, dbType, nullValue);
			else
				database.AddInParameter(command, name, dbType, value);
		}

		#endregion

		#region Default NitroCast Fill Method

		internal static bool _fill(DojoMemberType dojoMemberType)
		{
			// Clone item from cache.
			if(cacheEnabled)
			{
				object cachedObject = cacheFind(dojoMemberType.iD);
				if(cachedObject != null)
				{
					((DojoMemberType)cachedObject).CopyTo(dojoMemberType, true);
					return dojoMemberType.isSynced;
				}
			}

			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("SELECT ");
			query.Append(string.Join(",", InnerJoinFields));
			query.Append(" FROM kitTessen_MemberTypes WHERE DojoMemberTypeID=");
			query.Append(dojoMemberType.iD);
			query.Append(";");

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			IDataReader r = database.ExecuteReader(dbCommand);

			if(!r.Read())
			{
				throw(new Exception(string.Format("Cannot find DojoMemberTypeID '{0}'.", 
					dojoMemberType.iD)));
			}

			FillFromReader(dojoMemberType, r, 0, 1);

			// Microsoft DAAB still needs to have the reader closed.
			r.Close();

			// Store dojoMemberType in cache.
			if(cacheEnabled) cacheStore(dojoMemberType);

			return true;
		}

		#endregion

		#region Default NitroCast GetCollection Method

		public DojoMemberTypeCollection GetCollection(string whereClause, string sortClause)
		{
			return GetCollection(0, whereClause, sortClause);
		}

		public DojoMemberTypeCollection GetCollection(int topCount, string whereClause, string sortClause)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;
			IDataReader r;
			DojoMemberTypeCollection dojoMemberTypeCollection;
			int hashcode;

			// Cache Handling

			hashcode = 0;

			if(cacheEnabled)
			{
				hashcode = topCount.GetHashCode() + 
					whereClause.GetHashCode() +
					sortClause.GetHashCode() +
					tableName.GetHashCode();

				DojoMemberTypeCollection collection = cacheFindCollection(hashcode);
				if(collection != null)
				{
					return collection;
				}
			}


			query = new StringBuilder("SELECT ");

			if(topCount > 0)
			{
				query.Append("TOP ");
				query.Append(topCount);
				query.Append(" ");
			}

			foreach(string columnName in InnerJoinFields)
			{
				query.Append("DojoMemberType.");
				query.Append(columnName);
				query.Append(",");
			}

			//
			// Remove trailing comma
			//
			query.Length--;
			query.Append(" FROM kitTessen_MemberTypes AS DojoMemberType");
			//
			// Render where clause
			//
			if(whereClause != string.Empty)
			{
				query.Append(" WHERE ");
				query.Append(whereClause);
			}

			//
			// Render sort clause 
			//
			if(sortClause != string.Empty)
			{
				query.Append(" ORDER BY ");
				query.Append(sortClause);
			}

			//
			// Render final semicolon
			//
			query.Append(";");
			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			#if DEBUG

			try
			{
				r = database.ExecuteReader(dbCommand);
			}
			catch (Exception e)
			{
				string msg = e.Message;
				throw(new Exception(msg + " --- Query: " + query.ToString()));

			}
			#else

			r = database.ExecuteReader(dbCommand);

			#endif

			dojoMemberTypeCollection = new DojoMemberTypeCollection();

			while(r.Read())
			{
				DojoMemberType dojoMemberType = ParseFromReader(r, 0, 1);

				dojoMemberTypeCollection.Add(dojoMemberType);
			}

			// Microsoft DAAB still needs to close readers.
			r.Close();

			if(cacheEnabled)
			{
				cacheStoreCollection(hashcode, dojoMemberTypeCollection);
			}

			return dojoMemberTypeCollection;
		}

		#endregion

		#region Default NitroCast ParseFromReader Method

		public static DojoMemberType ParseFromReader(IDataReader r, int idOffset, int dataOffset)
		{
			DojoMemberType dojoMemberType = new DojoMemberType();
			FillFromReader(dojoMemberType, r, idOffset, dataOffset);
			return dojoMemberType;
		}

		#endregion

		#region Default NitroCast FillFromReader Method

		/// <summary>
		/// Fills the {0} from a OleIDataReader.
		/// </summary>
		public static void FillFromReader(DojoMemberType dojoMemberType, IDataReader r, int idOffset, int dataOffset)
		{
			dojoMemberType.iD = r.GetInt32(idOffset);
			dojoMemberType.isSynced = true;
			dojoMemberType.isPlaceHolder = false;

			dojoMemberType.name = r.GetString(0+dataOffset);
			dojoMemberType.description = r.GetString(1+dataOffset);
			dojoMemberType.orderNum = r.GetInt32(2+dataOffset);
		}

		#endregion

		#region Default NitroCast Delete Method

		internal static void _delete(int id)
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			query = new StringBuilder("DELETE FROM kitTessen_MemberTypes WHERE DojoMemberTypeID=");
			query.Append(id);
			query.Append(';');

			database = DatabaseFactory.CreateDatabase();
			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

			cacheRemove(id);
			// ************************* WARNING **************************** 
			// Insert operations must invalidate the cached collections.
			// Invalidation MUST invalidate any foreign cached collections that 
			// with children objects this manager provides or else the foreign 
			// caches retain invalidated and potentially corrupt data! 
			// NOTE:
			// NitroCast only allows collection caching on objects that do not 
			// have any children objects to minimize potential corruption. 
			invalidateCachedCollections();
		}

		#endregion

		#region Verify Table Methods

		public string VerifyTable(bool repair)
		{
			Database database;
			DbConnection dbConnection;
			DbCommand dbCommand;
			bool match;
			string[] restrictions1;
			StringBuilder msg;

			msg = new StringBuilder();
			restrictions1 = new string[] { null, null, tableName, null };

			database = DatabaseFactory.CreateDatabase();
			dbConnection = database.CreateConnection();
			dbConnection.Open();

			System.Data.DataTable schemaTable = dbConnection.GetSchema("Columns", restrictions1);

			// Loop through the join fields and columns in the
			// table schema to find which fields are missing.
			// Note that this search cannot use BinarySearch due
			// to the fact that JoinFields is unsorted.
			// A sorted JoinFields need not be used because this
			// method should be used sparingly.

			for(int i = 0; i <= JoinFields.GetUpperBound(0); i++)
			{
				match = false;
				foreach(System.Data.DataRow row in schemaTable.Rows)
				{
					if(JoinFields[i,0] == row[3].ToString())
					{
						match = true;
						break;
					}
				}
				if(!match)
				{
					if(repair)
					{
						dbCommand = database.GetSqlStringCommand("ALTER TABLE " + tableName + " ADD COLUMN " + JoinFields[i,0] + " " + JoinFields[i,1] + ";");
						database.ExecuteNonQuery(dbCommand);
						msg.AppendFormat("Added column '{0}'.", JoinFields[i,0]);
					}
					else
					{
						msg.AppendFormat("Missing column '{0}'.", JoinFields[i,0]);
					}
				}
			}

			dbConnection.Close();
			return msg.ToString();
		}

		#endregion

		#region Default NitroCast Create Table Methods

		public void CreateTable()
		{
			StringBuilder query;
			Database database;
			DbCommand dbCommand;

			database = DatabaseFactory.CreateDatabase();

			if (database.ConnectionStringWithoutCredentials.StartsWith("provider=microsoft.jet.oledb.4.0"))
			{
				// Microsoft Jet SQL
				query = new StringBuilder("CREATE TABLE kitTessen_MemberTypes ");
				query.Append(" (DojoMemberTypeID COUNTER(1,1) CONSTRAINT PK_kitTessen_MemberTypes PRIMARY KEY, " +
					"Name TEXT(75)," +
					"Description MEMO," +
					"OrderNum LONG);");
			}
			else
			{
				// Microsoft SQL Server
				query = new StringBuilder("CREATE TABLE kitTessen_MemberTypes ");
				query.Append(" (DojoMemberTypeID INT IDENTITY(1,1) CONSTRAINT PK_kitTessen_MemberTypes PRIMARY KEY, " +
					"Name NVARCHAR(75)," +
					"Description NTEXT," +
					"OrderNum INT);");
			}

			dbCommand = database.GetSqlStringCommand(query.ToString());
			database.ExecuteNonQuery(dbCommand);

		}

		#endregion

		#region Cache Methods

		private static void cacheStore(DojoMemberType dojoMemberType)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add("kitTessen_MemberTypes_" + dojoMemberType.iD.ToString(), dojoMemberType);
		}

		private static DojoMemberType cacheFind(int id)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData("kitTessen_MemberTypes_" + id.ToString());
			if(cachedObject == null)
				return null;
			return (DojoMemberType)cachedObject;
		}

		private static void cacheRemove(int id)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove("kitTessen_MemberTypes_" + id.ToString());
		}

		private void cacheStoreCollection(int hashCode, DojoMemberTypeCollection dojoMemberTypeCollection)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Add(tableName + "_Collection_" + hashCode.ToString(), dojoMemberTypeCollection);
		}

		private DojoMemberTypeCollection cacheFindCollection(int hashCode)
		{
			object cachedObject;
			CacheManager cache = CacheFactory.GetCacheManager();
			cachedObject = cache.GetData(tableName + "_Collection_" + hashCode.ToString());
			if(cachedObject == null)
				return null;
			return (DojoMemberTypeCollection)cachedObject;
		}

		private void cacheRemoveCollection(int hashCode)
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Remove(tableName + "_Collection_" + hashCode.ToString());
		}

		private static void invalidateCachedCollections()
		{
			CacheManager cache = CacheFactory.GetCacheManager();
			cache.Flush();
		}

		#endregion

		//--- Begin Custom Code ---

		//--- End Custom Code ---
	}
}

