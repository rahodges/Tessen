/* ********************************************************** *
 * AMNS NitroCast v1.0 Class ComponentArt Based Editor          *
 * Autogenerated by NitroCast © 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Data;
using System.Web.UI;
using System.ComponentModel;
using ComponentArt.Web.UI;
using System.Web.UI.WebControls;
using Amns.Rappahanock;

namespace Amns.Tessen.Web.UI.WebControls
{
    /// <summary>
    /// Default web editor for DojoMembershipTemplate.
    /// </summary>
    [ToolboxData("<{0}:DojoMembershipTemplateEditor runat=server></{0}:DojoMembershipTemplateEditor>")]
    public class DojoMembershipTemplateEditor : System.Web.UI.Control, INamingContainer
    {
        private int dojoMembershipTemplateID;
        private DojoMembershipTemplate obj;
        private bool loadFlag = false;
        private bool resetOnAdd;
        private bool editOnAdd;
        private string cssClass;

        protected ComponentArt.Web.UI.TabStrip tabstrip;
        protected ComponentArt.Web.UI.MultiPage multipage;
        protected Literal headerText;

        #region Private Control Fields for General Folder

        private TextBox tbName;
        private TextBox tbDescription;
        private TextBox tbOrderNum;
        private RequiredFieldValidator reqOrderNum;
        private RangeValidator rngOrderNum;
        private ComponentArt.Web.UI.ComboBox comboOrganization;
        private ComponentArt.Web.UI.ComboBox comboRootTemplate;
        private CheckBox cbIsPrimary;

        #endregion

        #region Private Control Fields for Fee_Schedule Folder

        private TextBox tbFee;
        private RequiredFieldValidator reqFee;
        private RangeValidator rngFee;
        private TextBox tbStartupFee;
        private RequiredFieldValidator reqStartupFee;
        private RangeValidator rngStartupFee;
        private TextBox tbProRateMonthA;
        private RequiredFieldValidator reqProRateMonthA;
        private RangeValidator rngProRateMonthA;
        private TextBox tbProRateDayA;
        private RequiredFieldValidator reqProRateDayA;
        private RangeValidator rngProRateDayA;
        private TextBox tbProRateFeeA;
        private RequiredFieldValidator reqProRateFeeA;
        private RangeValidator rngProRateFeeA;
        private ComponentArt.Web.UI.ComboBox comboProRateEndA;
        private TextBox tbProRateMonthB;
        private RequiredFieldValidator reqProRateMonthB;
        private RangeValidator rngProRateMonthB;
        private TextBox tbProRateDayB;
        private RequiredFieldValidator reqProRateDayB;
        private RangeValidator rngProRateDayB;
        private TextBox tbProRateFeeB;
        private RequiredFieldValidator reqProRateFeeB;
        private RangeValidator rngProRateFeeB;
        private ComponentArt.Web.UI.ComboBox comboProRateEndB;
        private TextBox tbProRateMonthC;
        private RequiredFieldValidator reqProRateMonthC;
        private RangeValidator rngProRateMonthC;
        private TextBox tbProRateDayC;
        private RequiredFieldValidator reqProRateDayC;
        private RangeValidator rngProRateDayC;
        private TextBox tbProRateFeeC;
        private RequiredFieldValidator reqProRateFeeC;
        private RangeValidator rngProRateFeeC;
        private ComponentArt.Web.UI.ComboBox comboProRateEndC;

        #endregion

        #region Private Control Fields for Requirements Folder

        private TextBox tbAgeYearsMax;
        private RequiredFieldValidator reqAgeYearsMax;
        private RangeValidator rngAgeYearsMax;
        private TextBox tbAgeYearsMin;
        private RequiredFieldValidator reqAgeYearsMin;
        private RangeValidator rngAgeYearsMin;
        private TextBox tbMemberForMin;
        private RequiredFieldValidator reqMemberForMin;
        private RangeValidator rngMemberForMin;
        private TextBox tbMemberForMax;
        private RequiredFieldValidator reqMemberForMax;
        private RangeValidator rngMemberForMax;
        private ComponentArt.Web.UI.ComboBox comboRankMin;
        private ComponentArt.Web.UI.ComboBox comboRankMax;
        private CheckBox cbPurchaseRequired;
        private CheckBox cbTestRequired;
        private CheckBox cbAttendanceRequired;

        #endregion

        #region Private Control Fields for Membership_Duration Folder

        private ComponentArt.Web.UI.ComboBox comboMembershipStart;
        private ComponentArt.Web.UI.ComboBox comboMembershipEnd;

        #endregion

        #region Private Control Fields for Rappahanock Folder

        private ComponentArt.Web.UI.ComboBox comboItem;
        private ComponentArt.Web.UI.ComboBox comboItemClass;

        #endregion

        private Button btOk;
        private Button btCancel;
        private Button btDelete;

        #region Public Control Properties

        [Bindable(true), Category("Data"), DefaultValue(0)]
        public int DojoMembershipTemplateID
        {
            get
            {
                return dojoMembershipTemplateID;
            }
            set
            {
                loadFlag = true;
                dojoMembershipTemplateID = value;
            }
        }

        [Bindable(true), Category("Behavior"), DefaultValue(false)]
        public bool ResetOnAdd
        {
            get
            {
                return resetOnAdd;
            }
            set
            {
                resetOnAdd = value;
            }
        }

        [Bindable(true), Category("Behavior"), DefaultValue(false)]
        public bool EditOnAdd
        {
            get
            {
                return editOnAdd;
            }
            set
            {
                editOnAdd = value;
            }
        }

        [Bindable(true), Category("Appearance"), DefaultValue("")]
        public string CssClass
        {
            get
            {
                return cssClass;
            }
            set
            {
                cssClass = value;
            }
        }

        #endregion

        protected override void CreateChildControls()
        {
            Panel container = new Panel();
            container.CssClass = this.CssClass;
            Controls.Add(container);
            Panel header = new Panel();
            header.CssClass = "pHead";
            container.Controls.Add(header);
            headerText = new Literal();
            header.Controls.Add(headerText);
            Panel content = new Panel();
            content.CssClass = "pContent";
            container.Controls.Add(content);
            #region Tab Strip

            tabstrip = new ComponentArt.Web.UI.TabStrip();

            // Create the DefaultTabLook instance and add it to the ItemLooks collection
            ComponentArt.Web.UI.ItemLook defaultTabLook = new ComponentArt.Web.UI.ItemLook();
            defaultTabLook.LookId = "DefaultTabLook";
            defaultTabLook.CssClass = "DefaultTab";
            defaultTabLook.HoverCssClass = "DefaultTabHover";
            defaultTabLook.LabelPaddingLeft = Unit.Parse("10");
            defaultTabLook.LabelPaddingRight = Unit.Parse("10");
            defaultTabLook.LabelPaddingTop = Unit.Parse("5");
            defaultTabLook.LabelPaddingBottom = Unit.Parse("4");
            defaultTabLook.LeftIconUrl = "tab_left_icon.gif";
            defaultTabLook.RightIconUrl = "tab_right_icon.gif";
            defaultTabLook.HoverLeftIconUrl = "hover_tab_left_icon.gif";
            defaultTabLook.HoverRightIconUrl = "hover_tab_right_icon.gif";
            defaultTabLook.LeftIconWidth = Unit.Parse("3");
            defaultTabLook.LeftIconHeight = Unit.Parse("21");
            defaultTabLook.RightIconWidth = Unit.Parse("3");
            defaultTabLook.RightIconHeight = Unit.Parse("21");
            tabstrip.ItemLooks.Add(defaultTabLook);

            // Create the SelectedTabLook instance and add it to the ItemLooks collection
            ComponentArt.Web.UI.ItemLook selectedTabLook = new ComponentArt.Web.UI.ItemLook();
            selectedTabLook.LookId = "SelectedTabLook";
            selectedTabLook.CssClass = "SelectedTab";
            selectedTabLook.LabelPaddingLeft = Unit.Parse("10");
            selectedTabLook.LabelPaddingRight = Unit.Parse("10");
            selectedTabLook.LabelPaddingTop = Unit.Parse("5");
            selectedTabLook.LabelPaddingBottom = Unit.Parse("4");
            selectedTabLook.LeftIconUrl = "selected_tab_left_icon.gif";
            selectedTabLook.RightIconUrl = "selected_tab_right_icon.gif";
            selectedTabLook.LeftIconWidth = Unit.Parse("3");
            selectedTabLook.LeftIconHeight = Unit.Parse("21");
            selectedTabLook.RightIconWidth = Unit.Parse("3");
            selectedTabLook.RightIconHeight = Unit.Parse("21");
            tabstrip.ItemLooks.Add(selectedTabLook);

            tabstrip.ID = this.ID + "_TabStrip";
            tabstrip.CssClass = "TopGroup";
            tabstrip.DefaultItemLookId = "DefaultTabLook";
            tabstrip.DefaultSelectedItemLookId = "SelectedTabLook";
            tabstrip.DefaultGroupTabSpacing = 1;
            tabstrip.ImagesBaseUrl = "tabstrip_images/";
            tabstrip.MultiPageId = this.ID + "_MultiPage";
            // tabstrip.EnableViewState = false;  // ComponentArt ComboBox does not yet work with ViewState off!
            content.Controls.Add(tabstrip);

            #endregion

            #region MultiPage

            multipage = new ComponentArt.Web.UI.MultiPage();
            multipage.ID = this.ID + "_MultiPage";
            multipage.CssClass = "MultiPage";
            // multipage.EnableViewState = false; // ComponentArt ComboBox does not yet work with ViewState off!
            content.Controls.Add(multipage);

            #endregion

            #region Child Controls for General Folder

            ComponentArt.Web.UI.PageView GeneralView = new ComponentArt.Web.UI.PageView();
            GeneralView.CssClass = "PageContent";
            multipage.PageViews.Add(GeneralView);

            TabStripTab GeneralTab = new TabStripTab();
            GeneralTab.Text = "General";
            GeneralTab.PageViewId = GeneralView.ID;
            tabstrip.Tabs.Add(GeneralTab);

            tbName = new TextBox();
            tbName.ID = "tbName";
            tbName.EnableViewState = false;
            registerControl(GeneralView, "Name", tbName);

            tbDescription = new TextBox();
            tbDescription.ID = "tbDescription";
            tbDescription.EnableViewState = false;
            registerControl(GeneralView, "Description", tbDescription);

            tbOrderNum = new TextBox();
            tbOrderNum.ID = "tbOrderNum";
            tbOrderNum.EnableViewState = false;
            reqOrderNum = new RequiredFieldValidator();
            reqOrderNum.ID = "reqOrderNum";
            reqOrderNum.ControlToValidate = tbOrderNum.ID;
            reqOrderNum.ErrorMessage = "*";
            reqOrderNum.Display = ValidatorDisplay.Dynamic;
            rngOrderNum = new RangeValidator();
            rngOrderNum.ID = "rngOrderNum";
            rngOrderNum.ControlToValidate = tbOrderNum.ID;
            rngOrderNum.ErrorMessage = "*";
            rngOrderNum.Display = ValidatorDisplay.Dynamic;
            rngOrderNum.Type = ValidationDataType.Integer;
            rngOrderNum.MinimumValue = "-2147483648";
            rngOrderNum.MaximumValue = "2147483647";
            registerControl(GeneralView, "OrderNum", tbOrderNum, reqOrderNum, rngOrderNum);

            comboOrganization = new ComponentArt.Web.UI.ComboBox();
            comboOrganization.ID = "comboOrganization";
            comboOrganization.CssClass = "comboBox";
            comboOrganization.HoverCssClass = "comboBoxHover";
            comboOrganization.FocusedCssClass = "comboBoxHover";
            comboOrganization.TextBoxCssClass = "comboTextBox";
            comboOrganization.DropDownCssClass = "comboDropDown";
            comboOrganization.ItemCssClass = "comboItem";
            comboOrganization.ItemHoverCssClass = "comboItemHover";
            comboOrganization.SelectedItemCssClass = "comboItemHover";
            comboOrganization.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboOrganization.DropImageUrl = "combobox_images/drop.gif";
            comboOrganization.Width = Unit.Pixel(300);
            // comboOrganization.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(GeneralView, "Organization", comboOrganization);

            comboRootTemplate = new ComponentArt.Web.UI.ComboBox();
            comboRootTemplate.ID = "comboRootTemplate";
            comboRootTemplate.CssClass = "comboBox";
            comboRootTemplate.HoverCssClass = "comboBoxHover";
            comboRootTemplate.FocusedCssClass = "comboBoxHover";
            comboRootTemplate.TextBoxCssClass = "comboTextBox";
            comboRootTemplate.DropDownCssClass = "comboDropDown";
            comboRootTemplate.ItemCssClass = "comboItem";
            comboRootTemplate.ItemHoverCssClass = "comboItemHover";
            comboRootTemplate.SelectedItemCssClass = "comboItemHover";
            comboRootTemplate.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboRootTemplate.DropImageUrl = "combobox_images/drop.gif";
            comboRootTemplate.Width = Unit.Pixel(300);
            // comboOrganization.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(GeneralView, "Root Template", comboRootTemplate);

            cbIsPrimary = new CheckBox();
            cbIsPrimary.ID = "cbIsPrimary";
            cbIsPrimary.EnableViewState = false;
            registerControl(GeneralView, "IsPrimary", cbIsPrimary);

            #endregion

            #region Child Controls for Fee Schedule Folder

            ComponentArt.Web.UI.PageView Fee_ScheduleView = new ComponentArt.Web.UI.PageView();
            Fee_ScheduleView.CssClass = "PageContent";
            multipage.PageViews.Add(Fee_ScheduleView);

            TabStripTab Fee_ScheduleTab = new TabStripTab();
            Fee_ScheduleTab.Text = "Fee Schedule";
            Fee_ScheduleTab.PageViewId = Fee_ScheduleView.ID;
            tabstrip.Tabs.Add(Fee_ScheduleTab);

            tbFee = new TextBox();
            tbFee.ID = "tbFee";
            tbFee.EnableViewState = false;
            reqFee = new RequiredFieldValidator();
            reqFee.ID = "reqFee";
            reqFee.ControlToValidate = tbFee.ID;
            reqFee.ErrorMessage = "*";
            reqFee.Display = ValidatorDisplay.Dynamic;
            rngFee = new RangeValidator();
            rngFee.ID = "rngFee";
            rngFee.ControlToValidate = tbFee.ID;
            rngFee.ErrorMessage = "*";
            rngFee.Display = ValidatorDisplay.Dynamic;
            rngFee.Type = ValidationDataType.Double;
            rngFee.MinimumValue = "0";
            rngFee.MaximumValue = "79228162514264337593543950335";
            registerControl(Fee_ScheduleView, "Fee", tbFee, reqFee, rngFee);

            tbStartupFee = new TextBox();
            tbStartupFee.ID = "tbStartupFee";
            tbStartupFee.EnableViewState = false;
            reqStartupFee = new RequiredFieldValidator();
            reqStartupFee.ID = "reqStartupFee";
            reqStartupFee.ControlToValidate = tbStartupFee.ID;
            reqStartupFee.ErrorMessage = "*";
            reqStartupFee.Display = ValidatorDisplay.Dynamic;
            rngStartupFee = new RangeValidator();
            rngStartupFee.ID = "rngStartupFee";
            rngStartupFee.ControlToValidate = tbStartupFee.ID;
            rngStartupFee.ErrorMessage = "*";
            rngStartupFee.Display = ValidatorDisplay.Dynamic;
            rngStartupFee.Type = ValidationDataType.Double;
            rngStartupFee.MinimumValue = "0";
            rngStartupFee.MaximumValue = "79228162514264337593543950335";
            registerControl(Fee_ScheduleView, "StartupFee", tbStartupFee, reqStartupFee, rngStartupFee);

            tbProRateMonthA = new TextBox();
            tbProRateMonthA.ID = "tbProRateMonthA";
            tbProRateMonthA.EnableViewState = false;
            reqProRateMonthA = new RequiredFieldValidator();
            reqProRateMonthA.ID = "reqProRateMonthA";
            reqProRateMonthA.ControlToValidate = tbProRateMonthA.ID;
            reqProRateMonthA.ErrorMessage = "*";
            reqProRateMonthA.Display = ValidatorDisplay.Dynamic;
            rngProRateMonthA = new RangeValidator();
            rngProRateMonthA.ID = "rngProRateMonthA";
            rngProRateMonthA.ControlToValidate = tbProRateMonthA.ID;
            rngProRateMonthA.ErrorMessage = "*";
            rngProRateMonthA.Display = ValidatorDisplay.Dynamic;
            rngProRateMonthA.Type = ValidationDataType.Integer;
            rngProRateMonthA.MinimumValue = "-2147483648";
            rngProRateMonthA.MaximumValue = "2147483647";
            registerControl(Fee_ScheduleView, "ProRateMonthA", tbProRateMonthA, reqProRateMonthA, rngProRateMonthA);

            tbProRateDayA = new TextBox();
            tbProRateDayA.ID = "tbProRateDayA";
            tbProRateDayA.EnableViewState = false;
            reqProRateDayA = new RequiredFieldValidator();
            reqProRateDayA.ID = "reqProRateDayA";
            reqProRateDayA.ControlToValidate = tbProRateDayA.ID;
            reqProRateDayA.ErrorMessage = "*";
            reqProRateDayA.Display = ValidatorDisplay.Dynamic;
            rngProRateDayA = new RangeValidator();
            rngProRateDayA.ID = "rngProRateDayA";
            rngProRateDayA.ControlToValidate = tbProRateDayA.ID;
            rngProRateDayA.ErrorMessage = "*";
            rngProRateDayA.Display = ValidatorDisplay.Dynamic;
            rngProRateDayA.Type = ValidationDataType.Integer;
            rngProRateDayA.MinimumValue = "-2147483648";
            rngProRateDayA.MaximumValue = "2147483647";
            registerControl(Fee_ScheduleView, "ProRateDayA", tbProRateDayA, reqProRateDayA, rngProRateDayA);

            tbProRateFeeA = new TextBox();
            tbProRateFeeA.ID = "tbProRateFeeA";
            tbProRateFeeA.EnableViewState = false;
            reqProRateFeeA = new RequiredFieldValidator();
            reqProRateFeeA.ID = "reqProRateFeeA";
            reqProRateFeeA.ControlToValidate = tbProRateFeeA.ID;
            reqProRateFeeA.ErrorMessage = "*";
            reqProRateFeeA.Display = ValidatorDisplay.Dynamic;
            rngProRateFeeA = new RangeValidator();
            rngProRateFeeA.ID = "rngProRateFeeA";
            rngProRateFeeA.ControlToValidate = tbProRateFeeA.ID;
            rngProRateFeeA.ErrorMessage = "*";
            rngProRateFeeA.Display = ValidatorDisplay.Dynamic;
            rngProRateFeeA.Type = ValidationDataType.Double;
            rngProRateFeeA.MinimumValue = "0";
            rngProRateFeeA.MaximumValue = "79228162514264337593543950335";
            registerControl(Fee_ScheduleView, "ProRateFeeA", tbProRateFeeA, reqProRateFeeA, rngProRateFeeA);

            comboProRateEndA = new ComponentArt.Web.UI.ComboBox();
            comboProRateEndA.ID = "comboProRateEndA";
            comboProRateEndA.CssClass = "comboBox";
            comboProRateEndA.HoverCssClass = "comboBoxHover";
            comboProRateEndA.FocusedCssClass = "comboBoxHover";
            comboProRateEndA.TextBoxCssClass = "comboTextBox";
            comboProRateEndA.DropDownCssClass = "comboDropDown";
            comboProRateEndA.ItemCssClass = "comboItem";
            comboProRateEndA.ItemHoverCssClass = "comboItemHover";
            comboProRateEndA.SelectedItemCssClass = "comboItemHover";
            comboProRateEndA.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboProRateEndA.DropImageUrl = "combobox_images/drop.gif";
            comboProRateEndA.Width = Unit.Pixel(300);
            comboProRateEndA.TextBoxEnabled = false;
            // comboProRateEndA.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(Fee_ScheduleView, "ProRateEndA", comboProRateEndA);

            tbProRateMonthB = new TextBox();
            tbProRateMonthB.ID = "tbProRateMonthB";
            tbProRateMonthB.EnableViewState = false;
            reqProRateMonthB = new RequiredFieldValidator();
            reqProRateMonthB.ID = "reqProRateMonthB";
            reqProRateMonthB.ControlToValidate = tbProRateMonthB.ID;
            reqProRateMonthB.ErrorMessage = "*";
            reqProRateMonthB.Display = ValidatorDisplay.Dynamic;
            rngProRateMonthB = new RangeValidator();
            rngProRateMonthB.ID = "rngProRateMonthB";
            rngProRateMonthB.ControlToValidate = tbProRateMonthB.ID;
            rngProRateMonthB.ErrorMessage = "*";
            rngProRateMonthB.Display = ValidatorDisplay.Dynamic;
            rngProRateMonthB.Type = ValidationDataType.Integer;
            rngProRateMonthB.MinimumValue = "-2147483648";
            rngProRateMonthB.MaximumValue = "2147483647";
            registerControl(Fee_ScheduleView, "ProRateMonthB", tbProRateMonthB, reqProRateMonthB, rngProRateMonthB);

            tbProRateDayB = new TextBox();
            tbProRateDayB.ID = "tbProRateDayB";
            tbProRateDayB.EnableViewState = false;
            reqProRateDayB = new RequiredFieldValidator();
            reqProRateDayB.ID = "reqProRateDayB";
            reqProRateDayB.ControlToValidate = tbProRateDayB.ID;
            reqProRateDayB.ErrorMessage = "*";
            reqProRateDayB.Display = ValidatorDisplay.Dynamic;
            rngProRateDayB = new RangeValidator();
            rngProRateDayB.ID = "rngProRateDayB";
            rngProRateDayB.ControlToValidate = tbProRateDayB.ID;
            rngProRateDayB.ErrorMessage = "*";
            rngProRateDayB.Display = ValidatorDisplay.Dynamic;
            rngProRateDayB.Type = ValidationDataType.Integer;
            rngProRateDayB.MinimumValue = "-2147483648";
            rngProRateDayB.MaximumValue = "2147483647";
            registerControl(Fee_ScheduleView, "ProRateDayB", tbProRateDayB, reqProRateDayB, rngProRateDayB);

            tbProRateFeeB = new TextBox();
            tbProRateFeeB.ID = "tbProRateFeeB";
            tbProRateFeeB.EnableViewState = false;
            reqProRateFeeB = new RequiredFieldValidator();
            reqProRateFeeB.ID = "reqProRateFeeB";
            reqProRateFeeB.ControlToValidate = tbProRateFeeB.ID;
            reqProRateFeeB.ErrorMessage = "*";
            reqProRateFeeB.Display = ValidatorDisplay.Dynamic;
            rngProRateFeeB = new RangeValidator();
            rngProRateFeeB.ID = "rngProRateFeeB";
            rngProRateFeeB.ControlToValidate = tbProRateFeeB.ID;
            rngProRateFeeB.ErrorMessage = "*";
            rngProRateFeeB.Display = ValidatorDisplay.Dynamic;
            rngProRateFeeB.Type = ValidationDataType.Double;
            rngProRateFeeB.MinimumValue = "0";
            rngProRateFeeB.MaximumValue = "79228162514264337593543950335";
            registerControl(Fee_ScheduleView, "ProRateFeeB", tbProRateFeeB, reqProRateFeeB, rngProRateFeeB);

            comboProRateEndB = new ComponentArt.Web.UI.ComboBox();
            comboProRateEndB.ID = "comboProRateEndB";
            comboProRateEndB.CssClass = "comboBox";
            comboProRateEndB.HoverCssClass = "comboBoxHover";
            comboProRateEndB.FocusedCssClass = "comboBoxHover";
            comboProRateEndB.TextBoxCssClass = "comboTextBox";
            comboProRateEndB.DropDownCssClass = "comboDropDown";
            comboProRateEndB.ItemCssClass = "comboItem";
            comboProRateEndB.ItemHoverCssClass = "comboItemHover";
            comboProRateEndB.SelectedItemCssClass = "comboItemHover";
            comboProRateEndB.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboProRateEndB.DropImageUrl = "combobox_images/drop.gif";
            comboProRateEndB.Width = Unit.Pixel(300);
            comboProRateEndB.TextBoxEnabled = false;
            // comboProRateEndB.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(Fee_ScheduleView, "ProRateEndB", comboProRateEndB);

            tbProRateMonthC = new TextBox();
            tbProRateMonthC.ID = "tbProRateMonthC";
            tbProRateMonthC.EnableViewState = false;
            reqProRateMonthC = new RequiredFieldValidator();
            reqProRateMonthC.ID = "reqProRateMonthC";
            reqProRateMonthC.ControlToValidate = tbProRateMonthC.ID;
            reqProRateMonthC.ErrorMessage = "*";
            reqProRateMonthC.Display = ValidatorDisplay.Dynamic;
            rngProRateMonthC = new RangeValidator();
            rngProRateMonthC.ID = "rngProRateMonthC";
            rngProRateMonthC.ControlToValidate = tbProRateMonthC.ID;
            rngProRateMonthC.ErrorMessage = "*";
            rngProRateMonthC.Display = ValidatorDisplay.Dynamic;
            rngProRateMonthC.Type = ValidationDataType.Integer;
            rngProRateMonthC.MinimumValue = "-2147483648";
            rngProRateMonthC.MaximumValue = "2147483647";
            registerControl(Fee_ScheduleView, "ProRateMonthC", tbProRateMonthC, reqProRateMonthC, rngProRateMonthC);

            tbProRateDayC = new TextBox();
            tbProRateDayC.ID = "tbProRateDayC";
            tbProRateDayC.EnableViewState = false;
            reqProRateDayC = new RequiredFieldValidator();
            reqProRateDayC.ID = "reqProRateDayC";
            reqProRateDayC.ControlToValidate = tbProRateDayC.ID;
            reqProRateDayC.ErrorMessage = "*";
            reqProRateDayC.Display = ValidatorDisplay.Dynamic;
            rngProRateDayC = new RangeValidator();
            rngProRateDayC.ID = "rngProRateDayC";
            rngProRateDayC.ControlToValidate = tbProRateDayC.ID;
            rngProRateDayC.ErrorMessage = "*";
            rngProRateDayC.Display = ValidatorDisplay.Dynamic;
            rngProRateDayC.Type = ValidationDataType.Integer;
            rngProRateDayC.MinimumValue = "-2147483648";
            rngProRateDayC.MaximumValue = "2147483647";
            registerControl(Fee_ScheduleView, "ProRateDayC", tbProRateDayC, reqProRateDayC, rngProRateDayC);

            tbProRateFeeC = new TextBox();
            tbProRateFeeC.ID = "tbProRateFeeC";
            tbProRateFeeC.EnableViewState = false;
            reqProRateFeeC = new RequiredFieldValidator();
            reqProRateFeeC.ID = "reqProRateFeeC";
            reqProRateFeeC.ControlToValidate = tbProRateFeeC.ID;
            reqProRateFeeC.ErrorMessage = "*";
            reqProRateFeeC.Display = ValidatorDisplay.Dynamic;
            rngProRateFeeC = new RangeValidator();
            rngProRateFeeC.ID = "rngProRateFeeC";
            rngProRateFeeC.ControlToValidate = tbProRateFeeC.ID;
            rngProRateFeeC.ErrorMessage = "*";
            rngProRateFeeC.Display = ValidatorDisplay.Dynamic;
            rngProRateFeeC.Type = ValidationDataType.Double;
            rngProRateFeeC.MinimumValue = "0";
            rngProRateFeeC.MaximumValue = "79228162514264337593543950335";
            registerControl(Fee_ScheduleView, "ProRateFeeC", tbProRateFeeC, reqProRateFeeC, rngProRateFeeC);

            comboProRateEndC = new ComponentArt.Web.UI.ComboBox();
            comboProRateEndC.ID = "comboProRateEndC";
            comboProRateEndC.CssClass = "comboBox";
            comboProRateEndC.HoverCssClass = "comboBoxHover";
            comboProRateEndC.FocusedCssClass = "comboBoxHover";
            comboProRateEndC.TextBoxCssClass = "comboTextBox";
            comboProRateEndC.DropDownCssClass = "comboDropDown";
            comboProRateEndC.ItemCssClass = "comboItem";
            comboProRateEndC.ItemHoverCssClass = "comboItemHover";
            comboProRateEndC.SelectedItemCssClass = "comboItemHover";
            comboProRateEndC.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboProRateEndC.DropImageUrl = "combobox_images/drop.gif";
            comboProRateEndC.Width = Unit.Pixel(300);
            comboProRateEndC.TextBoxEnabled = false;
            // comboProRateEndC.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(Fee_ScheduleView, "ProRateEndC", comboProRateEndC);

            #endregion

            #region Child Controls for Requirements Folder

            ComponentArt.Web.UI.PageView RequirementsView = new ComponentArt.Web.UI.PageView();
            RequirementsView.CssClass = "PageContent";
            multipage.PageViews.Add(RequirementsView);

            TabStripTab RequirementsTab = new TabStripTab();
            RequirementsTab.Text = "Requirements";
            RequirementsTab.PageViewId = RequirementsView.ID;
            tabstrip.Tabs.Add(RequirementsTab);

            tbAgeYearsMax = new TextBox();
            tbAgeYearsMax.ID = "tbAgeYearsMax";
            tbAgeYearsMax.EnableViewState = false;
            reqAgeYearsMax = new RequiredFieldValidator();
            reqAgeYearsMax.ID = "reqAgeYearsMax";
            reqAgeYearsMax.ControlToValidate = tbAgeYearsMax.ID;
            reqAgeYearsMax.ErrorMessage = "*";
            reqAgeYearsMax.Display = ValidatorDisplay.Dynamic;
            rngAgeYearsMax = new RangeValidator();
            rngAgeYearsMax.ID = "rngAgeYearsMax";
            rngAgeYearsMax.ControlToValidate = tbAgeYearsMax.ID;
            rngAgeYearsMax.ErrorMessage = "*";
            rngAgeYearsMax.Display = ValidatorDisplay.Dynamic;
            rngAgeYearsMax.Type = ValidationDataType.Integer;
            rngAgeYearsMax.MinimumValue = "-2147483648";
            rngAgeYearsMax.MaximumValue = "2147483647";
            registerControl(RequirementsView, "AgeYearsMax", tbAgeYearsMax, reqAgeYearsMax, rngAgeYearsMax);

            tbAgeYearsMin = new TextBox();
            tbAgeYearsMin.ID = "tbAgeYearsMin";
            tbAgeYearsMin.EnableViewState = false;
            reqAgeYearsMin = new RequiredFieldValidator();
            reqAgeYearsMin.ID = "reqAgeYearsMin";
            reqAgeYearsMin.ControlToValidate = tbAgeYearsMin.ID;
            reqAgeYearsMin.ErrorMessage = "*";
            reqAgeYearsMin.Display = ValidatorDisplay.Dynamic;
            rngAgeYearsMin = new RangeValidator();
            rngAgeYearsMin.ID = "rngAgeYearsMin";
            rngAgeYearsMin.ControlToValidate = tbAgeYearsMin.ID;
            rngAgeYearsMin.ErrorMessage = "*";
            rngAgeYearsMin.Display = ValidatorDisplay.Dynamic;
            rngAgeYearsMin.Type = ValidationDataType.Integer;
            rngAgeYearsMin.MinimumValue = "-2147483648";
            rngAgeYearsMin.MaximumValue = "2147483647";
            registerControl(RequirementsView, "Age years.", tbAgeYearsMin, reqAgeYearsMin, rngAgeYearsMin);

            tbMemberForMin = new TextBox();
            tbMemberForMin.ID = "tbMemberForMin";
            tbMemberForMin.EnableViewState = false;
            reqMemberForMin = new RequiredFieldValidator();
            reqMemberForMin.ID = "reqMemberForMin";
            reqMemberForMin.ControlToValidate = tbMemberForMin.ID;
            reqMemberForMin.ErrorMessage = "*";
            reqMemberForMin.Display = ValidatorDisplay.Dynamic;
            rngMemberForMin = new RangeValidator();
            rngMemberForMin.ID = "rngMemberForMin";
            rngMemberForMin.ControlToValidate = tbMemberForMin.ID;
            rngMemberForMin.ErrorMessage = "*";
            rngMemberForMin.Display = ValidatorDisplay.Dynamic;
            rngMemberForMin.Type = ValidationDataType.Integer;
            rngMemberForMin.MinimumValue = "-2147483648";
            rngMemberForMin.MaximumValue = "2147483647";
            registerControl(RequirementsView, "MemberForMin", tbMemberForMin, reqMemberForMin, rngMemberForMin);

            tbMemberForMax = new TextBox();
            tbMemberForMax.ID = "tbMemberForMax";
            tbMemberForMax.EnableViewState = false;
            reqMemberForMax = new RequiredFieldValidator();
            reqMemberForMax.ID = "reqMemberForMax";
            reqMemberForMax.ControlToValidate = tbMemberForMax.ID;
            reqMemberForMax.ErrorMessage = "*";
            reqMemberForMax.Display = ValidatorDisplay.Dynamic;
            rngMemberForMax = new RangeValidator();
            rngMemberForMax.ID = "rngMemberForMax";
            rngMemberForMax.ControlToValidate = tbMemberForMax.ID;
            rngMemberForMax.ErrorMessage = "*";
            rngMemberForMax.Display = ValidatorDisplay.Dynamic;
            rngMemberForMax.Type = ValidationDataType.Integer;
            rngMemberForMax.MinimumValue = "-2147483648";
            rngMemberForMax.MaximumValue = "2147483647";
            registerControl(RequirementsView, "MemberForMax", tbMemberForMax, reqMemberForMax, rngMemberForMax);

            comboRankMin = new ComponentArt.Web.UI.ComboBox();
            comboRankMin.ID = "comboRankMin";
            comboRankMin.CssClass = "comboBox";
            comboRankMin.HoverCssClass = "comboBoxHover";
            comboRankMin.FocusedCssClass = "comboBoxHover";
            comboRankMin.TextBoxCssClass = "comboTextBox";
            comboRankMin.DropDownCssClass = "comboDropDown";
            comboRankMin.ItemCssClass = "comboItem";
            comboRankMin.ItemHoverCssClass = "comboItemHover";
            comboRankMin.SelectedItemCssClass = "comboItemHover";
            comboRankMin.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboRankMin.DropImageUrl = "combobox_images/drop.gif";
            comboRankMin.Width = Unit.Pixel(300);
            // comboRankMin.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(RequirementsView, "RankMin", comboRankMin);

            comboRankMax = new ComponentArt.Web.UI.ComboBox();
            comboRankMax.ID = "comboRankMax";
            comboRankMax.CssClass = "comboBox";
            comboRankMax.HoverCssClass = "comboBoxHover";
            comboRankMax.FocusedCssClass = "comboBoxHover";
            comboRankMax.TextBoxCssClass = "comboTextBox";
            comboRankMax.DropDownCssClass = "comboDropDown";
            comboRankMax.ItemCssClass = "comboItem";
            comboRankMax.ItemHoverCssClass = "comboItemHover";
            comboRankMax.SelectedItemCssClass = "comboItemHover";
            comboRankMax.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboRankMax.DropImageUrl = "combobox_images/drop.gif";
            comboRankMax.Width = Unit.Pixel(300);
            // comboRankMax.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(RequirementsView, "RankMax", comboRankMax);

            cbPurchaseRequired = new CheckBox();
            cbPurchaseRequired.ID = "cbPurchaseRequired";
            cbPurchaseRequired.EnableViewState = false;
            registerControl(RequirementsView, "PurchaseRequired", cbPurchaseRequired);

            cbTestRequired = new CheckBox();
            cbTestRequired.ID = "cbTestRequired";
            cbTestRequired.EnableViewState = false;
            registerControl(RequirementsView, "TestRequired", cbTestRequired);

            cbAttendanceRequired = new CheckBox();
            cbAttendanceRequired.ID = "cbAttendanceRequired";
            cbAttendanceRequired.EnableViewState = false;
            registerControl(RequirementsView, "AttendanceRequired", cbAttendanceRequired);

            #endregion

            #region Child Controls for Membership Duration Folder

            ComponentArt.Web.UI.PageView Membership_DurationView = new ComponentArt.Web.UI.PageView();
            Membership_DurationView.CssClass = "PageContent";
            multipage.PageViews.Add(Membership_DurationView);

            TabStripTab Membership_DurationTab = new TabStripTab();
            Membership_DurationTab.Text = "Membership Duration";
            Membership_DurationTab.PageViewId = Membership_DurationView.ID;
            tabstrip.Tabs.Add(Membership_DurationTab);

            comboMembershipStart = new ComponentArt.Web.UI.ComboBox();
            comboMembershipStart.ID = "comboMembershipStart";
            comboMembershipStart.CssClass = "comboBox";
            comboMembershipStart.HoverCssClass = "comboBoxHover";
            comboMembershipStart.FocusedCssClass = "comboBoxHover";
            comboMembershipStart.TextBoxCssClass = "comboTextBox";
            comboMembershipStart.DropDownCssClass = "comboDropDown";
            comboMembershipStart.ItemCssClass = "comboItem";
            comboMembershipStart.ItemHoverCssClass = "comboItemHover";
            comboMembershipStart.SelectedItemCssClass = "comboItemHover";
            comboMembershipStart.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboMembershipStart.DropImageUrl = "combobox_images/drop.gif";
            comboMembershipStart.Width = Unit.Pixel(300);
            comboMembershipStart.TextBoxEnabled = false;
            // comboMembershipStart.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(Membership_DurationView, "MembershipStart", comboMembershipStart);

            comboMembershipEnd = new ComponentArt.Web.UI.ComboBox();
            comboMembershipEnd.ID = "comboMembershipEnd";
            comboMembershipEnd.CssClass = "comboBox";
            comboMembershipEnd.HoverCssClass = "comboBoxHover";
            comboMembershipEnd.FocusedCssClass = "comboBoxHover";
            comboMembershipEnd.TextBoxCssClass = "comboTextBox";
            comboMembershipEnd.DropDownCssClass = "comboDropDown";
            comboMembershipEnd.ItemCssClass = "comboItem";
            comboMembershipEnd.ItemHoverCssClass = "comboItemHover";
            comboMembershipEnd.SelectedItemCssClass = "comboItemHover";
            comboMembershipEnd.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboMembershipEnd.DropImageUrl = "combobox_images/drop.gif";
            comboMembershipEnd.Width = Unit.Pixel(300);
            comboMembershipEnd.TextBoxEnabled = false;
            // comboMembershipEnd.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(Membership_DurationView, "MembershipEnd", comboMembershipEnd);

            #endregion

            #region Child Controls for Rappahanock Folder

            ComponentArt.Web.UI.PageView RappahanockView = new ComponentArt.Web.UI.PageView();
            RappahanockView.CssClass = "PageContent";
            multipage.PageViews.Add(RappahanockView);

            TabStripTab RappahanockTab = new TabStripTab();
            RappahanockTab.Text = "Rappahanock";
            RappahanockTab.PageViewId = RappahanockView.ID;
            tabstrip.Tabs.Add(RappahanockTab);

            comboItem = new ComponentArt.Web.UI.ComboBox();
            comboItem.ID = "comboItem";
            comboItem.CssClass = "comboBox";
            comboItem.HoverCssClass = "comboBoxHover";
            comboItem.FocusedCssClass = "comboBoxHover";
            comboItem.TextBoxCssClass = "comboTextBox";
            comboItem.DropDownCssClass = "comboDropDown";
            comboItem.ItemCssClass = "comboItem";
            comboItem.ItemHoverCssClass = "comboItemHover";
            comboItem.SelectedItemCssClass = "comboItemHover";
            comboItem.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboItem.DropImageUrl = "combobox_images/drop.gif";
            comboItem.Width = Unit.Pixel(300);
            // comboItem.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(RappahanockView, "Item", comboItem);

            comboItemClass = new ComponentArt.Web.UI.ComboBox();
            comboItemClass.ID = "comboItemClass";
            comboItemClass.CssClass = "comboBox";
            comboItemClass.HoverCssClass = "comboBoxHover";
            comboItemClass.FocusedCssClass = "comboBoxHover";
            comboItemClass.TextBoxCssClass = "comboTextBox";
            comboItemClass.DropDownCssClass = "comboDropDown";
            comboItemClass.ItemCssClass = "comboItem";
            comboItemClass.ItemHoverCssClass = "comboItemHover";
            comboItemClass.SelectedItemCssClass = "comboItemHover";
            comboItemClass.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboItemClass.DropImageUrl = "combobox_images/drop.gif";
            comboItemClass.Width = Unit.Pixel(300);
            // comboItemClass.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(RappahanockView, "ItemClass", comboItemClass);

            #endregion

            Panel buttons = new Panel();
            buttons.CssClass = "pButtons";
            content.Controls.Add(buttons);

            btOk = new Button();
            btOk.Text = "OK";
            btOk.Width = Unit.Pixel(72);
            btOk.EnableViewState = false;
            btOk.Click += new EventHandler(ok_Click);
            buttons.Controls.Add(btOk);

            btCancel = new Button();
            btCancel.Text = "Cancel";
            btCancel.Width = Unit.Pixel(72);
            btCancel.EnableViewState = false;
            btCancel.CausesValidation = false;
            btCancel.Click += new EventHandler(cancel_Click);
            buttons.Controls.Add(btCancel);

            btDelete = new Button();
            btDelete.Text = "Delete";
            btDelete.Width = Unit.Pixel(72);
            btDelete.EnableViewState = false;
            btDelete.Click += new EventHandler(delete_Click);
            buttons.Controls.Add(btDelete);

            bind();
            ChildControlsCreated = true;
        }

        private void registerControl(ComponentArt.Web.UI.PageView pageView,
        string caption,
        params Control[] controls)
		{
			ControlCollection pageViewControls = pageView.Controls;
			pageViewControls.Add(new LiteralControl("<div class=\"inputrow\">"));
			pageViewControls.Add(new LiteralControl("<span class=\"inputlabel\">"));
			pageViewControls.Add(new LiteralControl(caption));
			pageViewControls.Add(new LiteralControl("</span><span class=\"inputfield\">"));
			foreach(Control control in controls)
				pageViewControls.Add(control);
			pageViewControls.Add(new LiteralControl("</span></div>"));
		}

        private void bind()
		{
			DojoOrganizationManager dojoOrganizationManager = new DojoOrganizationManager();
			DojoOrganizationCollection dojoOrganizationCollection = dojoOrganizationManager.GetCollection(string.Empty, string.Empty);
			foreach(DojoOrganization itemObject in dojoOrganizationCollection)
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = itemObject.Name;
				item.Value = itemObject.ID.ToString();
				comboOrganization.Items.Add(item);
			}

            DojoMembershipTemplateManager templateManager = new DojoMembershipTemplateManager();
            DojoMembershipTemplateCollection templates = templateManager.GetCollection(string.Empty, string.Empty);
            foreach (DojoMembershipTemplate itemObject in templates)
            {
                ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
                item.Text = itemObject.Name;
                item.Value = itemObject.ID.ToString();
                comboRootTemplate.Items.Add(item);
            }

			foreach(string name in Enum.GetNames(typeof(DojoMembershipDayType)))
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = name;
				item.Value = name;
				comboProRateEndA.Items.Add(item);
			}


			foreach(string name in Enum.GetNames(typeof(DojoMembershipDayType)))
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = name;
				item.Value = name;
				comboProRateEndB.Items.Add(item);
			}


			foreach(string name in Enum.GetNames(typeof(DojoMembershipDayType)))
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = name;
				item.Value = name;
				comboProRateEndC.Items.Add(item);
			}


			DojoRankManager dojoRankManager = new DojoRankManager();
			DojoRankCollection dojoRankCollection = dojoRankManager.GetCollection(string.Empty, string.Empty);
			foreach(DojoRank itemObject in dojoRankCollection)
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = itemObject.ToString();
				item.Value = itemObject.ID.ToString();
				comboRankMin.Items.Add(item);
			}


			foreach(DojoRank itemObject in dojoRankCollection)
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = itemObject.ToString();
				item.Value = itemObject.ID.ToString();
				comboRankMax.Items.Add(item);
			}


			foreach(string name in Enum.GetNames(typeof(DojoMembershipDayType)))
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = name;
				item.Value = name;
				comboMembershipStart.Items.Add(item);
			}


			foreach(string name in Enum.GetNames(typeof(DojoMembershipDayType)))
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = name;
				item.Value = name;
				comboMembershipEnd.Items.Add(item);
			}


			RHItemManager rHItemManager = new RHItemManager();
			RHItemCollection rHItemCollection = rHItemManager.GetCollection(string.Empty, string.Empty);
			foreach(RHItem itemObject in rHItemCollection)
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = itemObject.ToString();
				item.Value = itemObject.ID.ToString();
				comboItem.Items.Add(item);
			}


			RHClassManager rHClassManager = new RHClassManager();
			RHClassCollection rHClassCollection = rHClassManager.GetCollection(string.Empty, string.Empty);
			foreach(RHClass itemObject in rHClassCollection)
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = itemObject.ToString();
				item.Value = itemObject.ID.ToString();
				comboItemClass.Items.Add(item);
			}


		}

        #region Events

        protected void ok_Click(object sender, EventArgs e)
        {
            if (dojoMembershipTemplateID == 0)
                obj = new DojoMembershipTemplate();
            else
                obj = new DojoMembershipTemplate(dojoMembershipTemplateID);

            obj.Name = tbName.Text;
            obj.Description = tbDescription.Text;
            obj.OrderNum = int.Parse(tbOrderNum.Text);
            if (comboOrganization.SelectedItem != null)
            {
                obj.Organization = DojoOrganization.NewPlaceHolder(int.Parse(comboOrganization.SelectedValue));
            }
            else
            {
                obj.Organization = null;
            }
            if (comboRootTemplate.SelectedItem != null)
            {
                obj.RootTemplate = DojoMembershipTemplate.NewPlaceHolder(int.Parse(comboRootTemplate.SelectedValue));
            }
            else
            {
                obj.RootTemplate = null;
            }
            obj.IsPrimary = cbIsPrimary.Checked;
            obj.Fee = decimal.Parse(tbFee.Text);
            obj.StartupFee = decimal.Parse(tbStartupFee.Text);
            obj.ProRateMonthA = int.Parse(tbProRateMonthA.Text);
            obj.ProRateDayA = int.Parse(tbProRateDayA.Text);
            obj.ProRateFeeA = decimal.Parse(tbProRateFeeA.Text);
            if (comboProRateEndA.SelectedItem != null)
                obj.ProRateEndA = (DojoMembershipDayType)
                    Enum.Parse(typeof(DojoMembershipDayType), comboProRateEndA.SelectedItem.Value);
            obj.ProRateMonthB = int.Parse(tbProRateMonthB.Text);
            obj.ProRateDayB = int.Parse(tbProRateDayB.Text);
            obj.ProRateFeeB = decimal.Parse(tbProRateFeeB.Text);
            if (comboProRateEndB.SelectedItem != null)
                obj.ProRateEndB = (DojoMembershipDayType)
                    Enum.Parse(typeof(DojoMembershipDayType), comboProRateEndB.SelectedItem.Value);
            obj.ProRateMonthC = int.Parse(tbProRateMonthC.Text);
            obj.ProRateDayC = int.Parse(tbProRateDayC.Text);
            obj.ProRateFeeC = decimal.Parse(tbProRateFeeC.Text);
            if (comboProRateEndC.SelectedItem != null)
                obj.ProRateEndC = (DojoMembershipDayType)
                    Enum.Parse(typeof(DojoMembershipDayType), comboProRateEndC.SelectedItem.Value);
            obj.AgeYearsMax = int.Parse(tbAgeYearsMax.Text);
            obj.AgeYearsMin = int.Parse(tbAgeYearsMin.Text);
            obj.MemberForMin = int.Parse(tbMemberForMin.Text);
            obj.MemberForMax = int.Parse(tbMemberForMax.Text);
            if (comboRankMin.SelectedItem != null)
            {
                obj.RankMin = DojoRank.NewPlaceHolder(int.Parse(comboRankMin.SelectedValue));
            }
            else
            {
                obj.RankMin = null;
            }
            if (comboRankMax.SelectedItem != null)
            {
                obj.RankMax = DojoRank.NewPlaceHolder(int.Parse(comboRankMax.SelectedValue));
            }
            else
            {
                obj.RankMax = null;
            }
            obj.PurchaseRequired = cbPurchaseRequired.Checked;
            obj.TestRequired = cbTestRequired.Checked;
            obj.AttendanceRequired = cbAttendanceRequired.Checked;
            if (comboMembershipStart.SelectedItem != null)
                obj.MembershipStart = (DojoMembershipDayType)
                    Enum.Parse(typeof(DojoMembershipDayType), comboMembershipStart.SelectedItem.Value);
            if (comboMembershipEnd.SelectedItem != null)
                obj.MembershipEnd = (DojoMembershipDayType)
                    Enum.Parse(typeof(DojoMembershipDayType), comboMembershipEnd.SelectedItem.Value);
            if (comboItem.SelectedItem != null)
            {
                obj.Item = RHItem.NewPlaceHolder(int.Parse(comboItem.SelectedValue));
            }
            else
            {
                obj.Item = null;
            }
            if (comboItemClass.SelectedItem != null)
            {
                obj.ItemClass = RHClass.NewPlaceHolder(int.Parse(comboItemClass.SelectedValue));
            }
            else
            {
                obj.ItemClass = null;
            }
            if (editOnAdd)
                dojoMembershipTemplateID = obj.Save();
            else
                obj.Save();

            if (resetOnAdd)
            {
                DojoMembershipTemplate newObj = new DojoMembershipTemplate();
                tbName.Text = newObj.Name;
                tbDescription.Text = newObj.Description;
                tbOrderNum.Text = newObj.OrderNum.ToString();
                if (newObj.Organization != null)
                {
                    comboOrganization.Text = newObj.Organization.Name;
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboOrganization.Items)
                    {
                        if (item.Value == newObj.Organization.ID.ToString())
                        {
                            comboOrganization.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboOrganization.Text = string.Empty;
                    comboOrganization.SelectedItem = null;
                }
                if (newObj.RootTemplate != null)
                {
                    comboRootTemplate.Text = newObj.RootTemplate.Name;
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboRootTemplate.Items)
                    {
                        if (item.Value == newObj.RootTemplate.ID.ToString())
                        {
                            comboRootTemplate.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboRootTemplate.Text = string.Empty;
                    comboRootTemplate.SelectedItem = null;
                }
                cbIsPrimary.Checked = newObj.IsPrimary;
                tbFee.Text = newObj.Fee.ToString();
                tbStartupFee.Text = newObj.StartupFee.ToString();
                tbProRateMonthA.Text = newObj.ProRateMonthA.ToString();
                tbProRateDayA.Text = newObj.ProRateDayA.ToString();
                tbProRateFeeA.Text = newObj.ProRateFeeA.ToString();
                foreach (ComponentArt.Web.UI.ComboBoxItem item in comboProRateEndA.Items)
                    if (item.Value == newObj.ProRateEndA.ToString())
                    {
                        comboProRateEndA.SelectedItem = item;
                        break;
                    }
                tbProRateMonthB.Text = newObj.ProRateMonthB.ToString();
                tbProRateDayB.Text = newObj.ProRateDayB.ToString();
                tbProRateFeeB.Text = newObj.ProRateFeeB.ToString();
                foreach (ComponentArt.Web.UI.ComboBoxItem item in comboProRateEndB.Items)
                    if (item.Value == newObj.ProRateEndB.ToString())
                    {
                        comboProRateEndB.SelectedItem = item;
                        break;
                    }
                tbProRateMonthC.Text = newObj.ProRateMonthC.ToString();
                tbProRateDayC.Text = newObj.ProRateDayC.ToString();
                tbProRateFeeC.Text = newObj.ProRateFeeC.ToString();
                foreach (ComponentArt.Web.UI.ComboBoxItem item in comboProRateEndC.Items)
                    if (item.Value == newObj.ProRateEndC.ToString())
                    {
                        comboProRateEndC.SelectedItem = item;
                        break;
                    }
                tbAgeYearsMax.Text = newObj.AgeYearsMax.ToString();
                tbAgeYearsMin.Text = newObj.AgeYearsMin.ToString();
                tbMemberForMin.Text = newObj.MemberForMin.ToString();
                tbMemberForMax.Text = newObj.MemberForMax.ToString();
                if (newObj.RankMin != null)
                {
                    comboRankMin.Text = newObj.RankMin.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboRankMin.Items)
                    {
                        if (item.Value == newObj.RankMin.ID.ToString())
                        {
                            comboRankMin.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboRankMin.Text = string.Empty;
                    comboRankMin.SelectedItem = null;
                }
                if (newObj.RankMax != null)
                {
                    comboRankMax.Text = newObj.RankMax.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboRankMax.Items)
                    {
                        if (item.Value == newObj.RankMax.ID.ToString())
                        {
                            comboRankMax.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboRankMax.Text = string.Empty;
                    comboRankMax.SelectedItem = null;
                }
                cbPurchaseRequired.Checked = newObj.PurchaseRequired;
                cbTestRequired.Checked = newObj.TestRequired;
                cbAttendanceRequired.Checked = newObj.AttendanceRequired;
                foreach (ComponentArt.Web.UI.ComboBoxItem item in comboMembershipStart.Items)
                    if (item.Value == newObj.MembershipStart.ToString())
                    {
                        comboMembershipStart.SelectedItem = item;
                        break;
                    }
                foreach (ComponentArt.Web.UI.ComboBoxItem item in comboMembershipEnd.Items)
                    if (item.Value == newObj.MembershipEnd.ToString())
                    {
                        comboMembershipEnd.SelectedItem = item;
                        break;
                    }
                if (newObj.Item != null)
                {
                    comboItem.Text = newObj.Item.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboItem.Items)
                    {
                        if (item.Value == newObj.Item.ID.ToString())
                        {
                            comboItem.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboItem.Text = string.Empty;
                    comboItem.SelectedItem = null;
                }
                if (newObj.ItemClass != null)
                {
                    comboItemClass.Text = newObj.ItemClass.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboItemClass.Items)
                    {
                        if (item.Value == newObj.ItemClass.ID.ToString())
                        {
                            comboItemClass.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboItemClass.Text = string.Empty;
                    comboItemClass.SelectedItem = null;
                }
            }

            OnUpdated(EventArgs.Empty);
        }

        protected void cancel_Click(object sender, EventArgs e)
        {
            this.OnCancelled(EventArgs.Empty);
        }

        protected void delete_Click(object sender, EventArgs e)
        {
            this.OnDeleteClicked(EventArgs.Empty);
        }

        public event EventHandler Cancelled;
        protected virtual void OnCancelled(EventArgs e)
        {
            if (Cancelled != null)
                Cancelled(this, e);
        }

        public event EventHandler Updated;
        protected virtual void OnUpdated(EventArgs e)
        {
            if (Updated != null)
                Updated(this, e);
        }

        public event EventHandler DeleteClicked;
        protected virtual void OnDeleteClicked(EventArgs e)
        {
            if (DeleteClicked != null)
                DeleteClicked(this, e);
        }

        #endregion

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            EnsureChildControls(); // Necissary to catch events!
        }

        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);

            if (loadFlag)
            {
                if (dojoMembershipTemplateID > 0)
                {
                    obj = new DojoMembershipTemplate(dojoMembershipTemplateID);
                    headerText.Text = "Edit Membership Template - " + obj.ToString();
                }
                else if (dojoMembershipTemplateID <= 0)
                {
                    obj = new DojoMembershipTemplate();
                    headerText.Text = "Add Membership Template";
                }

                // Bind General Data
                tbName.Text = obj.Name;
                tbDescription.Text = obj.Description;
                tbOrderNum.Text = obj.OrderNum.ToString();
                if (obj.Organization != null)
                {
                    comboOrganization.Text = obj.Organization.Name;
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboOrganization.Items)
                    {
                        if (item.Value == obj.Organization.ID.ToString())
                        {
                            comboOrganization.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboOrganization.Text = string.Empty;
                    comboOrganization.SelectedItem = null;
                }
                if (obj.RootTemplate != null)
                {
                    comboRootTemplate.Text = obj.RootTemplate.Name;
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboRootTemplate.Items)
                    {
                        if (item.Value == obj.RootTemplate.ID.ToString())
                        {
                            comboRootTemplate.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboRootTemplate.Text = string.Empty;
                    comboRootTemplate.SelectedItem = null;
                }
                cbIsPrimary.Checked = obj.IsPrimary;

                // Bind Fee Schedule Data
                tbFee.Text = obj.Fee.ToString();
                tbStartupFee.Text = obj.StartupFee.ToString();
                tbProRateMonthA.Text = obj.ProRateMonthA.ToString();
                tbProRateDayA.Text = obj.ProRateDayA.ToString();
                tbProRateFeeA.Text = obj.ProRateFeeA.ToString();
                foreach (ComponentArt.Web.UI.ComboBoxItem item in comboProRateEndA.Items)
                    if (item.Value == obj.ProRateEndA.ToString())
                    {
                        comboProRateEndA.SelectedItem = item;
                        break;
                    }
                tbProRateMonthB.Text = obj.ProRateMonthB.ToString();
                tbProRateDayB.Text = obj.ProRateDayB.ToString();
                tbProRateFeeB.Text = obj.ProRateFeeB.ToString();
                foreach (ComponentArt.Web.UI.ComboBoxItem item in comboProRateEndB.Items)
                    if (item.Value == obj.ProRateEndB.ToString())
                    {
                        comboProRateEndB.SelectedItem = item;
                        break;
                    }
                tbProRateMonthC.Text = obj.ProRateMonthC.ToString();
                tbProRateDayC.Text = obj.ProRateDayC.ToString();
                tbProRateFeeC.Text = obj.ProRateFeeC.ToString();
                foreach (ComponentArt.Web.UI.ComboBoxItem item in comboProRateEndC.Items)
                    if (item.Value == obj.ProRateEndC.ToString())
                    {
                        comboProRateEndC.SelectedItem = item;
                        break;
                    }

                // Bind Requirements Data
                tbAgeYearsMax.Text = obj.AgeYearsMax.ToString();
                tbAgeYearsMin.Text = obj.AgeYearsMin.ToString();
                tbMemberForMin.Text = obj.MemberForMin.ToString();
                tbMemberForMax.Text = obj.MemberForMax.ToString();
                if (obj.RankMin != null)
                {
                    comboRankMin.Text = obj.RankMin.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboRankMin.Items)
                    {
                        if (item.Value == obj.RankMin.ID.ToString())
                        {
                            comboRankMin.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboRankMin.Text = string.Empty;
                    comboRankMin.SelectedItem = null;
                }
                if (obj.RankMax != null)
                {
                    comboRankMax.Text = obj.RankMax.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboRankMax.Items)
                    {
                        if (item.Value == obj.RankMax.ID.ToString())
                        {
                            comboRankMax.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboRankMax.Text = string.Empty;
                    comboRankMax.SelectedItem = null;
                }
                cbPurchaseRequired.Checked = obj.PurchaseRequired;
                cbTestRequired.Checked = obj.TestRequired;
                cbAttendanceRequired.Checked = obj.AttendanceRequired;

                // Bind Membership Duration Data
                foreach (ComponentArt.Web.UI.ComboBoxItem item in comboMembershipStart.Items)
                    if (item.Value == obj.MembershipStart.ToString())
                    {
                        comboMembershipStart.SelectedItem = item;
                        break;
                    }
                foreach (ComponentArt.Web.UI.ComboBoxItem item in comboMembershipEnd.Items)
                    if (item.Value == obj.MembershipEnd.ToString())
                    {
                        comboMembershipEnd.SelectedItem = item;
                        break;
                    }

                // Bind Rappahanock Data
                if (obj.Item != null)
                {
                    comboItem.Text = obj.Item.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboItem.Items)
                    {
                        if (item.Value == obj.Item.ID.ToString())
                        {
                            comboItem.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboItem.Text = string.Empty;
                    comboItem.SelectedItem = null;
                }
                if (obj.ItemClass != null)
                {
                    comboItemClass.Text = obj.ItemClass.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboItemClass.Items)
                    {
                        if (item.Value == obj.ItemClass.ID.ToString())
                        {
                            comboItemClass.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboItemClass.Text = string.Empty;
                    comboItemClass.SelectedItem = null;
                }
                tabstrip.SelectedTab = tabstrip.Tabs[0];
                multipage.SelectedIndex = 0;
            }
        }

        protected override void LoadViewState(object savedState)
        {
            if (savedState != null)
            {
                object[] myState = (object[])savedState;
                if (myState[0] != null)
                    base.LoadViewState(myState[0]);
                if (myState[1] != null)
                    dojoMembershipTemplateID = (int)myState[1];
            }
        }

        protected override object SaveViewState()
        {
            object baseState = base.SaveViewState();
            object[] myState = new object[2];
            myState[0] = baseState;
            myState[1] = dojoMembershipTemplateID;
            return myState;
        }
    }
}
