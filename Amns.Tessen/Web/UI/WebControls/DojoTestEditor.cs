/* ********************************************************** *
 * AMNS NitroCast v1.0 Class ComponentArt Based Editor          *
 * Autogenerated by NitroCast © 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Data;
using System.Web.UI;
using System.ComponentModel;
using ComponentArt.Web.UI;
using System.Web.UI.WebControls;
using Amns.GreyFox.People;
using Amns.Rappahanock;

namespace Amns.Tessen.Web.UI.WebControls
{
	/// <summary>
	/// Default web editor for DojoTest.
	/// </summary>
	[ToolboxData("<{0}:DojoTestEditor runat=server></{0}:DojoTestEditor>")]
	public class DojoTestEditor : System.Web.UI.Control, INamingContainer
	{
		private int dojoTestID;
		private DojoTest obj;
		private bool loadFlag = false;
		private bool resetOnAdd;
		private bool editOnAdd;
		private string cssClass;

		protected ComponentArt.Web.UI.TabStrip tabstrip;
		protected ComponentArt.Web.UI.MultiPage multipage;
		protected Literal headerText;

		#region Private Control Fields for Default Folder

		private TextBox tbName;
		private TextBox tbDescription;
		private TextBox tbTestDate;
		private RequiredFieldValidator reqTestDate;
		private RegularExpressionValidator revTestDate;
		private ComponentArt.Web.UI.ComboBox comboLocation;

		#endregion

		#region Private Control Fields for List_Generator Folder

		private ComponentArt.Web.UI.ComboBox comboListMemberType1;
		private ComponentArt.Web.UI.ComboBox comboListMemberType2;
		private ComponentArt.Web.UI.ComboBox comboListMemberType3;

		#endregion

		#region Private Control Fields for Administration Folder

		private DropDownList ddPanelChief;
        private TextBox tbPanelMembers;
		private ComponentArt.Web.UI.ComboBox comboPanelMembers;

		#endregion

		#region Private Control Fields for System Folder

		private ComponentArt.Web.UI.ComboBox comboStatus;
		private DropDownList ddActiveTestList;

		#endregion

		#region Private Control Fields for Rappahanock Folder

		private ComponentArt.Web.UI.ComboBox comboItem;

		#endregion

		private Button btOk;
		private Button btCancel;
		private Button btDelete;

		#region Public Control Properties

		[Bindable(true), Category("Data"), DefaultValue(0)]
		public int DojoTestID
		{
			get
			{
				return dojoTestID;
			}
			set
			{
				loadFlag = true;
				dojoTestID = value;
			}
		}

		[Bindable(true), Category("Behavior"), DefaultValue(false)]
		public bool ResetOnAdd
		{
			get
			{
				return resetOnAdd;
			}
			set
			{
				resetOnAdd = value;
			}
		}

		[Bindable(true), Category("Behavior"), DefaultValue(false)]
		public bool EditOnAdd
		{
			get
			{
				return editOnAdd;
			}
			set
			{
				editOnAdd = value;
			}
		}

		[Bindable(true), Category("Appearance"), DefaultValue("")]
		public string CssClass
		{
			get
			{
				return cssClass;
			}
			set
			{
				cssClass = value;
			}
		}

		#endregion

		protected override void CreateChildControls()
		{
			Panel container = new Panel();
			container.CssClass = this.CssClass;
			Controls.Add(container);
			Panel header = new Panel();
			header.CssClass = "pHead";
			container.Controls.Add(header);
			headerText = new Literal();
			header.Controls.Add(headerText);
			Panel content = new Panel();
			content.CssClass = "pContent";
			container.Controls.Add(content);
			#region Tab Strip

			tabstrip = new ComponentArt.Web.UI.TabStrip();

			// Create the DefaultTabLook instance and add it to the ItemLooks collection
			ComponentArt.Web.UI.ItemLook defaultTabLook = new ComponentArt.Web.UI.ItemLook();
			defaultTabLook.LookId = "DefaultTabLook";
			defaultTabLook.CssClass = "DefaultTab";
			defaultTabLook.HoverCssClass = "DefaultTabHover";
			defaultTabLook.LabelPaddingLeft = Unit.Parse("10");
			defaultTabLook.LabelPaddingRight = Unit.Parse("10");
			defaultTabLook.LabelPaddingTop = Unit.Parse("5");
			defaultTabLook.LabelPaddingBottom = Unit.Parse("4");
			defaultTabLook.LeftIconUrl = "tab_left_icon.gif";
			defaultTabLook.RightIconUrl = "tab_right_icon.gif";
			defaultTabLook.HoverLeftIconUrl = "hover_tab_left_icon.gif";
			defaultTabLook.HoverRightIconUrl = "hover_tab_right_icon.gif";
			defaultTabLook.LeftIconWidth = Unit.Parse("3");
			defaultTabLook.LeftIconHeight = Unit.Parse("21");
			defaultTabLook.RightIconWidth = Unit.Parse("3");
			defaultTabLook.RightIconHeight = Unit.Parse("21");
			tabstrip.ItemLooks.Add(defaultTabLook);

			// Create the SelectedTabLook instance and add it to the ItemLooks collection
			ComponentArt.Web.UI.ItemLook selectedTabLook = new ComponentArt.Web.UI.ItemLook();
			selectedTabLook.LookId = "SelectedTabLook";
			selectedTabLook.CssClass = "SelectedTab";
			selectedTabLook.LabelPaddingLeft = Unit.Parse("10");
			selectedTabLook.LabelPaddingRight = Unit.Parse("10");
			selectedTabLook.LabelPaddingTop = Unit.Parse("5");
			selectedTabLook.LabelPaddingBottom = Unit.Parse("4");
			selectedTabLook.LeftIconUrl = "selected_tab_left_icon.gif";
			selectedTabLook.RightIconUrl = "selected_tab_right_icon.gif";
			selectedTabLook.LeftIconWidth = Unit.Parse("3");
			selectedTabLook.LeftIconHeight = Unit.Parse("21");
			selectedTabLook.RightIconWidth = Unit.Parse("3");
			selectedTabLook.RightIconHeight = Unit.Parse("21");
			tabstrip.ItemLooks.Add(selectedTabLook);

			tabstrip.ID = this.ID + "_TabStrip";
			tabstrip.CssClass = "TopGroup";
			tabstrip.DefaultItemLookId = "DefaultTabLook";
			tabstrip.DefaultSelectedItemLookId = "SelectedTabLook";
			tabstrip.DefaultGroupTabSpacing = 1;
			tabstrip.ImagesBaseUrl = "tabstrip_images/";
			tabstrip.MultiPageId = this.ID + "_MultiPage";
			// tabstrip.EnableViewState = false;  // ComponentArt ComboBox does not yet work with ViewState off!
			content.Controls.Add(tabstrip);

			#endregion

			#region MultiPage

			multipage = new ComponentArt.Web.UI.MultiPage();
			multipage.ID = this.ID + "_MultiPage";
			multipage.CssClass = "MultiPage";
			// multipage.EnableViewState = false; // ComponentArt ComboBox does not yet work with ViewState off!
			content.Controls.Add(multipage);

			#endregion

			#region Child Controls for Default Folder

			ComponentArt.Web.UI.PageView DefaultView = new ComponentArt.Web.UI.PageView();
			DefaultView.CssClass = "PageContent";
			multipage.PageViews.Add(DefaultView);

			TabStripTab DefaultTab = new TabStripTab();
			DefaultTab.Text = "Default";
			DefaultTab.PageViewId = DefaultView.ID;
			tabstrip.Tabs.Add(DefaultTab);

			tbName = new TextBox();
			tbName.ID = "tbName";
			tbName.EnableViewState = false;
			registerControl(DefaultView, "Name", tbName);

			tbDescription = new TextBox();
			tbDescription.ID = "tbDescription";
			tbDescription.EnableViewState = false;
			registerControl(DefaultView, "Description", tbDescription);

			tbTestDate = new TextBox();
			tbTestDate.ID = "tbTestDate";
			tbTestDate.EnableViewState = false;
			reqTestDate = new RequiredFieldValidator();
			reqTestDate.ID = "reqTestDate";
			reqTestDate.ControlToValidate = tbTestDate.ID;
			reqTestDate.ErrorMessage = "*";
			reqTestDate.Display = ValidatorDisplay.Dynamic;
			revTestDate = new RegularExpressionValidator();
            revTestDate.ID = "revTestDate";
            revTestDate.ControlToValidate = tbTestDate.ID;
            revTestDate.ErrorMessage = "*";
            revTestDate.Display = ValidatorDisplay.Dynamic;
            revTestDate.ValidationExpression = @"^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d(?:(?=\x20\d)\x20|$))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$";
            registerControl(DefaultView, "Test Date", tbTestDate, reqTestDate, revTestDate);

			comboLocation = new ComponentArt.Web.UI.ComboBox();
			comboLocation.ID = "comboLocation";
            comboLocation.CssClass = "comboBox";
			comboLocation.HoverCssClass = "comboBoxHover";
			comboLocation.FocusedCssClass = "comboBoxHover";
			comboLocation.TextBoxCssClass = "comboTextBox";
			comboLocation.DropDownCssClass = "comboDropDown";
			comboLocation.ItemCssClass = "comboItem";
			comboLocation.ItemHoverCssClass = "comboItemHover";
			comboLocation.SelectedItemCssClass = "comboItemHover";
			comboLocation.DropHoverImageUrl = "combobox_images/drop_hover.gif";
			comboLocation.DropImageUrl = "combobox_images/drop.gif";
			comboLocation.Width = Unit.Pixel(300);
			// comboLocation.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
			registerControl(DefaultView, "Location", comboLocation);

			#endregion

			#region Child Controls for List Generator Folder

			ComponentArt.Web.UI.PageView List_GeneratorView = new ComponentArt.Web.UI.PageView();
			List_GeneratorView.CssClass = "PageContent";
			multipage.PageViews.Add(List_GeneratorView);

			TabStripTab List_GeneratorTab = new TabStripTab();
			List_GeneratorTab.Text = "List Generator";
			List_GeneratorTab.PageViewId = List_GeneratorView.ID;
			tabstrip.Tabs.Add(List_GeneratorTab);

			comboListMemberType1 = new ComponentArt.Web.UI.ComboBox();
			comboListMemberType1.ID = "comboListMemberType1";
            comboListMemberType1.CssClass = "comboBox";
			comboListMemberType1.HoverCssClass = "comboBoxHover";
			comboListMemberType1.FocusedCssClass = "comboBoxHover";
			comboListMemberType1.TextBoxCssClass = "comboTextBox";
			comboListMemberType1.DropDownCssClass = "comboDropDown";
			comboListMemberType1.ItemCssClass = "comboItem";
			comboListMemberType1.ItemHoverCssClass = "comboItemHover";
			comboListMemberType1.SelectedItemCssClass = "comboItemHover";
			comboListMemberType1.DropHoverImageUrl = "combobox_images/drop_hover.gif";
			comboListMemberType1.DropImageUrl = "combobox_images/drop.gif";
			comboListMemberType1.Width = Unit.Pixel(300);
			// comboListMemberType1.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
			registerControl(List_GeneratorView, "ListMemberType1", comboListMemberType1);

			comboListMemberType2 = new ComponentArt.Web.UI.ComboBox();
			comboListMemberType2.ID = "comboListMemberType2";
            comboListMemberType2.CssClass = "comboBox";
			comboListMemberType2.HoverCssClass = "comboBoxHover";
			comboListMemberType2.FocusedCssClass = "comboBoxHover";
			comboListMemberType2.TextBoxCssClass = "comboTextBox";
			comboListMemberType2.DropDownCssClass = "comboDropDown";
			comboListMemberType2.ItemCssClass = "comboItem";
			comboListMemberType2.ItemHoverCssClass = "comboItemHover";
			comboListMemberType2.SelectedItemCssClass = "comboItemHover";
			comboListMemberType2.DropHoverImageUrl = "combobox_images/drop_hover.gif";
			comboListMemberType2.DropImageUrl = "combobox_images/drop.gif";
			comboListMemberType2.Width = Unit.Pixel(300);
			// comboListMemberType2.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
			registerControl(List_GeneratorView, "ListMemberType2", comboListMemberType2);

			comboListMemberType3 = new ComponentArt.Web.UI.ComboBox();
			comboListMemberType3.ID = "comboListMemberType3";
            comboListMemberType3.CssClass = "comboBox";
			comboListMemberType3.HoverCssClass = "comboBoxHover";
			comboListMemberType3.FocusedCssClass = "comboBoxHover";
			comboListMemberType3.TextBoxCssClass = "comboTextBox";
			comboListMemberType3.DropDownCssClass = "comboDropDown";
			comboListMemberType3.ItemCssClass = "comboItem";
			comboListMemberType3.ItemHoverCssClass = "comboItemHover";
			comboListMemberType3.SelectedItemCssClass = "comboItemHover";
			comboListMemberType3.DropHoverImageUrl = "combobox_images/drop_hover.gif";
			comboListMemberType3.DropImageUrl = "combobox_images/drop.gif";
			comboListMemberType3.Width = Unit.Pixel(300);
			// comboListMemberType3.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
			registerControl(List_GeneratorView, "ListMemberType3", comboListMemberType3);

			#endregion

			#region Child Controls for Administration Folder

			ComponentArt.Web.UI.PageView AdministrationView = new ComponentArt.Web.UI.PageView();
			AdministrationView.CssClass = "PageContent";
			multipage.PageViews.Add(AdministrationView);

			TabStripTab AdministrationTab = new TabStripTab();
			AdministrationTab.Text = "Administration";
			AdministrationTab.PageViewId = AdministrationView.ID;
			tabstrip.Tabs.Add(AdministrationTab);

			ddPanelChief = new DropDownList();
			ddPanelChief.ID = "ddPanelChief";
			ddPanelChief.EnableViewState = false;
			registerControl(AdministrationView, "PanelChief", ddPanelChief);

			tbPanelMembers = new TextBox();
			tbPanelMembers.ID = "tbPanelMembers";
			tbPanelMembers.EnableViewState = false;
			tbPanelMembers.Rows = 10;
			tbPanelMembers.MaxLength = 1500;
			tbPanelMembers.TextMode = TextBoxMode.MultiLine;
			tbPanelMembers.Width = Unit.Pixel(350);
			registerControl(AdministrationView, "PanelMembers", tbPanelMembers);
			Panel PanelMembersPanel = new Panel();
			PanelMembersPanel.Controls.Add(new LiteralControl("<div style=\"float:left\">"));
			comboPanelMembers = new ComponentArt.Web.UI.ComboBox();
            comboPanelMembers.ID = "comboPanelMembers";
            comboPanelMembers.CssClass = "comboBox";
			comboPanelMembers.HoverCssClass = "comboBoxHover";
			comboPanelMembers.FocusedCssClass = "comboBoxHover";
			comboPanelMembers.TextBoxCssClass = "comboTextBox";
			comboPanelMembers.DropDownCssClass = "comboDropDown";
			comboPanelMembers.ItemCssClass = "comboItem";
			comboPanelMembers.ItemHoverCssClass = "comboItemHover";
			comboPanelMembers.SelectedItemCssClass = "comboItemHover";
			comboPanelMembers.DropHoverImageUrl = "combobox_images/drop_hover.gif";
			comboPanelMembers.DropImageUrl = "combobox_images/drop.gif";
			comboPanelMembers.Width = Unit.Pixel(300);
			// comboPanelMembers.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
			PanelMembersPanel.Controls.Add(comboPanelMembers);
			PanelMembersPanel.Controls.Add(new LiteralControl("</div><div><input type=\"button\" value=\"Add\" " +
				"align=\"right\" onClick=\"" +
				tbPanelMembers.ClientID + ".value += (" + tbPanelMembers.ClientID + ".value != '' ? '\\r\\n' : '') + " +
				comboPanelMembers.ClientObjectId + ".getSelectedItem().Text;\"></div>"));
            registerControl(AdministrationView, "&nbsp;", PanelMembersPanel);
			registerControl(AdministrationView, "&nbsp;", new LiteralControl("Select the members that are serving on the panel. These members can vote on candidates."));

			#endregion

			#region Child Controls for System Folder

			ComponentArt.Web.UI.PageView SystemView = new ComponentArt.Web.UI.PageView();
			SystemView.CssClass = "PageContent";
			multipage.PageViews.Add(SystemView);

			TabStripTab SystemTab = new TabStripTab();
			SystemTab.Text = "System";
			SystemTab.PageViewId = SystemView.ID;
			tabstrip.Tabs.Add(SystemTab);

			comboStatus = new ComponentArt.Web.UI.ComboBox();
			comboStatus.ID = "comboStatus";
            comboStatus.CssClass = "comboBox";
			comboStatus.HoverCssClass = "comboBoxHover";
			comboStatus.FocusedCssClass = "comboBoxHover";
			comboStatus.TextBoxCssClass = "comboTextBox";
			comboStatus.DropDownCssClass = "comboDropDown";
			comboStatus.ItemCssClass = "comboItem";
			comboStatus.ItemHoverCssClass = "comboItemHover";
			comboStatus.SelectedItemCssClass = "comboItemHover";
			comboStatus.DropHoverImageUrl = "combobox_images/drop_hover.gif";
			comboStatus.DropImageUrl = "combobox_images/drop.gif";
			comboStatus.Width = Unit.Pixel(300);
			// comboStatus.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
			registerControl(SystemView, "Status", comboStatus);

			ddActiveTestList = new DropDownList();
			ddActiveTestList.ID = "ddActiveTestList";
			ddActiveTestList.EnableViewState = false;
			registerControl(SystemView, "ActiveTestList", ddActiveTestList);

			#endregion

			#region Child Controls for Rappahanock Folder

			ComponentArt.Web.UI.PageView RappahanockView = new ComponentArt.Web.UI.PageView();
			RappahanockView.CssClass = "PageContent";
			multipage.PageViews.Add(RappahanockView);

			TabStripTab RappahanockTab = new TabStripTab();
			RappahanockTab.Text = "Rappahanock";
			RappahanockTab.PageViewId = RappahanockView.ID;
			tabstrip.Tabs.Add(RappahanockTab);

			comboItem = new ComponentArt.Web.UI.ComboBox();
			comboItem.ID = "comboItem";
            comboItem.CssClass = "comboBox";
			comboItem.HoverCssClass = "comboBoxHover";
			comboItem.FocusedCssClass = "comboBoxHover";
			comboItem.TextBoxCssClass = "comboTextBox";
			comboItem.DropDownCssClass = "comboDropDown";
			comboItem.ItemCssClass = "comboItem";
			comboItem.ItemHoverCssClass = "comboItemHover";
			comboItem.SelectedItemCssClass = "comboItemHover";
			comboItem.DropHoverImageUrl = "combobox_images/drop_hover.gif";
			comboItem.DropImageUrl = "combobox_images/drop.gif";
			comboItem.Width = Unit.Pixel(300);
			// comboItem.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
			registerControl(RappahanockView, "Item", comboItem);

			#endregion

			Panel buttons = new Panel();
			buttons.CssClass = "pButtons";
			content.Controls.Add(buttons);

			btOk = new Button();
			btOk.Text = "OK";
			btOk.Width = Unit.Pixel(72);
			btOk.EnableViewState = false;
			btOk.Click += new EventHandler(ok_Click);
			buttons.Controls.Add(btOk);

			btCancel = new Button();
			btCancel.Text = "Cancel";
			btCancel.Width = Unit.Pixel(72);
			btCancel.EnableViewState = false;
			btCancel.CausesValidation = false;
			btCancel.Click += new EventHandler(cancel_Click);
			buttons.Controls.Add(btCancel);

			btDelete = new Button();
			btDelete.Text = "Delete";
			btDelete.Width = Unit.Pixel(72);
			btDelete.EnableViewState = false;
			btDelete.Click += new EventHandler(delete_Click);
			buttons.Controls.Add(btDelete);

				bind();
			ChildControlsCreated = true;
		}

		private void registerControl(ComponentArt.Web.UI.PageView pageView,
		string caption,
		params Control[] controls)
		{
			ControlCollection pageViewControls = pageView.Controls;
			pageViewControls.Add(new LiteralControl("<div class=\"inputrow\">"));
			pageViewControls.Add(new LiteralControl("<span class=\"inputlabel\">"));
			pageViewControls.Add(new LiteralControl(caption));
			pageViewControls.Add(new LiteralControl("</span><span class=\"inputfield\">"));
			foreach(Control control in controls)
				pageViewControls.Add(control);
			pageViewControls.Add(new LiteralControl("</span></div>"));
		}

		private void bind()
		{
			GreyFoxContactManager locationManager = new GreyFoxContactManager("kitTessen_Locations");
			GreyFoxContactCollection locationCollection = locationManager.GetCollection(string.Empty, string.Empty);
			foreach(GreyFoxContact itemObject in locationCollection)
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = itemObject.BusinessName;
				item.Value = itemObject.ID.ToString();
				comboLocation.Items.Add(item);
			}


			DojoMemberTypeManager dojoMemberTypeManager = new DojoMemberTypeManager();
			DojoMemberTypeCollection dojoMemberTypeCollection = dojoMemberTypeManager.GetCollection(string.Empty, string.Empty);
			foreach(DojoMemberType itemObject in dojoMemberTypeCollection)
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = itemObject.Name;
				item.Value = itemObject.ID.ToString();
				comboListMemberType1.Items.Add(item);
			}


			foreach(DojoMemberType itemObject in dojoMemberTypeCollection)
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = itemObject.Name;
				item.Value = itemObject.ID.ToString();
				comboListMemberType2.Items.Add(item);
			}


			foreach(DojoMemberType itemObject in dojoMemberTypeCollection)
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = itemObject.Name;
				item.Value = itemObject.ID.ToString();
				comboListMemberType3.Items.Add(item);
			}


			DojoMemberManager dojoMemberManager = new DojoMemberManager();
			DojoMemberCollection dojoMemberCollection = dojoMemberManager.GetCollection(
                "UserAccountID IS NOT NULL", string.Empty);
			ddPanelChief.Items.Add(new ListItem("             ", "null"));
			foreach(DojoMember itemObject in dojoMemberCollection)
				ddPanelChief.Items.Add(new ListItem(itemObject.ToString(), itemObject.ID.ToString()));

            foreach(DojoMember itemObject in dojoMemberCollection)
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
                item.Text = itemObject.UserAccount.UserName;
				item.Value = itemObject.ID.ToString();
				comboPanelMembers.Items.Add(item);
			}


			DojoTestListStatusManager dojoTestListStatusManager = new DojoTestListStatusManager();
			DojoTestListStatusCollection dojoTestListStatusCollection = dojoTestListStatusManager.GetCollection(string.Empty, string.Empty);
			foreach(DojoTestListStatus itemObject in dojoTestListStatusCollection)
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = itemObject.ToString();
				item.Value = itemObject.ID.ToString();
				comboStatus.Items.Add(item);
			}


			DojoTestListManager dojoTestListManager = new DojoTestListManager();
			DojoTestListCollection dojoTestListCollection = dojoTestListManager.GetCollection(string.Empty, string.Empty);
			ddActiveTestList.Items.Add(new ListItem("             ", "null"));
			foreach(DojoTestList itemObject in dojoTestListCollection)
				ddActiveTestList.Items.Add(new ListItem(itemObject.ToString(), itemObject.ID.ToString()));


			RHItemManager rHItemManager = new RHItemManager();
			RHItemCollection rHItemCollection = rHItemManager.GetCollection(string.Empty, string.Empty);
			foreach(RHItem itemObject in rHItemCollection)
			{
				ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
				item.Text = itemObject.ToString();
				item.Value = itemObject.ID.ToString();
				comboItem.Items.Add(item);
			}


		}

		#region Events

		protected void ok_Click(object sender, EventArgs e)
		{
			if(dojoTestID == 0)
				obj = new DojoTest();
			else
				obj = new DojoTest(dojoTestID);

			obj.Name = tbName.Text;
			obj.Description = tbDescription.Text;
			obj.TestDate = DateTime.Parse(tbTestDate.Text);
			if(comboLocation.SelectedItem != null)
			{
                obj.Location = GreyFoxContact.NewPlaceHolder("kitTessen_Locations", int.Parse(comboLocation.SelectedValue));
			}
			else
			{
				obj.Location = null;
			}
			if(comboListMemberType1.SelectedItem != null)
			{
				obj.ListMemberType1 = DojoMemberType.NewPlaceHolder(int.Parse(comboListMemberType1.SelectedValue));
			}
			else
			{
				obj.ListMemberType1 = null;
			}
			if(comboListMemberType2.SelectedItem != null)
			{
				obj.ListMemberType2 = DojoMemberType.NewPlaceHolder(int.Parse(comboListMemberType2.SelectedValue));
			}
			else
			{
				obj.ListMemberType2 = null;
			}
			if(comboListMemberType3.SelectedItem != null)
			{
				obj.ListMemberType3 = DojoMemberType.NewPlaceHolder(int.Parse(comboListMemberType3.SelectedValue));
			}
			else
			{
				obj.ListMemberType3 = null;
			}
			if(ddPanelChief.SelectedItem != null && ddPanelChief.SelectedValue != "null")
			{
				obj.PanelChief = DojoMember.NewPlaceHolder(int.Parse(ddPanelChief.SelectedValue));
			}
			else
			{
				obj.PanelChief = null;
			}
			DojoMemberManager panelMembersManager = new DojoMemberManager();
			obj.PanelMembers = panelMembersManager.DecodeString(tbPanelMembers.Text, "");

			if(comboStatus.SelectedItem != null)
			{
				obj.Status = DojoTestListStatus.NewPlaceHolder(int.Parse(comboStatus.SelectedValue));
			}
			else
			{
				obj.Status = null;
			}
			if(ddActiveTestList.SelectedItem != null && ddActiveTestList.SelectedValue != "null")
			{
				obj.ActiveTestList = DojoTestList.NewPlaceHolder(int.Parse(ddActiveTestList.SelectedValue));
			}
			else
			{
				obj.ActiveTestList = null;
			}
			if(comboItem.SelectedItem != null)
			{
				obj.Item = RHItem.NewPlaceHolder(int.Parse(comboItem.SelectedValue));
			}
			else
			{
				obj.Item = null;
			}
			if(editOnAdd)
				dojoTestID = obj.Save();
			else
				obj.Save();

			if(resetOnAdd)
			{
				DojoTest newObj = new DojoTest();
				tbName.Text = newObj.Name;
				tbDescription.Text = newObj.Description;
				tbTestDate.Text = newObj.TestDate.ToString();
				if(newObj.Location != null)
				{
					comboLocation.Text = newObj.Location.BusinessName;
					foreach(ComponentArt.Web.UI.ComboBoxItem item in comboLocation.Items)
					{
						if(item.Value == newObj.Location.ID.ToString())
						{
							comboLocation.SelectedItem = item;
							break;
						}
					}
				}
				else
				{
					// Necissary to clear prior ViewState - if only we don't need it.
					comboLocation.Text = string.Empty;
					comboLocation.SelectedItem = null;
				}
				if(newObj.ListMemberType1 != null)
				{
					comboListMemberType1.Text = newObj.ListMemberType1.Name;
					foreach(ComponentArt.Web.UI.ComboBoxItem item in comboListMemberType1.Items)
					{
						if(item.Value == newObj.ListMemberType1.ID.ToString())
						{
							comboListMemberType1.SelectedItem = item;
							break;
						}
					}
				}
				else
				{
					// Necissary to clear prior ViewState - if only we don't need it.
					comboListMemberType1.Text = string.Empty;
					comboListMemberType1.SelectedItem = null;
				}
				if(newObj.ListMemberType2 != null)
				{
					comboListMemberType2.Text = newObj.ListMemberType2.Name;
					foreach(ComponentArt.Web.UI.ComboBoxItem item in comboListMemberType2.Items)
					{
						if(item.Value == newObj.ListMemberType2.ID.ToString())
						{
							comboListMemberType2.SelectedItem = item;
							break;
						}
					}
				}
				else
				{
					// Necissary to clear prior ViewState - if only we don't need it.
					comboListMemberType2.Text = string.Empty;
					comboListMemberType2.SelectedItem = null;
				}
				if(newObj.ListMemberType3 != null)
				{
					comboListMemberType3.Text = newObj.ListMemberType3.Name;
					foreach(ComponentArt.Web.UI.ComboBoxItem item in comboListMemberType3.Items)
					{
						if(item.Value == newObj.ListMemberType3.ID.ToString())
						{
							comboListMemberType3.SelectedItem = item;
							break;
						}
					}
				}
				else
				{
					// Necissary to clear prior ViewState - if only we don't need it.
					comboListMemberType3.Text = string.Empty;
					comboListMemberType3.SelectedItem = null;
				}
				if (newObj.PanelChief != null)
					foreach(ListItem item in ddPanelChief.Items)
						item.Selected = newObj.PanelChief.ID.ToString() == item.Value;
				else if (ddPanelChief.Items.Count > 0)
					ddPanelChief.SelectedIndex = 0;

				tbPanelMembers.Text = newObj.PanelMembers.ToEncodedString("\r\n", "");
				if(newObj.Status != null)
				{
					comboStatus.Text = newObj.Status.ToString();
					foreach(ComponentArt.Web.UI.ComboBoxItem item in comboStatus.Items)
					{
						if(item.Value == newObj.Status.ID.ToString())
						{
							comboStatus.SelectedItem = item;
							break;
						}
					}
				}
				else
				{
					// Necissary to clear prior ViewState - if only we don't need it.
					comboStatus.Text = string.Empty;
					comboStatus.SelectedItem = null;
				}
				if (newObj.ActiveTestList != null)
					foreach(ListItem item in ddActiveTestList.Items)
						item.Selected = newObj.ActiveTestList.ID.ToString() == item.Value;
				else if (ddActiveTestList.Items.Count > 0)
					ddActiveTestList.SelectedIndex = 0;

				if(newObj.Item != null)
				{
					comboItem.Text = newObj.Item.ToString();
					foreach(ComponentArt.Web.UI.ComboBoxItem item in comboItem.Items)
					{
						if(item.Value == newObj.Item.ID.ToString())
						{
							comboItem.SelectedItem = item;
							break;
						}
					}
				}
				else
				{
					// Necissary to clear prior ViewState - if only we don't need it.
					comboItem.Text = string.Empty;
					comboItem.SelectedItem = null;
				}
			}

			OnUpdated(EventArgs.Empty);
		}

		protected void cancel_Click(object sender, EventArgs e)
		{
			this.OnCancelled(EventArgs.Empty);
		}

		protected void delete_Click(object sender, EventArgs e)
		{
			this.OnDeleteClicked(EventArgs.Empty);
		}

		public event EventHandler Cancelled;
		protected virtual void OnCancelled(EventArgs e)
		{
			if(Cancelled != null)
				Cancelled(this, e);
		}

		public event EventHandler Updated;
		protected virtual void OnUpdated(EventArgs e)
		{
			if(Updated != null)
				Updated(this, e);
		}

		public event EventHandler DeleteClicked;
		protected virtual void OnDeleteClicked(EventArgs e)
		{
			if(DeleteClicked != null)
			DeleteClicked(this, e);
		}

		#endregion

		protected override void OnLoad(EventArgs e)
		{
			base.OnLoad(e);
			EnsureChildControls(); // Necissary to catch events!
		}

		protected override void OnPreRender(EventArgs e)
		{
			base.OnPreRender(e);

			if(loadFlag)
			{
				if(dojoTestID > 0)
				{
					obj = new DojoTest(dojoTestID);
					headerText.Text = "Edit  - " + obj.ToString();
				}
				else if(dojoTestID <= 0)
				{
					obj = new DojoTest();
					headerText.Text = "Add ";
				}

				// Bind Default Data
				tbName.Text = obj.Name;
				tbDescription.Text = obj.Description;
				tbTestDate.Text = obj.TestDate.ToString();
				if(obj.Location != null)
				{
					comboLocation.Text = obj.Location.BusinessName;
					foreach(ComponentArt.Web.UI.ComboBoxItem item in comboLocation.Items)
					{
						if(item.Value == obj.Location.ID.ToString())
						{
							comboLocation.SelectedItem = item;
							break;
						}
					}
				}
				else
				{
					// Necissary to clear prior ViewState - if only we don't need it.
					comboLocation.Text = string.Empty;
					comboLocation.SelectedItem = null;
				}

				// Bind List Generator Data
				if(obj.ListMemberType1 != null)
				{
					comboListMemberType1.Text = obj.ListMemberType1.Name;
					foreach(ComponentArt.Web.UI.ComboBoxItem item in comboListMemberType1.Items)
					{
						if(item.Value == obj.ListMemberType1.ID.ToString())
						{
							comboListMemberType1.SelectedItem = item;
							break;
						}
					}
				}
				else
				{
					// Necissary to clear prior ViewState - if only we don't need it.
					comboListMemberType1.Text = string.Empty;
					comboListMemberType1.SelectedItem = null;
				}
				if(obj.ListMemberType2 != null)
				{
					comboListMemberType2.Text = obj.ListMemberType2.Name;
					foreach(ComponentArt.Web.UI.ComboBoxItem item in comboListMemberType2.Items)
					{
						if(item.Value == obj.ListMemberType2.ID.ToString())
						{
							comboListMemberType2.SelectedItem = item;
							break;
						}
					}
				}
				else
				{
					// Necissary to clear prior ViewState - if only we don't need it.
					comboListMemberType2.Text = string.Empty;
					comboListMemberType2.SelectedItem = null;
				}
				if(obj.ListMemberType3 != null)
				{
					comboListMemberType3.Text = obj.ListMemberType3.Name;
					foreach(ComponentArt.Web.UI.ComboBoxItem item in comboListMemberType3.Items)
					{
						if(item.Value == obj.ListMemberType3.ID.ToString())
						{
							comboListMemberType3.SelectedItem = item;
							break;
						}
					}
				}
				else
				{
					// Necissary to clear prior ViewState - if only we don't need it.
					comboListMemberType3.Text = string.Empty;
					comboListMemberType3.SelectedItem = null;
				}

				// Bind Administration Data
				if (obj.PanelChief != null)
					foreach(ListItem item in ddPanelChief.Items)
						item.Selected = obj.PanelChief.ID.ToString() == item.Value;
				else if (ddPanelChief.Items.Count > 0)
					ddPanelChief.SelectedIndex = 0;

				tbPanelMembers.Text = obj.PanelMembers.ToEncodedString("\r\n", "");

				// Bind System Data
				if(obj.Status != null)
				{
					comboStatus.Text = obj.Status.ToString();
					foreach(ComponentArt.Web.UI.ComboBoxItem item in comboStatus.Items)
					{
						if(item.Value == obj.Status.ID.ToString())
						{
							comboStatus.SelectedItem = item;
							break;
						}
					}
				}
				else
				{
					// Necissary to clear prior ViewState - if only we don't need it.
					comboStatus.Text = string.Empty;
					comboStatus.SelectedItem = null;
				}
				if (obj.ActiveTestList != null)
					foreach(ListItem item in ddActiveTestList.Items)
						item.Selected = obj.ActiveTestList.ID.ToString() == item.Value;
				else if (ddActiveTestList.Items.Count > 0)
					ddActiveTestList.SelectedIndex = 0;


				// Bind Rappahanock Data
				if(obj.Item != null)
				{
					comboItem.Text = obj.Item.ToString();
					foreach(ComponentArt.Web.UI.ComboBoxItem item in comboItem.Items)
					{
						if(item.Value == obj.Item.ID.ToString())
						{
							comboItem.SelectedItem = item;
							break;
						}
					}
				}
				else
				{
					// Necissary to clear prior ViewState - if only we don't need it.
					comboItem.Text = string.Empty;
					comboItem.SelectedItem = null;
				}
				tabstrip.SelectedTab = tabstrip.Tabs[0];
				multipage.SelectedIndex = 0;
			}
		}

		protected override void LoadViewState(object savedState)
		{
			if(savedState != null)
			{
				object[] myState = (object[]) savedState;
				if(myState[0] != null)
					base.LoadViewState(myState[0]);
				if(myState[1] != null)
					dojoTestID = (int) myState[1];
			}
		}

		protected override object SaveViewState()
		{
			object baseState = base.SaveViewState();
			object[] myState = new object[2];
			myState[0] = baseState;
			myState[1] = dojoTestID;
			return myState;
		}
	}
}
