/* ********************************************************** *
 * AMNS NitroCast v1.0 Class ComponentArt Based Editor          *
 * Autogenerated by NitroCast © 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Data;
using System.Web.UI;
using System.ComponentModel;
using ComponentArt.Web.UI;
using Amns.GreyFox.Web.UI.WebControls;
using System.Web.UI.WebControls;
using Amns.Rappahanock;

namespace Amns.Tessen.Web.UI.WebControls
{
    /// <summary>
    /// Default web editor for DojoMembership.
    /// </summary>
    [ToolboxData("<{0}:DojoMembershipEditor runat=server></{0}:DojoMembershipEditor>")]
    public class DojoMembershipEditor : System.Web.UI.Control, INamingContainer
    {
        private int dojoMembershipID;
        private DojoMembership obj;
        private bool loadFlag = false;
        private bool resetOnAdd;
        private bool editOnAdd;
        private string cssClass;

        protected ComponentArt.Web.UI.TabStrip tabstrip;
        protected ComponentArt.Web.UI.MultiPage multipage;
        protected Literal headerText;

        #region Private Control Fields for General Folder

        private ComponentArt.Web.UI.ComboBox comboMember;
        private DateEditor deStartDate;
        private DateEditor deEndDate;
        private ComponentArt.Web.UI.ComboBox comboOrganization;
        private TextBox tbOrganizationMemberID;
        private DropDownList ddParent;
        private ComponentArt.Web.UI.ComboBox comboMemberTypeTemplate;
        private ComponentArt.Web.UI.ComboBox comboMembershipTemplate;
        private Literal ltSessionID;
        private TextBox tbFee;
        private RequiredFieldValidator reqFee;
        private RangeValidator rngFee;
        private Literal ltPriorMembership;
        private TextBox tbPaymentAmount;
        private RequiredFieldValidator reqPaymentAmount;
        private RangeValidator rngPaymentAmount;
        private CheckBox cbIsProRated;

        #endregion

        #region Private Control Fields for Rappahanock Folder

        private DropDownList ddInvoiceLine;

        #endregion

        private Button btOk;
        private Button btCancel;
        private Button btDelete;

        #region Public Control Properties

        [Bindable(true), Category("Data"), DefaultValue(0)]
        public int DojoMembershipID
        {
            get
            {
                return dojoMembershipID;
            }
            set
            {
                loadFlag = true;
                dojoMembershipID = value;
            }
        }

        [Bindable(true), Category("Behavior"), DefaultValue(false)]
        public bool ResetOnAdd
        {
            get
            {
                return resetOnAdd;
            }
            set
            {
                resetOnAdd = value;
            }
        }

        [Bindable(true), Category("Behavior"), DefaultValue(false)]
        public bool EditOnAdd
        {
            get
            {
                return editOnAdd;
            }
            set
            {
                editOnAdd = value;
            }
        }

        [Bindable(true), Category("Appearance"), DefaultValue("")]
        public string CssClass
        {
            get
            {
                return cssClass;
            }
            set
            {
                cssClass = value;
            }
        }

        #endregion

        protected override void CreateChildControls()
        {
            Panel container = new Panel();
            container.CssClass = this.CssClass;
            Controls.Add(container);
            Panel header = new Panel();
            header.CssClass = "pHead";
            container.Controls.Add(header);
            headerText = new Literal();
            header.Controls.Add(headerText);
            Panel content = new Panel();
            content.CssClass = "pContent";
            container.Controls.Add(content);
            #region Tab Strip

            tabstrip = new ComponentArt.Web.UI.TabStrip();

            // Create the DefaultTabLook instance and add it to the ItemLooks collection
            ComponentArt.Web.UI.ItemLook defaultTabLook = new ComponentArt.Web.UI.ItemLook();
            defaultTabLook.LookId = "DefaultTabLook";
            defaultTabLook.CssClass = "DefaultTab";
            defaultTabLook.HoverCssClass = "DefaultTabHover";
            defaultTabLook.LabelPaddingLeft = Unit.Parse("10");
            defaultTabLook.LabelPaddingRight = Unit.Parse("10");
            defaultTabLook.LabelPaddingTop = Unit.Parse("5");
            defaultTabLook.LabelPaddingBottom = Unit.Parse("4");
            defaultTabLook.LeftIconUrl = "tab_left_icon.gif";
            defaultTabLook.RightIconUrl = "tab_right_icon.gif";
            defaultTabLook.HoverLeftIconUrl = "hover_tab_left_icon.gif";
            defaultTabLook.HoverRightIconUrl = "hover_tab_right_icon.gif";
            defaultTabLook.LeftIconWidth = Unit.Parse("3");
            defaultTabLook.LeftIconHeight = Unit.Parse("21");
            defaultTabLook.RightIconWidth = Unit.Parse("3");
            defaultTabLook.RightIconHeight = Unit.Parse("21");
            tabstrip.ItemLooks.Add(defaultTabLook);

            // Create the SelectedTabLook instance and add it to the ItemLooks collection
            ComponentArt.Web.UI.ItemLook selectedTabLook = new ComponentArt.Web.UI.ItemLook();
            selectedTabLook.LookId = "SelectedTabLook";
            selectedTabLook.CssClass = "SelectedTab";
            selectedTabLook.LabelPaddingLeft = Unit.Parse("10");
            selectedTabLook.LabelPaddingRight = Unit.Parse("10");
            selectedTabLook.LabelPaddingTop = Unit.Parse("5");
            selectedTabLook.LabelPaddingBottom = Unit.Parse("4");
            selectedTabLook.LeftIconUrl = "selected_tab_left_icon.gif";
            selectedTabLook.RightIconUrl = "selected_tab_right_icon.gif";
            selectedTabLook.LeftIconWidth = Unit.Parse("3");
            selectedTabLook.LeftIconHeight = Unit.Parse("21");
            selectedTabLook.RightIconWidth = Unit.Parse("3");
            selectedTabLook.RightIconHeight = Unit.Parse("21");
            tabstrip.ItemLooks.Add(selectedTabLook);

            tabstrip.ID = this.ID + "_TabStrip";
            tabstrip.CssClass = "TopGroup";
            tabstrip.DefaultItemLookId = "DefaultTabLook";
            tabstrip.DefaultSelectedItemLookId = "SelectedTabLook";
            tabstrip.DefaultGroupTabSpacing = 1;
            tabstrip.ImagesBaseUrl = "tabstrip_images/";
            tabstrip.MultiPageId = this.ID + "_MultiPage";
            // tabstrip.EnableViewState = false;  // ComponentArt ComboBox does not yet work with ViewState off!
            content.Controls.Add(tabstrip);

            #endregion

            #region MultiPage

            multipage = new ComponentArt.Web.UI.MultiPage();
            multipage.ID = this.ID + "_MultiPage";
            multipage.CssClass = "MultiPage";
            // multipage.EnableViewState = false; // ComponentArt ComboBox does not yet work with ViewState off!
            content.Controls.Add(multipage);

            #endregion

            #region Child Controls for General Folder

            ComponentArt.Web.UI.PageView GeneralView = new ComponentArt.Web.UI.PageView();
            GeneralView.CssClass = "PageContent";
            multipage.PageViews.Add(GeneralView);

            TabStripTab GeneralTab = new TabStripTab();
            GeneralTab.Text = "General";
            GeneralTab.PageViewId = GeneralView.ID;
            tabstrip.Tabs.Add(GeneralTab);

            comboMember = new ComponentArt.Web.UI.ComboBox();
            comboMember.ID = "comboMember";
            comboMember.CssClass = "comboBox";
            comboMember.HoverCssClass = "comboBoxHover";
            comboMember.FocusedCssClass = "comboBoxHover";
            comboMember.TextBoxCssClass = "comboTextBox";
            comboMember.DropDownCssClass = "comboDropDown";
            comboMember.ItemCssClass = "comboItem";
            comboMember.ItemHoverCssClass = "comboItemHover";
            comboMember.SelectedItemCssClass = "comboItemHover";
            comboMember.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboMember.DropImageUrl = "combobox_images/drop.gif";
            comboMember.Width = Unit.Pixel(300);
            // comboMember.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(GeneralView, "Member", comboMember);

            deStartDate = new DateEditor();
            deStartDate.ID = this.ID + "_de";
            deStartDate.AutoAdjust = true;
            deStartDate.EnableViewState = false;
            registerControl(GeneralView, "StartDate", deStartDate);

            deEndDate = new DateEditor();
            deStartDate.ID = this.ID + "_de";
            deStartDate.AutoAdjust = true;
            deEndDate.EnableViewState = false;
            registerControl(GeneralView, "EndDate", deEndDate);

            comboOrganization = new ComponentArt.Web.UI.ComboBox();
            comboOrganization.ID = "comboOrganization";
            comboOrganization.CssClass = "comboBox";
            comboOrganization.HoverCssClass = "comboBoxHover";
            comboOrganization.FocusedCssClass = "comboBoxHover";
            comboOrganization.TextBoxCssClass = "comboTextBox";
            comboOrganization.DropDownCssClass = "comboDropDown";
            comboOrganization.ItemCssClass = "comboItem";
            comboOrganization.ItemHoverCssClass = "comboItemHover";
            comboOrganization.SelectedItemCssClass = "comboItemHover";
            comboOrganization.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboOrganization.DropImageUrl = "combobox_images/drop.gif";
            comboOrganization.Width = Unit.Pixel(300);
            // comboOrganization.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(GeneralView, "Organization", comboOrganization);

            tbOrganizationMemberID = new TextBox();
            tbOrganizationMemberID.ID = "tbOrganizationMemberID";
            tbOrganizationMemberID.EnableViewState = false;
            registerControl(GeneralView, "OrganizationMemberID", tbOrganizationMemberID);

            ddParent = new DropDownList();
            ddParent.ID = "ddParent";
            ddParent.EnableViewState = false;
            registerControl(GeneralView, "Parent Membership", ddParent);

            comboMemberTypeTemplate = new ComponentArt.Web.UI.ComboBox();
            comboMemberTypeTemplate.ID = "comboMemberTypeTemplate";
            comboMemberTypeTemplate.CssClass = "comboBox";
            comboMemberTypeTemplate.HoverCssClass = "comboBoxHover";
            comboMemberTypeTemplate.FocusedCssClass = "comboBoxHover";
            comboMemberTypeTemplate.TextBoxCssClass = "comboTextBox";
            comboMemberTypeTemplate.DropDownCssClass = "comboDropDown";
            comboMemberTypeTemplate.ItemCssClass = "comboItem";
            comboMemberTypeTemplate.ItemHoverCssClass = "comboItemHover";
            comboMemberTypeTemplate.SelectedItemCssClass = "comboItemHover";
            comboMemberTypeTemplate.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboMemberTypeTemplate.DropImageUrl = "combobox_images/drop.gif";
            comboMemberTypeTemplate.Width = Unit.Pixel(300);
            // comboMemberTypeTemplate.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(GeneralView, "Parent Template Group", comboMemberTypeTemplate);

            comboMembershipTemplate = new ComponentArt.Web.UI.ComboBox();
            comboMembershipTemplate.ID = "comboMembershipTemplate";
            comboMembershipTemplate.CssClass = "comboBox";
            comboMembershipTemplate.HoverCssClass = "comboBoxHover";
            comboMembershipTemplate.FocusedCssClass = "comboBoxHover";
            comboMembershipTemplate.TextBoxCssClass = "comboTextBox";
            comboMembershipTemplate.DropDownCssClass = "comboDropDown";
            comboMembershipTemplate.ItemCssClass = "comboItem";
            comboMembershipTemplate.ItemHoverCssClass = "comboItemHover";
            comboMembershipTemplate.SelectedItemCssClass = "comboItemHover";
            comboMembershipTemplate.DropHoverImageUrl = "combobox_images/drop_hover.gif";
            comboMembershipTemplate.DropImageUrl = "combobox_images/drop.gif";
            comboMembershipTemplate.Width = Unit.Pixel(300);
            // comboMembershipTemplate.EnableViewState = false;      // This is not  yet possible, ComponentArt's ComboBox Requires ViewState!!!
            registerControl(GeneralView, "Parent Template", comboMembershipTemplate);

            ltSessionID = new Literal();
            registerControl(GeneralView, "SessionID", ltSessionID);

            tbFee = new TextBox();
            tbFee.ID = "tbFee";
            tbFee.EnableViewState = false;
            reqFee = new RequiredFieldValidator();
            reqFee.ID = "reqFee";
            reqFee.ControlToValidate = tbFee.ID;
            reqFee.ErrorMessage = "*";
            reqFee.Display = ValidatorDisplay.Dynamic;
            rngFee = new RangeValidator();
            rngFee.ID = "rngFee";
            rngFee.ControlToValidate = tbFee.ID;
            rngFee.ErrorMessage = "*";
            rngFee.Display = ValidatorDisplay.Dynamic;
            rngFee.Type = ValidationDataType.Double;
            rngFee.MinimumValue = "0";
            rngFee.MaximumValue = "79228162514264337593543950335";
            registerControl(GeneralView, "Fee", tbFee, reqFee, rngFee);

            ltPriorMembership = new Literal();
            registerControl(GeneralView, "PriorMembership", ltPriorMembership);

            tbPaymentAmount = new TextBox();
            tbPaymentAmount.ID = "tbPaymentAmount";
            tbPaymentAmount.EnableViewState = false;
            reqPaymentAmount = new RequiredFieldValidator();
            reqPaymentAmount.ID = "reqPaymentAmount";
            reqPaymentAmount.ControlToValidate = tbPaymentAmount.ID;
            reqPaymentAmount.ErrorMessage = "*";
            reqPaymentAmount.Display = ValidatorDisplay.Dynamic;
            rngPaymentAmount = new RangeValidator();
            rngPaymentAmount.ID = "rngPaymentAmount";
            rngPaymentAmount.ControlToValidate = tbPaymentAmount.ID;
            rngPaymentAmount.ErrorMessage = "*";
            rngPaymentAmount.Display = ValidatorDisplay.Dynamic;
            rngPaymentAmount.Type = ValidationDataType.Double;
            rngPaymentAmount.MinimumValue = "0";
            rngPaymentAmount.MaximumValue = "79228162514264337593543950335";
            registerControl(GeneralView, "PaymentAmount", tbPaymentAmount, reqPaymentAmount, rngPaymentAmount);

            cbIsProRated = new CheckBox();
            cbIsProRated.ID = "cbIsProRated";
            cbIsProRated.EnableViewState = false;
            registerControl(GeneralView, "IsProRated", cbIsProRated);

            #endregion

            #region Child Controls for Rappahanock Folder

            ComponentArt.Web.UI.PageView RappahanockView = new ComponentArt.Web.UI.PageView();
            RappahanockView.CssClass = "PageContent";
            multipage.PageViews.Add(RappahanockView);

            TabStripTab RappahanockTab = new TabStripTab();
            RappahanockTab.Text = "Rappahanock";
            RappahanockTab.PageViewId = RappahanockView.ID;
            tabstrip.Tabs.Add(RappahanockTab);

            ddInvoiceLine = new DropDownList();
            ddInvoiceLine.ID = "ddInvoiceLine";
            ddInvoiceLine.EnableViewState = false;
            registerControl(RappahanockView, "InvoiceLine", ddInvoiceLine);

            #endregion

            Panel buttons = new Panel();
            buttons.CssClass = "pButtons";
            content.Controls.Add(buttons);

            btOk = new Button();
            btOk.Text = "OK";
            btOk.Width = Unit.Pixel(72);
            btOk.EnableViewState = false;
            btOk.Click += new EventHandler(ok_Click);
            buttons.Controls.Add(btOk);

            btCancel = new Button();
            btCancel.Text = "Cancel";
            btCancel.Width = Unit.Pixel(72);
            btCancel.EnableViewState = false;
            btCancel.CausesValidation = false;
            btCancel.Click += new EventHandler(cancel_Click);
            buttons.Controls.Add(btCancel);

            btDelete = new Button();
            btDelete.Text = "Delete";
            btDelete.Width = Unit.Pixel(72);
            btDelete.EnableViewState = false;
            btDelete.Click += new EventHandler(delete_Click);
            buttons.Controls.Add(btDelete);

            bind();
            ChildControlsCreated = true;
        }

        private void registerControl(ComponentArt.Web.UI.PageView pageView,
        string caption,
        params Control[] controls)
		{
			ControlCollection pageViewControls = pageView.Controls;
			pageViewControls.Add(new LiteralControl("<div class=\"inputrow\">"));
			pageViewControls.Add(new LiteralControl("<span class=\"inputlabel\">"));
			pageViewControls.Add(new LiteralControl(caption));
			pageViewControls.Add(new LiteralControl("</span><span class=\"inputfield\">"));
			foreach(Control control in controls)
				pageViewControls.Add(control);
			pageViewControls.Add(new LiteralControl("</span></div>"));
		}

        private void bind()
        {
            DojoMemberManager dojoMemberManager = new DojoMemberManager();
            DojoMemberCollection dojoMemberCollection = dojoMemberManager.GetCollection(string.Empty, string.Empty);
            foreach (DojoMember itemObject in dojoMemberCollection)
            {
                ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
                item.Text = itemObject.ToString();
                item.Value = itemObject.ID.ToString();
                comboMember.Items.Add(item);
            }


            DojoOrganizationManager dojoOrganizationManager = new DojoOrganizationManager();
            DojoOrganizationCollection dojoOrganizationCollection = dojoOrganizationManager.GetCollection(string.Empty, string.Empty);
            foreach (DojoOrganization itemObject in dojoOrganizationCollection)
            {
                ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
                item.Text = itemObject.ToString();
                item.Value = itemObject.ID.ToString();
                comboOrganization.Items.Add(item);
            }


            DojoMembershipManager dojoMembershipManager = new DojoMembershipManager();
            DojoMembershipCollection dojoMembershipCollection = dojoMembershipManager.GetCollection(string.Empty, string.Empty);
            ddParent.Items.Add(new ListItem("             ", "null"));
            foreach (DojoMembership itemObject in dojoMembershipCollection)
                ddParent.Items.Add(new ListItem(itemObject.ToString(), itemObject.ID.ToString()));


            DojoMemberTypeTemplateManager dojoMemberTypeTemplateManager = new DojoMemberTypeTemplateManager();
            DojoMemberTypeTemplateCollection dojoMemberTypeTemplateCollection = dojoMemberTypeTemplateManager.GetCollection(string.Empty, string.Empty);
            foreach (DojoMemberTypeTemplate itemObject in dojoMemberTypeTemplateCollection)
            {
                ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
                item.Text = itemObject.ToString();
                item.Value = itemObject.ID.ToString();
                comboMemberTypeTemplate.Items.Add(item);
            }


            DojoMembershipTemplateManager dojoMembershipTemplateManager = new DojoMembershipTemplateManager();
            DojoMembershipTemplateCollection dojoMembershipTemplateCollection = dojoMembershipTemplateManager.GetCollection(string.Empty, string.Empty);
            foreach (DojoMembershipTemplate itemObject in dojoMembershipTemplateCollection)
            {
                ComponentArt.Web.UI.ComboBoxItem item = new ComponentArt.Web.UI.ComboBoxItem();
                item.Text = itemObject.ToString();
                item.Value = itemObject.ID.ToString();
                comboMembershipTemplate.Items.Add(item);
            }



            RHInvoiceLineManager rHInvoiceLineManager = new RHInvoiceLineManager();
            RHInvoiceLineCollection rHInvoiceLineCollection = rHInvoiceLineManager.GetCollection(string.Empty, string.Empty);
            ddInvoiceLine.Items.Add(new ListItem("             ", "null"));
            foreach (RHInvoiceLine itemObject in rHInvoiceLineCollection)
                ddInvoiceLine.Items.Add(new ListItem(itemObject.ToString(), itemObject.ID.ToString()));


        }

        #region Events

        protected void ok_Click(object sender, EventArgs e)
        {
            if (dojoMembershipID == 0)
                obj = new DojoMembership();
            else
                obj = new DojoMembership(dojoMembershipID);

            if (comboMember.SelectedItem != null)
            {
                obj.Member = DojoMember.NewPlaceHolder(int.Parse(comboMember.SelectedValue));
            }
            else
            {
                obj.Member = null;
            }
            obj.StartDate = deStartDate.Date;
            obj.EndDate = deEndDate.Date;
            if (comboOrganization.SelectedItem != null)
            {
                obj.Organization = DojoOrganization.NewPlaceHolder(int.Parse(comboOrganization.SelectedValue));
            }
            else
            {
                obj.Organization = null;
            }
            obj.OrganizationMemberID = tbOrganizationMemberID.Text;
            if (ddParent.SelectedItem != null && ddParent.SelectedValue != "null")
            {
                obj.Parent = DojoMembership.NewPlaceHolder(int.Parse(ddParent.SelectedValue));
            }
            else
            {
                obj.Parent = null;
            }
            if (comboMemberTypeTemplate.SelectedItem != null)
            {
                obj.MemberTypeTemplate = DojoMemberTypeTemplate.NewPlaceHolder(int.Parse(comboMemberTypeTemplate.SelectedValue));
            }
            else
            {
                obj.MemberTypeTemplate = null;
            }
            if (comboMembershipTemplate.SelectedItem != null)
            {
                obj.MembershipTemplate = DojoMembershipTemplate.NewPlaceHolder(int.Parse(comboMembershipTemplate.SelectedValue));
            }
            else
            {
                obj.MembershipTemplate = null;
            }
            obj.Fee = decimal.Parse(tbFee.Text);
            obj.PaymentAmount = decimal.Parse(tbPaymentAmount.Text);
            obj.IsProRated = cbIsProRated.Checked;
            if (ddInvoiceLine.SelectedItem != null && ddInvoiceLine.SelectedValue != "null")
            {
                obj.InvoiceLine = RHInvoiceLine.NewPlaceHolder(int.Parse(ddInvoiceLine.SelectedValue));
            }
            else
            {
                obj.InvoiceLine = null;
            }
            if (editOnAdd)
                dojoMembershipID = obj.Save();
            else
                obj.Save();

            if (resetOnAdd)
            {
                DojoMembership newObj = new DojoMembership();
                if (newObj.Member != null)
                {
                    comboMember.Text = newObj.Member.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboMember.Items)
                    {
                        if (item.Value == newObj.Member.ID.ToString())
                        {
                            comboMember.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboMember.Text = string.Empty;
                    comboMember.SelectedItem = null;
                }
                deStartDate.Date = newObj.StartDate;
                deEndDate.Date = newObj.EndDate;
                if (newObj.Organization != null)
                {
                    comboOrganization.Text = newObj.Organization.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboOrganization.Items)
                    {
                        if (item.Value == newObj.Organization.ID.ToString())
                        {
                            comboOrganization.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboOrganization.Text = string.Empty;
                    comboOrganization.SelectedItem = null;
                }
                tbOrganizationMemberID.Text = newObj.OrganizationMemberID;
                if (newObj.Parent != null)
                    foreach (ListItem item in ddParent.Items)
                        item.Selected = newObj.Parent.ID.ToString() == item.Value;
                else if (ddParent.Items.Count > 0)
                    ddParent.SelectedIndex = 0;

                if (newObj.MemberTypeTemplate != null)
                {
                    comboMemberTypeTemplate.Text = newObj.MemberTypeTemplate.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboMemberTypeTemplate.Items)
                    {
                        if (item.Value == newObj.MemberTypeTemplate.ID.ToString())
                        {
                            comboMemberTypeTemplate.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboMemberTypeTemplate.Text = string.Empty;
                    comboMemberTypeTemplate.SelectedItem = null;
                }
                if (newObj.MembershipTemplate != null)
                {
                    comboMembershipTemplate.Text = newObj.MembershipTemplate.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboMembershipTemplate.Items)
                    {
                        if (item.Value == newObj.MembershipTemplate.ID.ToString())
                        {
                            comboMembershipTemplate.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboMembershipTemplate.Text = string.Empty;
                    comboMembershipTemplate.SelectedItem = null;
                }
                ltSessionID.Text = newObj.SessionID.ToString();
                tbFee.Text = newObj.Fee.ToString();
                ltPriorMembership.Text = newObj.PriorMembership != null ?
                    newObj.PriorMembership.ToString() : Localization.Strings.StartupMembership;
                tbPaymentAmount.Text = newObj.PaymentAmount.ToString();
                cbIsProRated.Checked = newObj.IsProRated;
                if (newObj.InvoiceLine != null)
                    foreach (ListItem item in ddInvoiceLine.Items)
                        item.Selected = newObj.InvoiceLine.ID.ToString() == item.Value;
                else if (ddInvoiceLine.Items.Count > 0)
                    ddInvoiceLine.SelectedIndex = 0;

            }

            OnUpdated(EventArgs.Empty);
        }

        protected void cancel_Click(object sender, EventArgs e)
        {
            this.OnCancelled(EventArgs.Empty);
        }

        protected void delete_Click(object sender, EventArgs e)
        {
            this.OnDeleteClicked(EventArgs.Empty);
        }

        public event EventHandler Cancelled;
        protected virtual void OnCancelled(EventArgs e)
        {
            if (Cancelled != null)
                Cancelled(this, e);
        }

        public event EventHandler Updated;
        protected virtual void OnUpdated(EventArgs e)
        {
            if (Updated != null)
                Updated(this, e);
        }

        public event EventHandler DeleteClicked;
        protected virtual void OnDeleteClicked(EventArgs e)
        {
            if (DeleteClicked != null)
                DeleteClicked(this, e);
        }

        #endregion

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            EnsureChildControls(); // Necissary to catch events!
        }

        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);

            if (loadFlag)
            {
                if (dojoMembershipID > 0)
                {
                    obj = new DojoMembership(dojoMembershipID);
                    headerText.Text = "Edit  - " + obj.ToString();
                }
                else if (dojoMembershipID <= 0)
                {
                    obj = new DojoMembership();
                    headerText.Text = "Add ";
                }

                // Bind General Data
                if (obj.Member != null)
                {
                    comboMember.Text = obj.Member.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboMember.Items)
                    {
                        if (item.Value == obj.Member.ID.ToString())
                        {
                            comboMember.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboMember.Text = string.Empty;
                    comboMember.SelectedItem = null;
                }
                deStartDate.Date = obj.StartDate;
                deEndDate.Date = obj.EndDate;
                if (obj.Organization != null)
                {
                    comboOrganization.Text = obj.Organization.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboOrganization.Items)
                    {
                        if (item.Value == obj.Organization.ID.ToString())
                        {
                            comboOrganization.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboOrganization.Text = string.Empty;
                    comboOrganization.SelectedItem = null;
                }
                tbOrganizationMemberID.Text = obj.OrganizationMemberID;
                if (obj.Parent != null)
                    foreach (ListItem item in ddParent.Items)
                        item.Selected = obj.Parent.ID.ToString() == item.Value;
                else if (ddParent.Items.Count > 0)
                    ddParent.SelectedIndex = 0;

                if (obj.MemberTypeTemplate != null)
                {
                    comboMemberTypeTemplate.Text = obj.MemberTypeTemplate.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboMemberTypeTemplate.Items)
                    {
                        if (item.Value == obj.MemberTypeTemplate.ID.ToString())
                        {
                            comboMemberTypeTemplate.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboMemberTypeTemplate.Text = string.Empty;
                    comboMemberTypeTemplate.SelectedItem = null;
                }
                if (obj.MembershipTemplate != null)
                {
                    comboMembershipTemplate.Text = obj.MembershipTemplate.ToString();
                    foreach (ComponentArt.Web.UI.ComboBoxItem item in comboMembershipTemplate.Items)
                    {
                        if (item.Value == obj.MembershipTemplate.ID.ToString())
                        {
                            comboMembershipTemplate.SelectedItem = item;
                            break;
                        }
                    }
                }
                else
                {
                    // Necissary to clear prior ViewState - if only we don't need it.
                    comboMembershipTemplate.Text = string.Empty;
                    comboMembershipTemplate.SelectedItem = null;
                }
                ltSessionID.Text = obj.SessionID.ToString();
                tbFee.Text = obj.Fee.ToString();
                ltPriorMembership.Text = obj.PriorMembership != null ?
                    obj.PriorMembership.ToString() : Localization.Strings.StartupMembership;
                tbPaymentAmount.Text = obj.PaymentAmount.ToString();
                cbIsProRated.Checked = obj.IsProRated;

                // Bind Rappahanock Data
                if (obj.InvoiceLine != null)
                    foreach (ListItem item in ddInvoiceLine.Items)
                        item.Selected = obj.InvoiceLine.ID.ToString() == item.Value;
                else if (ddInvoiceLine.Items.Count > 0)
                    ddInvoiceLine.SelectedIndex = 0;

                tabstrip.SelectedTab = tabstrip.Tabs[0];
                multipage.SelectedIndex = 0;
            }
        }

        protected override void LoadViewState(object savedState)
        {
            if (savedState != null)
            {
                object[] myState = (object[])savedState;
                if (myState[0] != null)
                    base.LoadViewState(myState[0]);
                if (myState[1] != null)
                    dojoMembershipID = (int)myState[1];
            }
        }

        protected override object SaveViewState()
        {
            object baseState = base.SaveViewState();
            object[] myState = new object[2];
            myState[0] = baseState;
            myState[1] = dojoMembershipID;
            return myState;
        }
    }
}
