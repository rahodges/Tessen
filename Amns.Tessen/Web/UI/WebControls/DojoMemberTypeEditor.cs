/* ********************************************************** *
 * AMNS NitroCast v1.0 Class ComponentArt Based Editor          *
 * Autogenerated by NitroCast © 2007 Roy A.E Hodges             *
 * All Rights Reserved                                        *
 * ---------------------------------------------------------- *
 * Source code may not be reproduced or redistributed without *
 * written expressed permission from the author.              *
 * Permission is granted to modify source code by licencee.   *
 * These permissions do not extend to third parties.          *
 * ********************************************************** */

using System;
using System.Data;
using System.Web.UI;
using System.ComponentModel;
using ComponentArt.Web.UI;
using System.Web.UI.WebControls;

namespace Amns.Tessen.Web.UI.WebControls
{
    /// <summary>
    /// Default web editor for DojoMemberType.
    /// </summary>
    [ToolboxData("<{0}:DojoMemberTypeEditor runat=server></{0}:DojoMemberTypeEditor>")]
    public class DojoMemberTypeEditor : System.Web.UI.Control, INamingContainer
    {
        private int dojoMemberTypeID;
        private DojoMemberType obj;
        private bool loadFlag = false;
        private bool resetOnAdd;
        private bool editOnAdd;
        private string cssClass;

        protected ComponentArt.Web.UI.TabStrip tabstrip;
        protected ComponentArt.Web.UI.MultiPage multipage;
        protected Literal headerText;

        #region Private Control Fields for Default Folder

        private TextBox tbName;
        private TextBox tbDescription;
        private TextBox tbOrderNum;
        private RequiredFieldValidator reqOrderNum;
        private RangeValidator rngOrderNum;

        #endregion

        private Button btOk;
        private Button btCancel;
        private Button btDelete;

        #region Public Control Properties

        [Bindable(true), Category("Data"), DefaultValue(0)]
        public int DojoMemberTypeID
        {
            get
            {
                return dojoMemberTypeID;
            }
            set
            {
                loadFlag = true;
                dojoMemberTypeID = value;
            }
        }

        [Bindable(true), Category("Behavior"), DefaultValue(false)]
        public bool ResetOnAdd
        {
            get
            {
                return resetOnAdd;
            }
            set
            {
                resetOnAdd = value;
            }
        }

        [Bindable(true), Category("Behavior"), DefaultValue(false)]
        public bool EditOnAdd
        {
            get
            {
                return editOnAdd;
            }
            set
            {
                editOnAdd = value;
            }
        }

        [Bindable(true), Category("Appearance"), DefaultValue("")]
        public string CssClass
        {
            get
            {
                return cssClass;
            }
            set
            {
                cssClass = value;
            }
        }

        #endregion

        protected override void CreateChildControls()
        {
            Panel container = new Panel();
            container.CssClass = this.CssClass;
            Controls.Add(container);
            Panel header = new Panel();
            header.CssClass = "pHead";
            container.Controls.Add(header);
            headerText = new Literal();
            header.Controls.Add(headerText);
            Panel content = new Panel();
            content.CssClass = "pContent";
            container.Controls.Add(content);
            #region Tab Strip

            tabstrip = new ComponentArt.Web.UI.TabStrip();

            // Create the DefaultTabLook instance and add it to the ItemLooks collection
            ComponentArt.Web.UI.ItemLook defaultTabLook = new ComponentArt.Web.UI.ItemLook();
            defaultTabLook.LookId = "DefaultTabLook";
            defaultTabLook.CssClass = "DefaultTab";
            defaultTabLook.HoverCssClass = "DefaultTabHover";
            defaultTabLook.LabelPaddingLeft = Unit.Parse("10");
            defaultTabLook.LabelPaddingRight = Unit.Parse("10");
            defaultTabLook.LabelPaddingTop = Unit.Parse("5");
            defaultTabLook.LabelPaddingBottom = Unit.Parse("4");
            defaultTabLook.LeftIconUrl = "tab_left_icon.gif";
            defaultTabLook.RightIconUrl = "tab_right_icon.gif";
            defaultTabLook.HoverLeftIconUrl = "hover_tab_left_icon.gif";
            defaultTabLook.HoverRightIconUrl = "hover_tab_right_icon.gif";
            defaultTabLook.LeftIconWidth = Unit.Parse("3");
            defaultTabLook.LeftIconHeight = Unit.Parse("21");
            defaultTabLook.RightIconWidth = Unit.Parse("3");
            defaultTabLook.RightIconHeight = Unit.Parse("21");
            tabstrip.ItemLooks.Add(defaultTabLook);

            // Create the SelectedTabLook instance and add it to the ItemLooks collection
            ComponentArt.Web.UI.ItemLook selectedTabLook = new ComponentArt.Web.UI.ItemLook();
            selectedTabLook.LookId = "SelectedTabLook";
            selectedTabLook.CssClass = "SelectedTab";
            selectedTabLook.LabelPaddingLeft = Unit.Parse("10");
            selectedTabLook.LabelPaddingRight = Unit.Parse("10");
            selectedTabLook.LabelPaddingTop = Unit.Parse("5");
            selectedTabLook.LabelPaddingBottom = Unit.Parse("4");
            selectedTabLook.LeftIconUrl = "selected_tab_left_icon.gif";
            selectedTabLook.RightIconUrl = "selected_tab_right_icon.gif";
            selectedTabLook.LeftIconWidth = Unit.Parse("3");
            selectedTabLook.LeftIconHeight = Unit.Parse("21");
            selectedTabLook.RightIconWidth = Unit.Parse("3");
            selectedTabLook.RightIconHeight = Unit.Parse("21");
            tabstrip.ItemLooks.Add(selectedTabLook);

            tabstrip.ID = this.ID + "_TabStrip";
            tabstrip.CssClass = "TopGroup";
            tabstrip.DefaultItemLookId = "DefaultTabLook";
            tabstrip.DefaultSelectedItemLookId = "SelectedTabLook";
            tabstrip.DefaultGroupTabSpacing = 1;
            tabstrip.ImagesBaseUrl = "tabstrip_images/";
            tabstrip.MultiPageId = this.ID + "_MultiPage";
            // tabstrip.EnableViewState = false;  // ComponentArt ComboBox does not yet work with ViewState off!
            content.Controls.Add(tabstrip);

            #endregion

            #region MultiPage

            multipage = new ComponentArt.Web.UI.MultiPage();
            multipage.ID = this.ID + "_MultiPage";
            multipage.CssClass = "MultiPage";
            // multipage.EnableViewState = false; // ComponentArt ComboBox does not yet work with ViewState off!
            content.Controls.Add(multipage);

            #endregion

            #region Child Controls for Default Folder

            ComponentArt.Web.UI.PageView DefaultView = new ComponentArt.Web.UI.PageView();
            DefaultView.CssClass = "PageContent";
            multipage.PageViews.Add(DefaultView);

            TabStripTab DefaultTab = new TabStripTab();
            DefaultTab.Text = "Default";
            DefaultTab.PageViewId = DefaultView.ID;
            tabstrip.Tabs.Add(DefaultTab);

            tbName = new TextBox();
            tbName.ID = "tbName";
            tbName.EnableViewState = false;
            registerControl(DefaultView, "Name", tbName);

            tbDescription = new TextBox();
            tbDescription.ID = "tbDescription";
            tbDescription.EnableViewState = false;
            registerControl(DefaultView, "Description", tbDescription);

            tbOrderNum = new TextBox();
            tbOrderNum.ID = "tbOrderNum";
            tbOrderNum.EnableViewState = false;
            reqOrderNum = new RequiredFieldValidator();
            reqOrderNum.ID = "reqOrderNum";
            reqOrderNum.ControlToValidate = tbOrderNum.ID;
            reqOrderNum.ErrorMessage = "*";
            reqOrderNum.Display = ValidatorDisplay.Dynamic;
            rngOrderNum = new RangeValidator();
            rngOrderNum.ID = "rngOrderNum";
            rngOrderNum.ControlToValidate = tbOrderNum.ID;
            rngOrderNum.ErrorMessage = "*";
            rngOrderNum.Display = ValidatorDisplay.Dynamic;
            rngOrderNum.Type = ValidationDataType.Integer;
            rngOrderNum.MinimumValue = "-2147483648";
            rngOrderNum.MaximumValue = "2147483647";
            registerControl(DefaultView, "OrderNum", tbOrderNum, reqOrderNum, rngOrderNum);

            #endregion

            Panel buttons = new Panel();
            buttons.CssClass = "pButtons";
            content.Controls.Add(buttons);

            btOk = new Button();
            btOk.Text = "OK";
            btOk.Width = Unit.Pixel(72);
            btOk.EnableViewState = false;
            btOk.Click += new EventHandler(ok_Click);
            buttons.Controls.Add(btOk);

            btCancel = new Button();
            btCancel.Text = "Cancel";
            btCancel.Width = Unit.Pixel(72);
            btCancel.EnableViewState = false;
            btCancel.CausesValidation = false;
            btCancel.Click += new EventHandler(cancel_Click);
            buttons.Controls.Add(btCancel);

            btDelete = new Button();
            btDelete.Text = "Delete";
            btDelete.Width = Unit.Pixel(72);
            btDelete.EnableViewState = false;
            btDelete.Click += new EventHandler(delete_Click);
            buttons.Controls.Add(btDelete);

            bind();
            ChildControlsCreated = true;
        }

        private void registerControl(ComponentArt.Web.UI.PageView pageView,
        string caption,
        params Control[] controls)
		{
			ControlCollection pageViewControls = pageView.Controls;
			pageViewControls.Add(new LiteralControl("<div class=\"inputrow\">"));
			pageViewControls.Add(new LiteralControl("<span class=\"inputlabel\">"));
			pageViewControls.Add(new LiteralControl(caption));
			pageViewControls.Add(new LiteralControl("</span><span class=\"inputfield\">"));
			foreach(Control control in controls)
				pageViewControls.Add(control);
			pageViewControls.Add(new LiteralControl("</span></div>"));
		}

        private void bind()
        {
        }

        #region Events

        protected void ok_Click(object sender, EventArgs e)
        {
            if (dojoMemberTypeID == 0)
                obj = new DojoMemberType();
            else
                obj = new DojoMemberType(dojoMemberTypeID);

            obj.Name = tbName.Text;
            obj.Description = tbDescription.Text;
            obj.OrderNum = int.Parse(tbOrderNum.Text);
            if (editOnAdd)
                dojoMemberTypeID = obj.Save();
            else
                obj.Save();

            if (resetOnAdd)
            {
                DojoMemberType newObj = new DojoMemberType();
                tbName.Text = newObj.Name;
                tbDescription.Text = newObj.Description;
                tbOrderNum.Text = newObj.OrderNum.ToString();
            }

            OnUpdated(EventArgs.Empty);
        }

        protected void cancel_Click(object sender, EventArgs e)
        {
            this.OnCancelled(EventArgs.Empty);
        }

        protected void delete_Click(object sender, EventArgs e)
        {
            this.OnDeleteClicked(EventArgs.Empty);
        }

        public event EventHandler Cancelled;
        protected virtual void OnCancelled(EventArgs e)
        {
            if (Cancelled != null)
                Cancelled(this, e);
        }

        public event EventHandler Updated;
        protected virtual void OnUpdated(EventArgs e)
        {
            if (Updated != null)
                Updated(this, e);
        }

        public event EventHandler DeleteClicked;
        protected virtual void OnDeleteClicked(EventArgs e)
        {
            if (DeleteClicked != null)
                DeleteClicked(this, e);
        }

        #endregion

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            EnsureChildControls(); // Necissary to catch events!
        }

        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);

            if (loadFlag)
            {
                if (dojoMemberTypeID > 0)
                {
                    obj = new DojoMemberType(dojoMemberTypeID);
                    headerText.Text = "Edit  - " + obj.ToString();
                }
                else if (dojoMemberTypeID <= 0)
                {
                    obj = new DojoMemberType();
                    headerText.Text = "Add ";
                }

                // Bind Default Data
                tbName.Text = obj.Name;
                tbDescription.Text = obj.Description;
                tbOrderNum.Text = obj.OrderNum.ToString();
                tabstrip.SelectedTab = tabstrip.Tabs[0];
                multipage.SelectedIndex = 0;
            }
        }

        protected override void LoadViewState(object savedState)
        {
            if (savedState != null)
            {
                object[] myState = (object[])savedState;
                if (myState[0] != null)
                    base.LoadViewState(myState[0]);
                if (myState[1] != null)
                    dojoMemberTypeID = (int)myState[1];
            }
        }

        protected override object SaveViewState()
        {
            object baseState = base.SaveViewState();
            object[] myState = new object[2];
            myState[0] = baseState;
            myState[1] = dojoMemberTypeID;
            return myState;
        }
    }
}
